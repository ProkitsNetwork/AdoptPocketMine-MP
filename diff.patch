diff --git a/.github/dependabot.yml b/.github/dependabot.yml
deleted file mode 100644
index 8acff71d6..000000000
--- a/.github/dependabot.yml
+++ /dev/null
@@ -1,24 +0,0 @@
-version: 2
-updates:
-- package-ecosystem: composer
-  directory: "/"
-  schedule:
-    interval: weekly
-    time: "10:00"
-  open-pull-requests-limit: 10
-  ignore:
-    #only allow patch updates for locale-data - this has to be updated manually due to codegen
-    - dependency-name: pocketmine/locale-data
-      update-types:
-        - "version-update:semver-major"
-        - "version-update:semver-minor"
-
-- package-ecosystem: gitsubmodule
-  directory: "/"
-  schedule:
-    interval: daily
-
-- package-ecosystem: github-actions
-  directory: "/"
-  schedule:
-    interval: weekly
diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
index ebe5d9cb5..590297a7b 100644
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -1,8 +1,6 @@
 name: CI
 
 on:
-  push:
-  pull_request:
   workflow_dispatch:
 
 jobs:
diff --git a/.gitmodules b/.gitmodules
index e52c55a54..a8418a58a 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,6 +1,3 @@
-[submodule "tests/plugins/DevTools"]
-	path = tests/plugins/DevTools
-	url = https://github.com/pmmp/DevTools.git
 [submodule "build/php"]
 	path = build/php
 	url = https://github.com/NetherGamesMC/php-build-scripts.git
\ No newline at end of file
diff --git a/.php-cs-fixer.php b/.php-cs-fixer.php
index 32af1ef48..2effafe17 100644
--- a/.php-cs-fixer.php
+++ b/.php-cs-fixer.php
@@ -5,7 +5,6 @@ $finder = PhpCsFixer\Finder::create()
 	->in(__DIR__ . '/build')
 	->in(__DIR__ . '/tests')
 	->in(__DIR__ . '/tools')
-	->notPath('plugins/DevTools')
 	->notName('PocketMine.php');
 
 return (new PhpCsFixer\Config)
diff --git a/composer.json b/composer.json
index 628ffc3c6..5227c4949 100644
--- a/composer.json
+++ b/composer.json
@@ -78,7 +78,6 @@
       "sort-packages": true
    },
    "scripts": {
-      "make-devtools": "@php -dphar.readonly=0 tests/plugins/DevTools/src/ConsoleScript.php --make ./ --relative tests/plugins/DevTools --out plugins/DevTools.phar",
       "make-server": [
          "@composer install --no-dev --classmap-authoritative --ignore-platform-reqs",
          "@php -dphar.readonly=0 build/server-phar.php"
diff --git a/composer.lock b/composer.lock
index 091484c1e..b6c2f6fd9 100644
--- a/composer.lock
+++ b/composer.lock
@@ -424,16 +424,16 @@
         },
         {
             "name": "pocketmine/locale-data",
-            "version": "2.19.6",
+            "version": "2.19.11",
             "source": {
                 "type": "git",
                 "url": "https://github.com/pmmp/Language.git",
-                "reference": "93e473e20e7f4515ecf45c5ef0f9155b9247a86e"
+                "reference": "d67b3f27f3534f926a81812f4461c49cd39d3468"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/pmmp/Language/zipball/93e473e20e7f4515ecf45c5ef0f9155b9247a86e",
-                "reference": "93e473e20e7f4515ecf45c5ef0f9155b9247a86e",
+                "url": "https://api.github.com/repos/pmmp/Language/zipball/d67b3f27f3534f926a81812f4461c49cd39d3468",
+                "reference": "d67b3f27f3534f926a81812f4461c49cd39d3468",
                 "shasum": ""
             },
             "type": "library",
@@ -441,9 +441,9 @@
             "description": "Language resources used by PocketMine-MP",
             "support": {
                 "issues": "https://github.com/pmmp/Language/issues",
-                "source": "https://github.com/pmmp/Language/tree/2.19.6"
+                "source": "https://github.com/pmmp/Language/tree/2.19.11"
             },
-            "time": "2023-08-08T16:53:23+00:00"
+            "time": "2024-01-29T18:10:39+00:00"
         },
         {
             "name": "pocketmine/log",
@@ -930,16 +930,16 @@
         },
         {
             "name": "symfony/filesystem",
-            "version": "v6.4.0",
+            "version": "v6.4.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/filesystem.git",
-                "reference": "952a8cb588c3bc6ce76f6023000fb932f16a6e59"
+                "reference": "7f3b1755eb49297a0827a7575d5d2b2fd11cc9fb"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/filesystem/zipball/952a8cb588c3bc6ce76f6023000fb932f16a6e59",
-                "reference": "952a8cb588c3bc6ce76f6023000fb932f16a6e59",
+                "url": "https://api.github.com/repos/symfony/filesystem/zipball/7f3b1755eb49297a0827a7575d5d2b2fd11cc9fb",
+                "reference": "7f3b1755eb49297a0827a7575d5d2b2fd11cc9fb",
                 "shasum": ""
             },
             "require": {
@@ -973,7 +973,7 @@
             "description": "Provides basic utilities for the filesystem",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/filesystem/tree/v6.4.0"
+                "source": "https://github.com/symfony/filesystem/tree/v6.4.3"
             },
             "funding": [
                 {
@@ -989,20 +989,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-07-26T17:27:13+00:00"
+            "time": "2024-01-23T14:51:35+00:00"
         },
         {
             "name": "symfony/polyfill-ctype",
-            "version": "v1.28.0",
+            "version": "v1.29.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-ctype.git",
-                "reference": "ea208ce43cbb04af6867b4fdddb1bdbf84cc28cb"
+                "reference": "ef4d7e442ca910c4764bce785146269b30cb5fc4"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/ea208ce43cbb04af6867b4fdddb1bdbf84cc28cb",
-                "reference": "ea208ce43cbb04af6867b4fdddb1bdbf84cc28cb",
+                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/ef4d7e442ca910c4764bce785146269b30cb5fc4",
+                "reference": "ef4d7e442ca910c4764bce785146269b30cb5fc4",
                 "shasum": ""
             },
             "require": {
@@ -1016,9 +1016,6 @@
             },
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-main": "1.28-dev"
-                },
                 "thanks": {
                     "name": "symfony/polyfill",
                     "url": "https://github.com/symfony/polyfill"
@@ -1055,7 +1052,7 @@
                 "portable"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.28.0"
+                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.29.0"
             },
             "funding": [
                 {
@@ -1071,20 +1068,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-01-26T09:26:14+00:00"
+            "time": "2024-01-29T20:11:03+00:00"
         },
         {
             "name": "symfony/polyfill-mbstring",
-            "version": "v1.28.0",
+            "version": "v1.29.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-mbstring.git",
-                "reference": "42292d99c55abe617799667f454222c54c60e229"
+                "reference": "9773676c8a1bb1f8d4340a62efe641cf76eda7ec"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/42292d99c55abe617799667f454222c54c60e229",
-                "reference": "42292d99c55abe617799667f454222c54c60e229",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/9773676c8a1bb1f8d4340a62efe641cf76eda7ec",
+                "reference": "9773676c8a1bb1f8d4340a62efe641cf76eda7ec",
                 "shasum": ""
             },
             "require": {
@@ -1098,9 +1095,6 @@
             },
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-main": "1.28-dev"
-                },
                 "thanks": {
                     "name": "symfony/polyfill",
                     "url": "https://github.com/symfony/polyfill"
@@ -1138,7 +1132,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.28.0"
+                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.29.0"
             },
             "funding": [
                 {
@@ -1154,7 +1148,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-07-28T09:04:16+00:00"
+            "time": "2024-01-29T20:11:03+00:00"
         }
     ],
     "packages-dev": [
@@ -2977,5 +2971,5 @@
     "platform-overrides": {
         "php": "8.1.0"
     },
-    "plugin-api-version": "2.6.0"
+    "plugin-api-version": "2.3.0"
 }
diff --git a/phpstan.neon.dist b/phpstan.neon.dist
index 0c94f7910..32fb68e8a 100644
--- a/phpstan.neon.dist
+++ b/phpstan.neon.dist
@@ -10,8 +10,6 @@ includes:
 	- vendor/phpstan/phpstan-strict-rules/rules.neon
 
 rules:
-	- pocketmine\phpstan\rules\DeprecatedLegacyEnumAccessRule
-	- pocketmine\phpstan\rules\DisallowEnumComparisonRule
 	- pocketmine\phpstan\rules\DisallowForeachByReferenceRule
 	- pocketmine\phpstan\rules\UnsafeForeachArrayOfStringRule
 #	- pocketmine\phpstan\rules\ThreadedSupportedTypesRule
diff --git a/src/BootstrapOptions.php b/src/BootstrapOptions.php
index 879c502a6..c34dda94b 100644
--- a/src/BootstrapOptions.php
+++ b/src/BootstrapOptions.php
@@ -45,4 +45,6 @@ final class BootstrapOptions{
 	public const PLUGINS = "plugins";
 	/** Path to store and load server data */
 	public const DATA = "data";
+	/** Shows basic server version information and exits */
+	public const VERSION = "version";
 }
diff --git a/src/PocketMine.php b/src/PocketMine.php
index 8878bc0b2..7dc1acdf2 100644
--- a/src/PocketMine.php
+++ b/src/PocketMine.php
@@ -25,6 +25,7 @@ namespace pocketmine {
 
 	use Composer\InstalledVersions;
 	use pocketmine\errorhandler\ErrorToExceptionHandler;
+	use pocketmine\network\mcpe\protocol\ProtocolInfo;
 	use pocketmine\thread\ThreadManager;
 	use pocketmine\thread\ThreadSafeClassLoader;
 	use pocketmine\utils\Filesystem;
@@ -40,14 +41,17 @@ namespace pocketmine {
 	use function extension_loaded;
 	use function function_exists;
 	use function getcwd;
+	use function getopt;
 	use function is_dir;
 	use function mkdir;
 	use function phpversion;
 	use function preg_match;
 	use function preg_quote;
+	use function printf;
 	use function realpath;
 	use function version_compare;
 	use const DIRECTORY_SEPARATOR;
+	use const PHP_EOL;
 
 	require_once __DIR__ . '/VersionInfo.php';
 
@@ -166,7 +170,7 @@ namespace pocketmine {
 	 * @return void
 	 */
 	function emit_performance_warnings(\Logger $logger){
-		if(PHP_DEBUG !== 0){
+		if(ZEND_DEBUG_BUILD){
 			$logger->warning("This PHP binary was compiled in debug mode. This has a major impact on performance.");
 		}
 		if(extension_loaded("xdebug") && (!function_exists('xdebug_info') || count(xdebug_info('mode')) !== 0)){
@@ -273,6 +277,11 @@ JIT_WARNING
 
 		ErrorToExceptionHandler::set();
 
+		if(count(getopt("", [BootstrapOptions::VERSION])) > 0){
+			printf("%s %s (git hash %s) for Minecraft: Bedrock Edition %s\n", VersionInfo::NAME, VersionInfo::VERSION()->getFullVersion(true), VersionInfo::GIT_HASH(), ProtocolInfo::MINECRAFT_VERSION);
+			exit(0);
+		}
+
 		$cwd = Utils::assumeNotFalse(realpath(Utils::assumeNotFalse(getcwd())));
 		$dataPath = getopt_string(BootstrapOptions::DATA) ?? $cwd;
 		$pluginPath = getopt_string(BootstrapOptions::PLUGINS) ?? $cwd . DIRECTORY_SEPARATOR . "plugins";
diff --git a/src/Server.php b/src/Server.php
index 77009f9a3..39bf2a306 100644
--- a/src/Server.php
+++ b/src/Server.php
@@ -80,6 +80,7 @@ use pocketmine\player\PlayerDataLoadException;
 use pocketmine\player\PlayerDataProvider;
 use pocketmine\player\PlayerDataSaveException;
 use pocketmine\player\PlayerInfo;
+use pocketmine\plugin\FolderPluginLoader;
 use pocketmine\plugin\PharPluginLoader;
 use pocketmine\plugin\PluginEnableOrder;
 use pocketmine\plugin\PluginGraylist;
@@ -1030,6 +1031,7 @@ class Server{
 			$this->pluginManager = new PluginManager($this, $this->configGroup->getPropertyBool(Yml::PLUGINS_LEGACY_DATA_DIR, true) ? null : Path::join($this->dataPath, "plugin_data"), $pluginGraylist);
 			$this->pluginManager->registerInterface(new PharPluginLoader($this->autoloader));
 			$this->pluginManager->registerInterface(new ScriptPluginLoader());
+			$this->pluginManager->registerInterface(new FolderPluginLoader($this->autoloader));
 
 			$providerManager = new WorldProviderManager();
 			if(
@@ -1918,12 +1920,15 @@ class Server{
 			$this->nextTick += self::TARGET_SECONDS_PER_TICK;
 		}
 	}
+
 	public function getPacketSerializerContext(TypeConverter $typeConverter) : PacketSerializerContext{
 		return $this->packetSerializerContexts[spl_object_id($typeConverter)] ??= new PacketSerializerContext($typeConverter->getItemTypeDictionary(), $typeConverter->getProtocolId());
 	}
+
 	public function getPacketBroadcaster(PacketSerializerContext $packetSerializerContext) : PacketBroadcaster{
 		return $this->packetBroadcasters[spl_object_id($packetSerializerContext)] ??= new StandardPacketBroadcaster($this, $packetSerializerContext);
 	}
+
 	public function getEntityEventBroadcaster(PacketBroadcaster $packetBroadcaster, TypeConverter $typeConverter) : EntityEventBroadcaster{
 		return $this->entityEventBroadcasters[spl_object_id($packetBroadcaster) . ':' . spl_object_id($typeConverter)] ??= new StandardEntityEventBroadcaster($packetBroadcaster, $typeConverter);
 	}
diff --git a/src/block/Anvil.php b/src/block/Anvil.php
index 6113157da..f3731ae7b 100644
--- a/src/block/Anvil.php
+++ b/src/block/Anvil.php
@@ -102,6 +102,10 @@ class Anvil extends Transparent implements Fallable{
 		return parent::place($tx, $item, $blockReplace, $blockClicked, $face, $clickVector, $player);
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function onHitGround(FallingBlock $blockEntity) : bool{
 		if(lcg_value() < 0.05 + (round($blockEntity->getFallDistance()) - 1) * 0.05){
 			if($this->damage !== self::VERY_DAMAGED){
@@ -128,7 +132,7 @@ class Anvil extends Transparent implements Fallable{
 	public function attemptDamage() : void{
 		$world = $this->position->world;
 		assert($world !== null);
-		if(!$world->getBlock($this->position)->isSameState(VanillaBlocks::ANVIL())){
+		if($world->getBlock($this->position)->getTypeId() !== BlockTypeIds::ANVIL){
 			return;
 		}
 		if(mt_rand(0, 100) > self::DAMAGE_CHANCE){
diff --git a/src/block/BaseBanner.php b/src/block/BaseBanner.php
index c2bbaf737..da4289214 100644
--- a/src/block/BaseBanner.php
+++ b/src/block/BaseBanner.php
@@ -34,7 +34,6 @@ use pocketmine\math\AxisAlignedBB;
 use pocketmine\math\Vector3;
 use pocketmine\player\Player;
 use pocketmine\world\BlockTransaction;
-use function array_filter;
 use function assert;
 use function count;
 
@@ -89,11 +88,12 @@ abstract class BaseBanner extends Transparent{
 	 * @return $this
 	 */
 	public function setPatterns(array $patterns) : self{
-		$checked = array_filter($patterns, fn($v) => $v instanceof BannerPatternLayer);
-		if(count($checked) !== count($patterns)){
-			throw new \TypeError("Deque must only contain " . BannerPatternLayer::class . " objects");
+		foreach($patterns as $pattern){
+			if(!$pattern instanceof BannerPatternLayer){
+				throw new \TypeError("Array must only contain " . BannerPatternLayer::class . " objects");
+			}
 		}
-		$this->patterns = $checked;
+		$this->patterns = $patterns;
 		return $this;
 	}
 
@@ -149,6 +149,10 @@ abstract class BaseBanner extends Transparent{
 		return $result;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function asItem() : Item{
 		return VanillaItems::BANNER()->setColor($this->color);
 	}
diff --git a/src/block/BaseBigDripleaf.php b/src/block/BaseBigDripleaf.php
index f0ff59cf0..f2d785346 100644
--- a/src/block/BaseBigDripleaf.php
+++ b/src/block/BaseBigDripleaf.php
@@ -133,4 +133,8 @@ abstract class BaseBigDripleaf extends Transparent{
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
 }
diff --git a/src/block/BaseCoral.php b/src/block/BaseCoral.php
index b9c595a97..4fa713b29 100644
--- a/src/block/BaseCoral.php
+++ b/src/block/BaseCoral.php
@@ -55,22 +55,15 @@ abstract class BaseCoral extends Transparent{
 	public function isSolid() : bool{ return false; }
 
 	protected function isCoveredWithWater() : bool{
-		$world = $this->position->getWorld();
-
-		$hasWater = false;
-		foreach($this->position->sides() as $vector3){
-			if($world->getBlock($vector3) instanceof Water){
-				$hasWater = true;
-				break;
-			}
-		}
-
-		//TODO: check water inside the block itself (not supported on the API yet)
-		return $hasWater;
+		return $this->isWaterlogged();
 	}
 
 	protected function recalculateCollisionBoxes() : array{ return []; }
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/BaseRail.php b/src/block/BaseRail.php
index 0bcb2f340..3f613b6fc 100644
--- a/src/block/BaseRail.php
+++ b/src/block/BaseRail.php
@@ -233,4 +233,8 @@ abstract class BaseRail extends Flowable{
 			}
 		}
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/BaseSign.php b/src/block/BaseSign.php
index 5a905f8b8..74bedde0c 100644
--- a/src/block/BaseSign.php
+++ b/src/block/BaseSign.php
@@ -268,6 +268,10 @@ abstract class BaseSign extends Transparent{
 		return false;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function asItem() : Item{
 		return ($this->asItemCallback)();
 	}
diff --git a/src/block/Beacon.php b/src/block/Beacon.php
index 5f2f42541..cd9484173 100644
--- a/src/block/Beacon.php
+++ b/src/block/Beacon.php
@@ -29,5 +29,9 @@ final class Beacon extends Transparent{
 		return 15;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	//TODO
 }
diff --git a/src/block/Bed.php b/src/block/Bed.php
index 8efbdfe01..380487029 100644
--- a/src/block/Bed.php
+++ b/src/block/Bed.php
@@ -205,6 +205,10 @@ class Bed extends Transparent{
 		return parent::getAffectedBlocks();
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	private function canBeSupportedAt(Block $block) : bool{
 		return $block->getAdjacentSupportType(Facing::DOWN) !== SupportType::NONE;
 	}
diff --git a/src/block/Bell.php b/src/block/Bell.php
index cff31ccf9..2c80de840 100644
--- a/src/block/Bell.php
+++ b/src/block/Bell.php
@@ -157,4 +157,8 @@ final class Bell extends Transparent{
 			BellAttachmentType::ONE_WALL, BellAttachmentType::TWO_WALLS => $faceHit === Facing::rotateY($this->facing, false) || $faceHit === Facing::rotateY($this->facing, true),
 		};
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Block.php b/src/block/Block.php
index b2847bb35..9172fc3c2 100644
--- a/src/block/Block.php
+++ b/src/block/Block.php
@@ -78,6 +78,8 @@ class Block{
 	/** @var AxisAlignedBB[]|null */
 	protected ?array $collisionBoxes = null;
 
+	protected int $layer = 0;
+
 	private int $requiredBlockItemStateDataBits;
 	private int $requiredBlockOnlyStateDataBits;
 
@@ -379,7 +381,11 @@ class Block{
 		if($chunk === null){
 			throw new AssumptionFailedError("World::setBlock() should have loaded the chunk before calling this method");
 		}
-		$chunk->setBlockStateId($this->position->x & Chunk::COORD_MASK, $this->position->y, $this->position->z & Chunk::COORD_MASK, $this->getStateId());
+		$chunk->setBlockStateId($this->position->x & Chunk::COORD_MASK, $this->position->y, $this->position->z & Chunk::COORD_MASK, $this->getStateId(), $this->layer);
+
+		if($this->layer !== 0){
+			return;
+		}
 
 		$tileType = $this->idInfo->getTileClass();
 		$oldTile = $world->getTile($this->position);
@@ -402,7 +408,7 @@ class Block{
 	}
 
 	/**
-	 * AKA: Block->isPlaceable
+	 * Returns whether this block can be placed when obtained as an item.
 	 */
 	public function canBePlaced() : bool{
 		return true;
@@ -438,6 +444,16 @@ class Block{
 	 * @return bool whether the placement should go ahead
 	 */
 	public function place(BlockTransaction $tx, Item $item, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector, ?Player $player = null) : bool{
+		if($this->getLayer() === 0){
+			if($this->getWaterloggingLevel() >= 1){
+				$water = $this->getBlockLayer(0);
+				if($water instanceof Water && $this->canWaterlogged($water)){
+					$tx->addBlock($blockReplace->position, (clone $water)->setLayer(1));
+				}
+			}elseif($this->getBlockLayer(0)->getTypeId() !== BlockTypeIds::AIR){
+				$tx->addBlock($blockReplace->position, VanillaBlocks::AIR()->setLayer(1));
+			}
+		}
 		$tx->addBlock($blockReplace->position, $this);
 		return true;
 	}
@@ -480,7 +496,14 @@ class Block{
 		if(($t = $world->getTile($this->position)) !== null){
 			$t->onBlockDestroyed();
 		}
-		$world->setBlock($this->position, VanillaBlocks::AIR());
+
+		$block = VanillaBlocks::AIR();
+		$layer1 = $this->getBlockLayer(1);
+		if($layer1->getTypeId() !== BlockTypeIds::AIR){
+			$world->setBlockLayer($this->position, $block, 1);
+			$block = $layer1;
+		}
+		$world->setBlockLayer($this->position, $block, $this->layer);
 		return true;
 	}
 
@@ -572,16 +595,28 @@ class Block{
 		return $this->getLightFilter() > 0;
 	}
 
+	/**
+	 * Returns whether this block allows any light to pass through it.
+	 */
 	public function isTransparent() : bool{
 		return false;
 	}
 
+	/**
+	 * @deprecated TL;DR: Don't use this function. Its results are confusing and inconsistent.
+	 *
+	 * No one is sure what the meaning of this property actually is. It's borrowed from Minecraft Java Edition, and is
+	 * used by various blocks for support checks.
+	 *
+	 * Things like signs and banners are considered "solid" despite having no collision box, and things like skulls and
+	 * flower pots are considered non-solid despite obviously being "solid" in the conventional, real-world sense.
+	 */
 	public function isSolid() : bool{
 		return true;
 	}
 
 	/**
-	 * AKA: Block->isFlowable
+	 * Returns whether this block can be destroyed by liquid flowing into its cell.
 	 */
 	public function canBeFlowedInto() : bool{
 		return false;
@@ -748,12 +783,23 @@ class Block{
 
 	}
 
+	public function getBlockLayer(int $layer) : Block{
+		return $this->position->getWorld()->getBlockLayer($this->position, $layer);
+	}
+
 	/**
 	 * Returns the Block on the side $side, works like Vector3::getSide()
 	 *
 	 * @return Block
 	 */
 	public function getSide(int $side, int $step = 1){
+		return $this->getSideLayer($side, 0, $step);
+	}
+
+	/**
+	 * @return Block
+	 */
+	public function getSideLayer(int $side, int $layer = 0, int $step = 1){
 		$position = $this->position;
 		if($position->isValid()){
 			[$dx, $dy, $dz] = Facing::OFFSET[$side] ?? [0, 0, 0];
@@ -970,4 +1016,46 @@ class Block{
 
 		return $currentHit;
 	}
+
+	/**
+	 * Returns layer index where this block was get/set
+	 */
+	public function getLayer() : int{
+		return $this->layer;
+	}
+
+	public function setLayer(int $layer) : static{
+		$this->layer = $layer;
+		return $this;
+	}
+
+	public function isLayerSupported(int $layer) : bool{
+		return $layer === 0;
+	}
+
+	/**
+	 * Returns the waterlogging behavior of this block.
+	 */
+	public function getWaterloggingLevel() : int{
+		return 0;
+	}
+
+	/**
+	 * Returns whether water can flow into this block.
+	 */
+	public function mayWaterloggingFlowInto() : bool{
+		return $this->getWaterloggingLevel() > 1;
+	}
+
+	public function canWaterlogged(Liquid $water) : bool{
+		return (!$water->isFalling() && $water->getDecay() === 0 && $this->getWaterloggingLevel() >= 1) ||
+			($water->getDecay() > 0 && $this->getWaterloggingLevel() >= 2);
+	}
+
+	/**
+	 * Returns whether the second layer of this block is water.
+	 */
+	public function isWaterlogged() : bool{
+		return $this->getBlockLayer(1) instanceof Water;
+	}
 }
diff --git a/src/block/BrewingStand.php b/src/block/BrewingStand.php
index 039693164..3959b3c83 100644
--- a/src/block/BrewingStand.php
+++ b/src/block/BrewingStand.php
@@ -128,4 +128,8 @@ class BrewingStand extends Transparent{
 			}
 		}
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Button.php b/src/block/Button.php
index 73bd1d556..51c438f0b 100644
--- a/src/block/Button.php
+++ b/src/block/Button.php
@@ -82,6 +82,10 @@ abstract class Button extends Flowable{
 		}
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function onNearbyBlockChange() : void{
 		if(!$this->canBeSupportedAt($this, $this->facing)){
 			$this->position->getWorld()->useBreakOn($this->position);
diff --git a/src/block/Cactus.php b/src/block/Cactus.php
index 6f2b04c8a..f7a0c7da9 100644
--- a/src/block/Cactus.php
+++ b/src/block/Cactus.php
@@ -102,4 +102,8 @@ class Cactus extends Transparent{
 			}
 		}
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Cake.php b/src/block/Cake.php
index 073fc62ac..9ae7f5af6 100644
--- a/src/block/Cake.php
+++ b/src/block/Cake.php
@@ -95,4 +95,8 @@ class Cake extends BaseCake{
 		}
 		return $clone;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Candle.php b/src/block/Candle.php
index 7f22641e1..c1f78c59f 100644
--- a/src/block/Candle.php
+++ b/src/block/Candle.php
@@ -122,4 +122,8 @@ class Candle extends Transparent{
 	public function getDropsForCompatibleTool(Item $item) : array{
 		return [$this->asItem()->setCount($this->count)];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Carpet.php b/src/block/Carpet.php
index 1ee7240c5..eb820e526 100644
--- a/src/block/Carpet.php
+++ b/src/block/Carpet.php
@@ -54,4 +54,8 @@ class Carpet extends Flowable{
 	public function getFlammability() : int{
 		return 20;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Cauldron.php b/src/block/Cauldron.php
index 772583a5a..34b1f40f7 100644
--- a/src/block/Cauldron.php
+++ b/src/block/Cauldron.php
@@ -101,4 +101,8 @@ final class Cauldron extends Transparent{
 			$world->addSound($this->position->add(0.5, 0.5, 0.5), $cauldron->getFillSound());
 		}
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Chain.php b/src/block/Chain.php
index e9cc2c9be..2cd735ee4 100644
--- a/src/block/Chain.php
+++ b/src/block/Chain.php
@@ -45,4 +45,8 @@ final class Chain extends Transparent{
 		}
 		return [$bb];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/ChemistryTable.php b/src/block/ChemistryTable.php
index 058e40288..aac073ec6 100644
--- a/src/block/ChemistryTable.php
+++ b/src/block/ChemistryTable.php
@@ -35,4 +35,8 @@ final class ChemistryTable extends Opaque{
 		//TODO
 		return false;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
 }
diff --git a/src/block/Chest.php b/src/block/Chest.php
index dca21576a..f15eaeb34 100644
--- a/src/block/Chest.php
+++ b/src/block/Chest.php
@@ -95,4 +95,8 @@ class Chest extends Transparent{
 	public function getFuelTime() : int{
 		return 300;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Cobweb.php b/src/block/Cobweb.php
index 8cd2de4d8..bd944d529 100644
--- a/src/block/Cobweb.php
+++ b/src/block/Cobweb.php
@@ -54,4 +54,8 @@ class Cobweb extends Flowable{
 	public function blocksDirectSkyLight() : bool{
 		return true;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/DaylightSensor.php b/src/block/DaylightSensor.php
index 4141a2b7e..43c75192c 100644
--- a/src/block/DaylightSensor.php
+++ b/src/block/DaylightSensor.php
@@ -101,5 +101,9 @@ class DaylightSensor extends Transparent{
 		return max(0, (int) round($lightLevel * cos(($sunAngle + ((($sunAngle < 0.5 ? 0 : 1) - $sunAngle) / 5)) * 2 * M_PI)));
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	//TODO
 }
diff --git a/src/block/DeadBush.php b/src/block/DeadBush.php
index 0c089a6f3..49b665a0f 100644
--- a/src/block/DeadBush.php
+++ b/src/block/DeadBush.php
@@ -50,6 +50,10 @@ class DeadBush extends Flowable{
 		return 100;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	private function canBeSupportedAt(Block $block) : bool{
 		$supportBlock = $block->getSide(Facing::DOWN);
 		return
diff --git a/src/block/Door.php b/src/block/Door.php
index 82ddaab51..6a72103ac 100644
--- a/src/block/Door.php
+++ b/src/block/Door.php
@@ -173,6 +173,10 @@ class Door extends Transparent{
 		return parent::getAffectedBlocks();
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	private function canBeSupportedAt(Block $block) : bool{
 		return $block->getAdjacentSupportType(Facing::DOWN)->hasEdgeSupport();
 	}
diff --git a/src/block/DragonEgg.php b/src/block/DragonEgg.php
index 10fec6394..e39aa7057 100644
--- a/src/block/DragonEgg.php
+++ b/src/block/DragonEgg.php
@@ -81,6 +81,10 @@ class DragonEgg extends Transparent implements Fallable{
 		}
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/Element.php b/src/block/Element.php
index 9c8a91621..dfc41d538 100644
--- a/src/block/Element.php
+++ b/src/block/Element.php
@@ -46,4 +46,8 @@ class Element extends Opaque{
 	public function getSymbol() : string{
 		return $this->symbol;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/EnchantingTable.php b/src/block/EnchantingTable.php
index 6a6c936b2..300860498 100644
--- a/src/block/EnchantingTable.php
+++ b/src/block/EnchantingTable.php
@@ -53,4 +53,8 @@ class EnchantingTable extends Transparent{
 
 		return true;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/EndPortalFrame.php b/src/block/EndPortalFrame.php
index 612cf3723..56e67a646 100644
--- a/src/block/EndPortalFrame.php
+++ b/src/block/EndPortalFrame.php
@@ -56,4 +56,8 @@ class EndPortalFrame extends Opaque{
 	protected function recalculateCollisionBoxes() : array{
 		return [AxisAlignedBB::one()->trim(Facing::UP, 3 / 16)];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/EndRod.php b/src/block/EndRod.php
index f0b28c26d..bb5edab5e 100644
--- a/src/block/EndRod.php
+++ b/src/block/EndRod.php
@@ -67,4 +67,8 @@ class EndRod extends Flowable{
 		}
 		return [$bb];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
 }
diff --git a/src/block/EnderChest.php b/src/block/EnderChest.php
index 9004f7c79..c3203b5ba 100644
--- a/src/block/EnderChest.php
+++ b/src/block/EnderChest.php
@@ -73,4 +73,8 @@ class EnderChest extends Transparent{
 	public function isAffectedBySilkTouch() : bool{
 		return true;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Fence.php b/src/block/Fence.php
index 30caaa4cf..c768c40d6 100644
--- a/src/block/Fence.php
+++ b/src/block/Fence.php
@@ -99,6 +99,10 @@ class Fence extends Transparent{
 		return $bbs;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return Facing::axis($facing) === Axis::Y ? SupportType::CENTER : SupportType::NONE;
 	}
diff --git a/src/block/FenceGate.php b/src/block/FenceGate.php
index 735456449..ce9ca4b2b 100644
--- a/src/block/FenceGate.php
+++ b/src/block/FenceGate.php
@@ -126,4 +126,8 @@ class FenceGate extends Transparent{
 	public function getFlammability() : int{
 		return $this->woodType->isFlammable() ? 20 : 0;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/FlowerPot.php b/src/block/FlowerPot.php
index fb3e78d82..dbdfd9419 100644
--- a/src/block/FlowerPot.php
+++ b/src/block/FlowerPot.php
@@ -140,4 +140,8 @@ class FlowerPot extends Flowable{
 	public function getPickedItem(bool $addUserData = false) : Item{
 		return $this->plant !== null ? $this->plant->asItem() : parent::getPickedItem($addUserData);
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Furnace.php b/src/block/Furnace.php
index fbff73c93..7a64e3cd3 100644
--- a/src/block/Furnace.php
+++ b/src/block/Furnace.php
@@ -25,6 +25,7 @@ namespace pocketmine\block;
 
 use pocketmine\block\tile\Furnace as TileFurnace;
 use pocketmine\block\utils\FacesOppositePlacingPlayerTrait;
+use pocketmine\block\utils\LightableTrait;
 use pocketmine\crafting\FurnaceType;
 use pocketmine\data\runtime\RuntimeDataDescriber;
 use pocketmine\item\Item;
@@ -34,11 +35,10 @@ use function mt_rand;
 
 class Furnace extends Opaque{
 	use FacesOppositePlacingPlayerTrait;
+	use LightableTrait;
 
 	protected FurnaceType $furnaceType;
 
-	protected bool $lit = false;
-
 	public function __construct(BlockIdentifier $idInfo, string $name, BlockTypeInfo $typeInfo, FurnaceType $furnaceType){
 		$this->furnaceType = $furnaceType;
 		parent::__construct($idInfo, $name, $typeInfo);
@@ -57,18 +57,6 @@ class Furnace extends Opaque{
 		return $this->lit ? 13 : 0;
 	}
 
-	public function isLit() : bool{
-		return $this->lit;
-	}
-
-	/**
-	 * @return $this
-	 */
-	public function setLit(bool $lit = true) : self{
-		$this->lit = $lit;
-		return $this;
-	}
-
 	public function onInteract(Item $item, int $face, Vector3 $clickVector, ?Player $player = null, array &$returnedItems = []) : bool{
 		if($player instanceof Player){
 			$furnace = $this->position->getWorld()->getTile($this->position);
diff --git a/src/block/GlowLichen.php b/src/block/GlowLichen.php
index de66ccad7..4088dad3b 100644
--- a/src/block/GlowLichen.php
+++ b/src/block/GlowLichen.php
@@ -274,4 +274,8 @@ class GlowLichen extends Transparent{
 		}
 		return $faces;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/HangingRoots.php b/src/block/HangingRoots.php
index 9c7bfd096..c1a2117be 100644
--- a/src/block/HangingRoots.php
+++ b/src/block/HangingRoots.php
@@ -41,4 +41,8 @@ final class HangingRoots extends Flowable{
 		}
 		return [];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Hopper.php b/src/block/Hopper.php
index 0d823674b..e7be2c11f 100644
--- a/src/block/Hopper.php
+++ b/src/block/Hopper.php
@@ -95,5 +95,9 @@ class Hopper extends Transparent{
 		//TODO
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	//TODO: redstone logic, sucking logic
 }
diff --git a/src/block/ItemFrame.php b/src/block/ItemFrame.php
index b5b6093c4..3da2fbf8a 100644
--- a/src/block/ItemFrame.php
+++ b/src/block/ItemFrame.php
@@ -195,4 +195,8 @@ class ItemFrame extends Flowable{
 	public function getPickedItem(bool $addUserData = false) : Item{
 		return $this->framedItem !== null ? clone $this->framedItem : parent::getPickedItem($addUserData);
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
 }
diff --git a/src/block/Ladder.php b/src/block/Ladder.php
index 58f133f6e..b564fd79e 100644
--- a/src/block/Ladder.php
+++ b/src/block/Ladder.php
@@ -84,6 +84,10 @@ class Ladder extends Transparent{
 		}
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	private function canBeSupportedAt(Block $block, int $face) : bool{
 		return $block->getAdjacentSupportType($face) === SupportType::FULL;
 	}
diff --git a/src/block/Lantern.php b/src/block/Lantern.php
index e9cbcc3fe..908721bff 100644
--- a/src/block/Lantern.php
+++ b/src/block/Lantern.php
@@ -93,6 +93,10 @@ class Lantern extends Transparent{
 		}
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	private function canBeSupportedAt(Block $block, int $face) : bool{
 		return $block->getAdjacentSupportType($face)->hasCenterSupport();
 	}
diff --git a/src/block/Leaves.php b/src/block/Leaves.php
index 7fe9eae74..94072975e 100644
--- a/src/block/Leaves.php
+++ b/src/block/Leaves.php
@@ -187,6 +187,10 @@ class Leaves extends Transparent{
 		return 60;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/Lectern.php b/src/block/Lectern.php
index 03880b3c5..a8c35e617 100644
--- a/src/block/Lectern.php
+++ b/src/block/Lectern.php
@@ -164,4 +164,8 @@ class Lectern extends Transparent{
 			$this->position->getWorld()->setBlock($this->position, $this);
 		}
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Lever.php b/src/block/Lever.php
index d2b98efc3..4eec42cd2 100644
--- a/src/block/Lever.php
+++ b/src/block/Lever.php
@@ -105,5 +105,9 @@ class Lever extends Flowable{
 		return $block->getAdjacentSupportType($face)->hasCenterSupport();
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
+
 	//TODO
 }
diff --git a/src/block/Light.php b/src/block/Light.php
index 29a3a8dfc..c87008646 100644
--- a/src/block/Light.php
+++ b/src/block/Light.php
@@ -65,4 +65,8 @@ final class Light extends Flowable{
 
 		return true;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/LightningRod.php b/src/block/LightningRod.php
index a0dd50542..989f2b0ec 100644
--- a/src/block/LightningRod.php
+++ b/src/block/LightningRod.php
@@ -52,4 +52,8 @@ final class LightningRod extends Transparent{
 		$this->facing = $face;
 		return parent::place($tx, $item, $blockReplace, $blockClicked, $face, $clickVector, $player);
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Liquid.php b/src/block/Liquid.php
index 6404cf908..3c522b56d 100644
--- a/src/block/Liquid.php
+++ b/src/block/Liquid.php
@@ -35,6 +35,7 @@ use pocketmine\math\Facing;
 use pocketmine\math\Vector3;
 use pocketmine\world\sound\FizzSound;
 use pocketmine\world\sound\Sound;
+use function in_array;
 use function lcg_value;
 
 abstract class Liquid extends Transparent{
@@ -145,7 +146,10 @@ abstract class Liquid extends Transparent{
 
 	protected function getEffectiveFlowDecay(Block $block) : int{
 		if(!($block instanceof Liquid) || !$block->hasSameTypeId($this)){
-			return -1;
+			$block = $block->getBlockLayer(1);
+			if(!($block instanceof Liquid) || !$block->hasSameTypeId($this)){
+				return -1;
+			}
 		}
 
 		return $block->falling ? 0 : $block->decay;
@@ -249,8 +253,17 @@ abstract class Liquid extends Transparent{
 	}
 
 	public function onNearbyBlockChange() : void{
+		$world = $this->position->getWorld();
+		if($this->layer > 0){
+			$layer1 = $world->getBlockLayer($this->position);
+			if($layer1 instanceof Air){
+				$world->setBlockLayer($this->position, $this, 0, false);
+				$world->setBlockLayer($this->position, VanillaBlocks::AIR(), 1);
+				return;
+			}
+		}
 		if(!$this->checkForHarden()){
-			$this->position->getWorld()->scheduleDelayedBlockUpdate($this->position, $this->tickRate());
+			$world->scheduleDelayedBlockUpdate($this->position, $this->tickRate(), $this->layer);
 		}
 	}
 
@@ -293,13 +306,13 @@ abstract class Liquid extends Transparent{
 
 			if($falling !== $this->falling || (!$falling && $newDecay !== $this->decay)){
 				if(!$falling && $newDecay < 0){
-					$world->setBlockAt($x, $y, $z, VanillaBlocks::AIR());
+					$world->setBlockAtLayer($x, $y, $z, VanillaBlocks::AIR(), $this->layer);
 					return;
 				}
 
 				$this->falling = $falling;
 				$this->decay = $falling ? 0 : $newDecay;
-				$world->setBlockAt($x, $y, $z, $this); //local block update will cause an update to be scheduled
+				$world->setBlockAtLayer($x, $y, $z, $this, $this->layer); //local block update will cause an update to be scheduled
 			}
 		}
 
@@ -307,6 +320,9 @@ abstract class Liquid extends Transparent{
 
 		$this->flowIntoBlock($bottomBlock, 0, true);
 
+		if(!($bottomBlock->getBlockLayer(1) instanceof Air)){
+			$bottomBlock = $bottomBlock->getBlockLayer(1);
+		}
 		if($this->isSource() || !$bottomBlock->canBeFlowedInto()){
 			if($this->falling){
 				$adjacentDecay = 1; //falling liquid behaves like source block
@@ -327,28 +343,47 @@ abstract class Liquid extends Transparent{
 	}
 
 	protected function flowIntoBlock(Block $block, int $newFlowDecay, bool $falling) : void{
-		if($this->canFlowInto($block) && !($block instanceof Liquid)){
+		if($this->canFlowInto($block) && !($block->getBlockLayer(0) instanceof Liquid) && !($block->getBlockLayer(1) instanceof Liquid)){
 			$new = clone $this;
 			$new->falling = $falling;
 			$new->decay = $falling ? 0 : $newFlowDecay;
+			if(!$block->canBeFlowedInto() && !$block->canWaterlogged($new)){
+				return;
+			}
 
 			$ev = new BlockSpreadEvent($block, $this, $new);
 			$ev->call();
 			if(!$ev->isCancelled()){
 				$world = $this->position->getWorld();
-				if($block->getTypeId() !== BlockTypeIds::AIR){
+				$waterlogging = $this->isLayerSupported(1) && $block->canWaterlogged($this);
+				if($block->getTypeId() !== BlockTypeIds::AIR && !$waterlogging){
 					$world->useBreakOn($block->position);
 				}
 
-				$world->setBlock($block->position, $ev->getNewState());
+				$world->setBlockLayer($block->position, $ev->getNewState(), $waterlogging ? 1 : 0);
 			}
 		}
 	}
 
 	/** @phpstan-impure */
 	private function getSmallestFlowDecay(Block $block, int $decay) : int{
+		$block = $block->getBlockLayer(0);
 		if(!($block instanceof Liquid) || !$block->hasSameTypeId($this)){
-			return $decay;
+			$block = $block->getBlockLayer(1);
+			if(!($block instanceof Liquid) || !$block->hasSameTypeId($this)){
+				return $decay;
+			}
+		}
+
+		if($block->layer === 1 && $block->position->y === $this->position->y){
+			$facing = [
+				0 => [-1 => Facing::NORTH, +1 => Facing::SOUTH],
+				-1 => [0 => Facing::WEST],
+				1 => [0 => Facing::EAST]
+			][$this->position->x - $block->position->x][$this->position->z - $block->position->z] ?? null;
+			if($facing !== null && $block->getBlockLayer(0)->getSupportType($facing) === SupportType::FULL){
+				return $decay;
+			}
 		}
 
 		$blockDecay = $block->decay;
@@ -374,9 +409,16 @@ abstract class Liquid extends Transparent{
 	}
 
 	protected function canFlowInto(Block $block) : bool{
-		return
-			$this->position->getWorld()->isInWorld($block->position->x, $block->position->y, $block->position->z) &&
-			$block->canBeFlowedInto() &&
+		if(!$this->position->getWorld()->isInWorld($block->position->x, $block->position->y, $block->position->z)){
+			return false;
+		}
+
+		$waterlogging = false;
+		if($this->isLayerSupported(1) && $block->canWaterlogged($this)){
+			$layer2 = $block->getBlockLayer(1);
+			$waterlogging = !($layer2 instanceof Liquid && $layer2->isSource());
+		}
+		return ($block->canBeFlowedInto() || $waterlogging) &&
 			!($block instanceof Liquid && $block->isSource()); //TODO: I think this should only be liquids of the same type
 	}
 }
diff --git a/src/block/MangroveRoots.php b/src/block/MangroveRoots.php
index c9bc49a3b..a70bb6616 100644
--- a/src/block/MangroveRoots.php
+++ b/src/block/MangroveRoots.php
@@ -28,4 +28,8 @@ final class MangroveRoots extends Transparent{
 	public function getFlammability() : int{ return 5; }
 
 	public function getFlameEncouragement() : int{ return 5; }
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/MobHead.php b/src/block/MobHead.php
index f4e945841..d412106ca 100644
--- a/src/block/MobHead.php
+++ b/src/block/MobHead.php
@@ -130,4 +130,8 @@ class MobHead extends Flowable{
 		}
 		return parent::place($tx, $item, $blockReplace, $blockClicked, $face, $clickVector, $player);
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/MonsterSpawner.php b/src/block/MonsterSpawner.php
index 5cbe80e0a..c2488bfa8 100644
--- a/src/block/MonsterSpawner.php
+++ b/src/block/MonsterSpawner.php
@@ -41,6 +41,10 @@ class MonsterSpawner extends Transparent{
 		//TODO
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/PressurePlate.php b/src/block/PressurePlate.php
index 1dd4b50d9..1f887c09c 100644
--- a/src/block/PressurePlate.php
+++ b/src/block/PressurePlate.php
@@ -57,6 +57,10 @@ abstract class PressurePlate extends Transparent{
 		return [];
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/RedstoneComparator.php b/src/block/RedstoneComparator.php
index ee63a77a9..697aacb26 100644
--- a/src/block/RedstoneComparator.php
+++ b/src/block/RedstoneComparator.php
@@ -99,6 +99,10 @@ class RedstoneComparator extends Flowable{
 		return true;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
+
 	private function canBeSupportedAt(Block $block) : bool{
 		return $block->getAdjacentSupportType(Facing::DOWN) !== SupportType::NONE;
 	}
diff --git a/src/block/RedstoneOre.php b/src/block/RedstoneOre.php
index 9e537bd27..10e701a6f 100644
--- a/src/block/RedstoneOre.php
+++ b/src/block/RedstoneOre.php
@@ -24,7 +24,7 @@ declare(strict_types=1);
 namespace pocketmine\block;
 
 use pocketmine\block\utils\FortuneDropHelper;
-use pocketmine\data\runtime\RuntimeDataDescriber;
+use pocketmine\block\utils\LightableTrait;
 use pocketmine\item\Item;
 use pocketmine\item\VanillaItems;
 use pocketmine\math\Vector3;
@@ -32,23 +32,7 @@ use pocketmine\player\Player;
 use function mt_rand;
 
 class RedstoneOre extends Opaque{
-	protected bool $lit = false;
-
-	protected function describeBlockOnlyState(RuntimeDataDescriber $w) : void{
-		$w->bool($this->lit);
-	}
-
-	public function isLit() : bool{
-		return $this->lit;
-	}
-
-	/**
-	 * @return $this
-	 */
-	public function setLit(bool $lit = true) : self{
-		$this->lit = $lit;
-		return $this;
-	}
+	use LightableTrait;
 
 	public function getLightLevel() : int{
 		return $this->lit ? 9 : 0;
diff --git a/src/block/RedstoneRepeater.php b/src/block/RedstoneRepeater.php
index 7e6e73da8..b72d2078b 100644
--- a/src/block/RedstoneRepeater.php
+++ b/src/block/RedstoneRepeater.php
@@ -85,6 +85,10 @@ class RedstoneRepeater extends Flowable{
 		return true;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
+
 	private function canBeSupportedAt(Block $block) : bool{
 		return $block->getAdjacentSupportType(Facing::DOWN) !== SupportType::NONE;
 	}
diff --git a/src/block/RedstoneTorch.php b/src/block/RedstoneTorch.php
index b30c011d4..26c86038b 100644
--- a/src/block/RedstoneTorch.php
+++ b/src/block/RedstoneTorch.php
@@ -23,28 +23,22 @@ declare(strict_types=1);
 
 namespace pocketmine\block;
 
+use pocketmine\block\utils\LightableTrait;
 use pocketmine\data\runtime\RuntimeDataDescriber;
 
 class RedstoneTorch extends Torch{
-	protected bool $lit = true;
+	use LightableTrait;
+
+	public function __construct(BlockIdentifier $idInfo, string $name, BlockTypeInfo $typeInfo){
+		$this->lit = true;
+		parent::__construct($idInfo, $name, $typeInfo);
+	}
 
 	protected function describeBlockOnlyState(RuntimeDataDescriber $w) : void{
 		parent::describeBlockOnlyState($w);
 		$w->bool($this->lit);
 	}
 
-	public function isLit() : bool{
-		return $this->lit;
-	}
-
-	/**
-	 * @return $this
-	 */
-	public function setLit(bool $lit = true) : self{
-		$this->lit = $lit;
-		return $this;
-	}
-
 	public function getLightLevel() : int{
 		return $this->lit ? 7 : 0;
 	}
diff --git a/src/block/SeaPickle.php b/src/block/SeaPickle.php
index 627af9bac..b1bb10af0 100644
--- a/src/block/SeaPickle.php
+++ b/src/block/SeaPickle.php
@@ -87,7 +87,7 @@ class SeaPickle extends Transparent{
 	}
 
 	public function place(BlockTransaction $tx, Item $item, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector, ?Player $player = null) : bool{
-		$this->underwater = false; //TODO: implement this once we have new water logic in place
+		$this->underwater = $blockReplace->isWaterlogged() || ($blockReplace instanceof Water && $blockReplace->getDecay() === 0);
 		if($blockReplace instanceof SeaPickle && $blockReplace->count < self::MAX_COUNT){
 			$this->count = $blockReplace->count + 1;
 		}
@@ -103,4 +103,8 @@ class SeaPickle extends Transparent{
 	public function getDropsForCompatibleTool(Item $item) : array{
 		return [$this->asItem()->setCount($this->count)];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/ShulkerBox.php b/src/block/ShulkerBox.php
index d557401ee..21e614c0e 100644
--- a/src/block/ShulkerBox.php
+++ b/src/block/ShulkerBox.php
@@ -112,6 +112,10 @@ class ShulkerBox extends Opaque{
 		return true;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/Slab.php b/src/block/Slab.php
index 6000bec39..85ebdab9e 100644
--- a/src/block/Slab.php
+++ b/src/block/Slab.php
@@ -115,4 +115,8 @@ class Slab extends Transparent{
 	public function getDropsForCompatibleTool(Item $item) : array{
 		return [$this->asItem()->setCount($this->slabType === SlabType::DOUBLE ? 2 : 1)];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/SmallDripleaf.php b/src/block/SmallDripleaf.php
index d192e43db..ce1efa4d3 100644
--- a/src/block/SmallDripleaf.php
+++ b/src/block/SmallDripleaf.php
@@ -58,9 +58,8 @@ class SmallDripleaf extends Transparent{
 
 	private function canBeSupportedBy(Block $block) : bool{
 		//TODO: Moss
-		//TODO: Small Dripleaf also can be placed on dirt, coarse dirt, farmland, grass blocks,
-		// podzol, rooted dirt, mycelium, and mud if these blocks are underwater (needs waterlogging)
-		return $block->getTypeId() === BlockTypeIds::CLAY;
+		return $block->getTypeId() === BlockTypeIds::CLAY ||
+			($block->getSide(Facing::UP) instanceof Water && $block->hasTypeTag(BlockTypeTags::DIRT) && $block->hasTypeTag(BlockTypeTags::MUD));
 	}
 
 	public function onNearbyBlockChange() : void{
@@ -167,4 +166,8 @@ class SmallDripleaf extends Transparent{
 	protected function recalculateCollisionBoxes() : array{
 		return [];
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
 }
diff --git a/src/block/Stair.php b/src/block/Stair.php
index d66a9ce5c..7a3c62815 100644
--- a/src/block/Stair.php
+++ b/src/block/Stair.php
@@ -134,4 +134,8 @@ class Stair extends Transparent{
 
 		return parent::place($tx, $item, $blockReplace, $blockClicked, $face, $clickVector, $player);
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Stonecutter.php b/src/block/Stonecutter.php
index 30c19d25d..4b1421285 100644
--- a/src/block/Stonecutter.php
+++ b/src/block/Stonecutter.php
@@ -49,4 +49,8 @@ class Stonecutter extends Transparent{
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Thin.php b/src/block/Thin.php
index dde2d7d84..f95d88a0f 100644
--- a/src/block/Thin.php
+++ b/src/block/Thin.php
@@ -91,6 +91,10 @@ class Thin extends Transparent{
 		return $bbs;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return SupportType::NONE;
 	}
diff --git a/src/block/Trapdoor.php b/src/block/Trapdoor.php
index 20b6af2ab..f10f94f63 100644
--- a/src/block/Trapdoor.php
+++ b/src/block/Trapdoor.php
@@ -91,4 +91,8 @@ class Trapdoor extends Transparent{
 		$world->addSound($this->position, new DoorSound());
 		return true;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Tripwire.php b/src/block/Tripwire.php
index 2ddad2784..8f13cdff8 100644
--- a/src/block/Tripwire.php
+++ b/src/block/Tripwire.php
@@ -72,6 +72,10 @@ class Tripwire extends Flowable{
 		return $this;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
+
 	public function asItem() : Item{
 		return VanillaItems::STRING();
 	}
diff --git a/src/block/TripwireHook.php b/src/block/TripwireHook.php
index 325819825..810904927 100644
--- a/src/block/TripwireHook.php
+++ b/src/block/TripwireHook.php
@@ -69,5 +69,9 @@ class TripwireHook extends Flowable{
 		return false;
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 2;
+	}
+
 	//TODO
 }
diff --git a/src/block/UnderwaterTorch.php b/src/block/UnderwaterTorch.php
index 5429f8526..aecd1d6cc 100644
--- a/src/block/UnderwaterTorch.php
+++ b/src/block/UnderwaterTorch.php
@@ -28,4 +28,8 @@ class UnderwaterTorch extends Torch{
 	public function canBeFlowedInto() : bool{
 		return false;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/VanillaBlocks.php b/src/block/VanillaBlocks.php
index 9c0e7d3b7..4d6e7d6ca 100644
--- a/src/block/VanillaBlocks.php
+++ b/src/block/VanillaBlocks.php
@@ -758,8 +758,8 @@ use function strtolower;
  * @method static Water WATER()
  * @method static WaterCauldron WATER_CAULDRON()
  * @method static NetherVines WEEPING_VINES()
- * @method static WeightedPressurePlateHeavy WEIGHTED_PRESSURE_PLATE_HEAVY()
- * @method static WeightedPressurePlateLight WEIGHTED_PRESSURE_PLATE_LIGHT()
+ * @method static WeightedPressurePlate WEIGHTED_PRESSURE_PLATE_HEAVY()
+ * @method static WeightedPressurePlate WEIGHTED_PRESSURE_PLATE_LIGHT()
  * @method static Wheat WHEAT()
  * @method static Flower WHITE_TULIP()
  * @method static WitherRose WITHER_ROSE()
@@ -1129,14 +1129,14 @@ final class VanillaBlocks{
 		self::register("lily_pad", new WaterLily(new BID(Ids::LILY_PAD), "Lily Pad", new Info(BreakInfo::instant())));
 
 		$weightedPressurePlateBreakInfo = new Info(BreakInfo::pickaxe(0.5, ToolTier::WOOD));
-		self::register("weighted_pressure_plate_heavy", new WeightedPressurePlateHeavy(
+		self::register("weighted_pressure_plate_heavy", new WeightedPressurePlate(
 			new BID(Ids::WEIGHTED_PRESSURE_PLATE_HEAVY),
 			"Weighted Pressure Plate Heavy",
 			$weightedPressurePlateBreakInfo,
 			deactivationDelayTicks: 10,
 			signalStrengthFactor: 0.1
 		));
-		self::register("weighted_pressure_plate_light", new WeightedPressurePlateLight(
+		self::register("weighted_pressure_plate_light", new WeightedPressurePlate(
 			new BID(Ids::WEIGHTED_PRESSURE_PLATE_LIGHT),
 			"Weighted Pressure Plate Light",
 			$weightedPressurePlateBreakInfo,
diff --git a/src/block/Vine.php b/src/block/Vine.php
index cc516bbca..5f02a18c8 100644
--- a/src/block/Vine.php
+++ b/src/block/Vine.php
@@ -159,4 +159,8 @@ class Vine extends Flowable{
 	public function getFlammability() : int{
 		return 100;
 	}
+
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
 }
diff --git a/src/block/Wall.php b/src/block/Wall.php
index 520ced8eb..ae2204d7f 100644
--- a/src/block/Wall.php
+++ b/src/block/Wall.php
@@ -151,6 +151,10 @@ class Wall extends Transparent{
 		];
 	}
 
+	public function getWaterloggingLevel() : int{
+		return 1;
+	}
+
 	public function getSupportType(int $facing) : SupportType{
 		return Facing::axis($facing) === Axis::Y ? SupportType::CENTER : SupportType::NONE;
 	}
diff --git a/src/block/Water.php b/src/block/Water.php
index b711ab5a1..25e07c652 100644
--- a/src/block/Water.php
+++ b/src/block/Water.php
@@ -27,6 +27,7 @@ use pocketmine\entity\Entity;
 use pocketmine\world\sound\BucketEmptyWaterSound;
 use pocketmine\world\sound\BucketFillWaterSound;
 use pocketmine\world\sound\Sound;
+use function array_merge;
 
 class Water extends Liquid{
 
@@ -57,4 +58,8 @@ class Water extends Liquid{
 		}
 		return true;
 	}
+
+	public function isLayerSupported(int $layer) : bool{
+		return parent::isLayerSupported($layer) || $layer === 1;
+	}
 }
diff --git a/src/block/WeightedPressurePlateHeavy.php b/src/block/WeightedPressurePlateHeavy.php
deleted file mode 100644
index 9a8d1c31b..000000000
--- a/src/block/WeightedPressurePlateHeavy.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\block;
-
-/**
- * @deprecated
- */
-class WeightedPressurePlateHeavy extends WeightedPressurePlate{
-
-}
diff --git a/src/block/WeightedPressurePlateLight.php b/src/block/WeightedPressurePlateLight.php
deleted file mode 100644
index 85c13d438..000000000
--- a/src/block/WeightedPressurePlateLight.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\block;
-
-/**
- * @deprecated
- */
-class WeightedPressurePlateLight extends WeightedPressurePlate{
-
-}
diff --git a/src/block/utils/BannerPatternType.php b/src/block/utils/BannerPatternType.php
index 083fada1b..5131af754 100644
--- a/src/block/utils/BannerPatternType.php
+++ b/src/block/utils/BannerPatternType.php
@@ -23,54 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static BannerPatternType BORDER()
- * @method static BannerPatternType BRICKS()
- * @method static BannerPatternType CIRCLE()
- * @method static BannerPatternType CREEPER()
- * @method static BannerPatternType CROSS()
- * @method static BannerPatternType CURLY_BORDER()
- * @method static BannerPatternType DIAGONAL_LEFT()
- * @method static BannerPatternType DIAGONAL_RIGHT()
- * @method static BannerPatternType DIAGONAL_UP_LEFT()
- * @method static BannerPatternType DIAGONAL_UP_RIGHT()
- * @method static BannerPatternType FLOWER()
- * @method static BannerPatternType GRADIENT()
- * @method static BannerPatternType GRADIENT_UP()
- * @method static BannerPatternType HALF_HORIZONTAL()
- * @method static BannerPatternType HALF_HORIZONTAL_BOTTOM()
- * @method static BannerPatternType HALF_VERTICAL()
- * @method static BannerPatternType HALF_VERTICAL_RIGHT()
- * @method static BannerPatternType MOJANG()
- * @method static BannerPatternType RHOMBUS()
- * @method static BannerPatternType SKULL()
- * @method static BannerPatternType SMALL_STRIPES()
- * @method static BannerPatternType SQUARE_BOTTOM_LEFT()
- * @method static BannerPatternType SQUARE_BOTTOM_RIGHT()
- * @method static BannerPatternType SQUARE_TOP_LEFT()
- * @method static BannerPatternType SQUARE_TOP_RIGHT()
- * @method static BannerPatternType STRAIGHT_CROSS()
- * @method static BannerPatternType STRIPE_BOTTOM()
- * @method static BannerPatternType STRIPE_CENTER()
- * @method static BannerPatternType STRIPE_DOWNLEFT()
- * @method static BannerPatternType STRIPE_DOWNRIGHT()
- * @method static BannerPatternType STRIPE_LEFT()
- * @method static BannerPatternType STRIPE_MIDDLE()
- * @method static BannerPatternType STRIPE_RIGHT()
- * @method static BannerPatternType STRIPE_TOP()
- * @method static BannerPatternType TRIANGLES_BOTTOM()
- * @method static BannerPatternType TRIANGLES_TOP()
- * @method static BannerPatternType TRIANGLE_BOTTOM()
- * @method static BannerPatternType TRIANGLE_TOP()
- */
 enum BannerPatternType{
-	use LegacyEnumShimTrait;
-
 	case BORDER;
 	case BRICKS;
 	case CIRCLE;
diff --git a/src/block/utils/BellAttachmentType.php b/src/block/utils/BellAttachmentType.php
index 29b88a2c4..38057cf39 100644
--- a/src/block/utils/BellAttachmentType.php
+++ b/src/block/utils/BellAttachmentType.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static BellAttachmentType CEILING()
- * @method static BellAttachmentType FLOOR()
- * @method static BellAttachmentType ONE_WALL()
- * @method static BellAttachmentType TWO_WALLS()
- */
 enum BellAttachmentType{
-	use LegacyEnumShimTrait;
-
 	case CEILING;
 	case FLOOR;
 	case ONE_WALL;
diff --git a/src/block/utils/BrewingStandSlot.php b/src/block/utils/BrewingStandSlot.php
index 21500b1c9..c7d74d8da 100644
--- a/src/block/utils/BrewingStandSlot.php
+++ b/src/block/utils/BrewingStandSlot.php
@@ -24,19 +24,8 @@ declare(strict_types=1);
 namespace pocketmine\block\utils;
 
 use pocketmine\block\inventory\BrewingStandInventory;
-use pocketmine\utils\LegacyEnumShimTrait;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static BrewingStandSlot EAST()
- * @method static BrewingStandSlot NORTHWEST()
- * @method static BrewingStandSlot SOUTHWEST()
- */
 enum BrewingStandSlot{
-	use LegacyEnumShimTrait;
-
 	case EAST;
 	case NORTHWEST;
 	case SOUTHWEST;
diff --git a/src/block/utils/CandleTrait.php b/src/block/utils/CandleTrait.php
index 58a7443a3..c9da97ee0 100644
--- a/src/block/utils/CandleTrait.php
+++ b/src/block/utils/CandleTrait.php
@@ -24,7 +24,6 @@ declare(strict_types=1);
 namespace pocketmine\block\utils;
 
 use pocketmine\block\Block;
-use pocketmine\data\runtime\RuntimeDataDescriber;
 use pocketmine\entity\projectile\Projectile;
 use pocketmine\item\Durable;
 use pocketmine\item\enchantment\VanillaEnchantments;
@@ -38,24 +37,12 @@ use pocketmine\world\sound\FireExtinguishSound;
 use pocketmine\world\sound\FlintSteelSound;
 
 trait CandleTrait{
-	private bool $lit = false;
-
-	protected function describeBlockOnlyState(RuntimeDataDescriber $w) : void{
-		$w->bool($this->lit);
-	}
+	use LightableTrait;
 
 	public function getLightLevel() : int{
 		return $this->lit ? 3 : 0;
 	}
 
-	public function isLit() : bool{ return $this->lit; }
-
-	/** @return $this */
-	public function setLit(bool $lit) : self{
-		$this->lit = $lit;
-		return $this;
-	}
-
 	/** @see Block::onInteract() */
 	public function onInteract(Item $item, int $face, Vector3 $clickVector, ?Player $player = null, array &$returnedItems = []) : bool{
 		if($item->getTypeId() === ItemTypeIds::FIRE_CHARGE || $item->getTypeId() === ItemTypeIds::FLINT_AND_STEEL || $item->hasEnchantment(VanillaEnchantments::FIRE_ASPECT())){
diff --git a/src/block/utils/CopperOxidation.php b/src/block/utils/CopperOxidation.php
index ba9abeaed..51e803e96 100644
--- a/src/block/utils/CopperOxidation.php
+++ b/src/block/utils/CopperOxidation.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static CopperOxidation EXPOSED()
- * @method static CopperOxidation NONE()
- * @method static CopperOxidation OXIDIZED()
- * @method static CopperOxidation WEATHERED()
- */
 enum CopperOxidation : int{
-	use LegacyEnumShimTrait;
-
 	case NONE = 0;
 	case EXPOSED = 1;
 	case WEATHERED = 2;
diff --git a/src/block/utils/CoralType.php b/src/block/utils/CoralType.php
index cba3e8dde..be262fcfb 100644
--- a/src/block/utils/CoralType.php
+++ b/src/block/utils/CoralType.php
@@ -23,21 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static CoralType BRAIN()
- * @method static CoralType BUBBLE()
- * @method static CoralType FIRE()
- * @method static CoralType HORN()
- * @method static CoralType TUBE()
- */
 enum CoralType{
-	use LegacyEnumShimTrait;
-
 	case TUBE;
 	case BRAIN;
 	case BUBBLE;
diff --git a/src/block/utils/DirtType.php b/src/block/utils/DirtType.php
index 9bed30d1c..3c1fc8423 100644
--- a/src/block/utils/DirtType.php
+++ b/src/block/utils/DirtType.php
@@ -23,19 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static DirtType COARSE()
- * @method static DirtType NORMAL()
- * @method static DirtType ROOTED()
- */
 enum DirtType{
-	use LegacyEnumShimTrait;
-
 	case NORMAL;
 	case COARSE;
 	case ROOTED;
diff --git a/src/block/utils/DripleafState.php b/src/block/utils/DripleafState.php
index 4b0cedce7..c6d86b633 100644
--- a/src/block/utils/DripleafState.php
+++ b/src/block/utils/DripleafState.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static DripleafState FULL_TILT()
- * @method static DripleafState PARTIAL_TILT()
- * @method static DripleafState STABLE()
- * @method static DripleafState UNSTABLE()
- */
 enum DripleafState{
-	use LegacyEnumShimTrait;
-
 	case STABLE;
 	case UNSTABLE;
 	case PARTIAL_TILT;
diff --git a/src/block/utils/DyeColor.php b/src/block/utils/DyeColor.php
index 5b205eda5..c01aa9ac3 100644
--- a/src/block/utils/DyeColor.php
+++ b/src/block/utils/DyeColor.php
@@ -24,35 +24,12 @@ declare(strict_types=1);
 namespace pocketmine\block\utils;
 
 use pocketmine\color\Color;
-use pocketmine\utils\LegacyEnumShimTrait;
 use function spl_object_id;
 
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static DyeColor BLACK()
- * @method static DyeColor BLUE()
- * @method static DyeColor BROWN()
- * @method static DyeColor CYAN()
- * @method static DyeColor GRAY()
- * @method static DyeColor GREEN()
- * @method static DyeColor LIGHT_BLUE()
- * @method static DyeColor LIGHT_GRAY()
- * @method static DyeColor LIME()
- * @method static DyeColor MAGENTA()
- * @method static DyeColor ORANGE()
- * @method static DyeColor PINK()
- * @method static DyeColor PURPLE()
- * @method static DyeColor RED()
- * @method static DyeColor WHITE()
- * @method static DyeColor YELLOW()
- *
  * @phpstan-type TMetadata array{0: string, 1: Color}
  */
 enum DyeColor{
-	use LegacyEnumShimTrait;
-
 	case WHITE;
 	case ORANGE;
 	case MAGENTA;
diff --git a/src/block/utils/FroglightType.php b/src/block/utils/FroglightType.php
index ab20d31ac..73b293d4b 100644
--- a/src/block/utils/FroglightType.php
+++ b/src/block/utils/FroglightType.php
@@ -23,19 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static FroglightType OCHRE()
- * @method static FroglightType PEARLESCENT()
- * @method static FroglightType VERDANT()
- */
 enum FroglightType{
-	use LegacyEnumShimTrait;
-
 	case OCHRE;
 	case PEARLESCENT;
 	case VERDANT;
diff --git a/src/block/utils/LeavesType.php b/src/block/utils/LeavesType.php
index 975551ad6..f67dc8515 100644
--- a/src/block/utils/LeavesType.php
+++ b/src/block/utils/LeavesType.php
@@ -23,26 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static LeavesType ACACIA()
- * @method static LeavesType AZALEA()
- * @method static LeavesType BIRCH()
- * @method static LeavesType CHERRY()
- * @method static LeavesType DARK_OAK()
- * @method static LeavesType FLOWERING_AZALEA()
- * @method static LeavesType JUNGLE()
- * @method static LeavesType MANGROVE()
- * @method static LeavesType OAK()
- * @method static LeavesType SPRUCE()
- */
 enum LeavesType{
-	use LegacyEnumShimTrait;
-
 	case OAK;
 	case SPRUCE;
 	case BIRCH;
diff --git a/src/block/utils/LeverFacing.php b/src/block/utils/LeverFacing.php
index 1af92d6c4..6edb29376 100644
--- a/src/block/utils/LeverFacing.php
+++ b/src/block/utils/LeverFacing.php
@@ -24,24 +24,8 @@ declare(strict_types=1);
 namespace pocketmine\block\utils;
 
 use pocketmine\math\Facing;
-use pocketmine\utils\LegacyEnumShimTrait;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static LeverFacing DOWN_AXIS_X()
- * @method static LeverFacing DOWN_AXIS_Z()
- * @method static LeverFacing EAST()
- * @method static LeverFacing NORTH()
- * @method static LeverFacing SOUTH()
- * @method static LeverFacing UP_AXIS_X()
- * @method static LeverFacing UP_AXIS_Z()
- * @method static LeverFacing WEST()
- */
 enum LeverFacing{
-	use LegacyEnumShimTrait;
-
 	case UP_AXIS_X;
 	case UP_AXIS_Z;
 	case DOWN_AXIS_X;
diff --git a/tests/phpunit/utils/EnumTraitTest.php b/src/block/utils/LightableTrait.php
similarity index 65%
rename from tests/phpunit/utils/EnumTraitTest.php
rename to src/block/utils/LightableTrait.php
index 4108847e9..51ce54f42 100644
--- a/tests/phpunit/utils/EnumTraitTest.php
+++ b/src/block/utils/LightableTrait.php
@@ -21,18 +21,26 @@
 
 declare(strict_types=1);
 
-namespace pocketmine\utils;
+namespace pocketmine\block\utils;
 
-use PHPUnit\Framework\TestCase;
+use pocketmine\data\runtime\RuntimeDataDescriber;
 
-class EnumTraitTest extends TestCase{
+trait LightableTrait{
+	protected bool $lit = false;
+
+	protected function describeBlockOnlyState(RuntimeDataDescriber $w) : void{
+		$w->bool($this->lit);
+	}
+
+	public function isLit() : bool{
+		return $this->lit;
+	}
 
 	/**
-	 * @doesNotPerformAssertions
+	 * @return $this
 	 */
-	public function testEnumLazyInit() : void{
-		foreach([TestEnum::ONE(), TestEnum::TWO(), TestEnum::THREE()] as $member){
-			//NOOP
-		}
+	public function setLit(bool $lit = true) : self{
+		$this->lit = $lit;
+		return $this;
 	}
 }
diff --git a/src/block/utils/MinimumCostFlowCalculator.php b/src/block/utils/MinimumCostFlowCalculator.php
index a690a7487..653ce2a7c 100644
--- a/src/block/utils/MinimumCostFlowCalculator.php
+++ b/src/block/utils/MinimumCostFlowCalculator.php
@@ -64,12 +64,12 @@ final class MinimumCostFlowCalculator{
 			$z = $blockZ + $dz;
 
 			if(!isset($this->flowCostVisited[$hash = World::blockHash($x, $y, $z)])){
-				if(!$this->world->isInWorld($x, $y, $z) || !$this->canFlowInto($this->world->getBlockAt($x, $y, $z))){
+				if(!$this->world->isInWorld($x, $y, $z) || !$this->canFlowInto($block = $this->world->getBlockAt($x, $y, $z))){
 					$this->flowCostVisited[$hash] = self::BLOCKED;
-				}elseif($this->world->getBlockAt($x, $y - 1, $z)->canBeFlowedInto()){
+				}elseif(($down = $this->world->getBlockAt($x, $y - 1, $z))->canBeFlowedInto() || $down->mayWaterloggingFlowInto()){
 					$this->flowCostVisited[$hash] = self::CAN_FLOW_DOWN;
 				}else{
-					$this->flowCostVisited[$hash] = self::CAN_FLOW;
+					$this->flowCostVisited[$hash] = $block->getWaterloggingLevel() < 2 ? self::BLOCKED : self::CAN_FLOW;
 				}
 			}
 
@@ -107,21 +107,33 @@ final class MinimumCostFlowCalculator{
 			$y = $originY + $dy;
 			$z = $originZ + $dz;
 
-			if(!$this->world->isInWorld($x, $y, $z) || !$this->canFlowInto($this->world->getBlockAt($x, $y, $z))){
+			if(!$this->world->isInWorld($x, $y, $z) || !$this->canFlowInto($block = $this->world->getBlockAt($x, $y, $z))){
 				$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::BLOCKED;
-			}elseif($this->world->getBlockAt($x, $y - 1, $z)->canBeFlowedInto()){
+			}elseif($this->world->getBlockAt($originX, $originY, $originZ)->getSupportType($j) === SupportType::FULL){
+				$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::BLOCKED;
+				unset($flowCost[$j]);
+			}elseif(($down = $this->world->getBlockAt($x, $y - 1, $z))->canBeFlowedInto() || $down->mayWaterloggingFlowInto()){
 				$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::CAN_FLOW_DOWN;
 				$flowCost[$j] = $maxCost = 0;
 			}elseif($maxCost > 0){
-				$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::CAN_FLOW;
-				$opposite = Facing::opposite($j);
-				$flowCost[$j] = $this->calculateFlowCost($x, $y, $z, 1, $maxCost, $opposite, $opposite);
-				$maxCost = min($maxCost, $flowCost[$j]);
+				if($block->getWaterloggingLevel() < 2){
+					$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::BLOCKED;
+				}else{
+					$this->flowCostVisited[World::blockHash($x, $y, $z)] = self::CAN_FLOW;
+					$opposite = Facing::opposite($j);
+					$flowCost[$j] = $this->calculateFlowCost($x, $y, $z, 1, $maxCost, $opposite, $opposite);
+					/** @phpstan-ignore-next-line */
+					$maxCost = min($maxCost, $flowCost[$j]);
+				}
 			}
 		}
 
 		$this->flowCostVisited = [];
 
+		if($flowCost === []){
+			return [];
+		}
+
 		$minCost = min($flowCost);
 
 		$isOptimalFlowDirection = [];
diff --git a/src/block/utils/MobHeadType.php b/src/block/utils/MobHeadType.php
index af1fe1c4c..8b450bb94 100644
--- a/src/block/utils/MobHeadType.php
+++ b/src/block/utils/MobHeadType.php
@@ -23,23 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static MobHeadType CREEPER()
- * @method static MobHeadType DRAGON()
- * @method static MobHeadType PIGLIN()
- * @method static MobHeadType PLAYER()
- * @method static MobHeadType SKELETON()
- * @method static MobHeadType WITHER_SKELETON()
- * @method static MobHeadType ZOMBIE()
- */
 enum MobHeadType{
-	use LegacyEnumShimTrait;
-
 	case SKELETON;
 	case WITHER_SKELETON;
 	case ZOMBIE;
diff --git a/src/block/utils/MushroomBlockType.php b/src/block/utils/MushroomBlockType.php
index 6bc499b23..b4536088f 100644
--- a/src/block/utils/MushroomBlockType.php
+++ b/src/block/utils/MushroomBlockType.php
@@ -23,27 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static MushroomBlockType ALL_CAP()
- * @method static MushroomBlockType CAP_EAST()
- * @method static MushroomBlockType CAP_MIDDLE()
- * @method static MushroomBlockType CAP_NORTH()
- * @method static MushroomBlockType CAP_NORTHEAST()
- * @method static MushroomBlockType CAP_NORTHWEST()
- * @method static MushroomBlockType CAP_SOUTH()
- * @method static MushroomBlockType CAP_SOUTHEAST()
- * @method static MushroomBlockType CAP_SOUTHWEST()
- * @method static MushroomBlockType CAP_WEST()
- * @method static MushroomBlockType PORES()
- */
 enum MushroomBlockType{
-	use LegacyEnumShimTrait;
-
 	case PORES;
 	case CAP_NORTHWEST;
 	case CAP_NORTH;
diff --git a/src/block/utils/RecordType.php b/src/block/utils/RecordType.php
index e63cee920..ae96596ae 100644
--- a/src/block/utils/RecordType.php
+++ b/src/block/utils/RecordType.php
@@ -26,34 +26,12 @@ namespace pocketmine\block\utils;
 use pocketmine\lang\KnownTranslationFactory;
 use pocketmine\lang\Translatable;
 use pocketmine\network\mcpe\protocol\types\LevelSoundEvent;
-use pocketmine\utils\LegacyEnumShimTrait;
 use function spl_object_id;
 
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static RecordType DISK_11()
- * @method static RecordType DISK_13()
- * @method static RecordType DISK_5()
- * @method static RecordType DISK_BLOCKS()
- * @method static RecordType DISK_CAT()
- * @method static RecordType DISK_CHIRP()
- * @method static RecordType DISK_FAR()
- * @method static RecordType DISK_MALL()
- * @method static RecordType DISK_MELLOHI()
- * @method static RecordType DISK_OTHERSIDE()
- * @method static RecordType DISK_PIGSTEP()
- * @method static RecordType DISK_STAL()
- * @method static RecordType DISK_STRAD()
- * @method static RecordType DISK_WAIT()
- * @method static RecordType DISK_WARD()
- *
  * @phpstan-type TMetadata array{0: string, 1: LevelSoundEvent::*, 2: Translatable}
  */
 enum RecordType{
-	use LegacyEnumShimTrait;
-
 	case DISK_13;
 	case DISK_5;
 	case DISK_CAT;
diff --git a/src/block/utils/SaplingType.php b/src/block/utils/SaplingType.php
index 9fe87936c..d8bd13e7c 100644
--- a/src/block/utils/SaplingType.php
+++ b/src/block/utils/SaplingType.php
@@ -23,23 +23,9 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
 use pocketmine\world\generator\object\TreeType;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static SaplingType ACACIA()
- * @method static SaplingType BIRCH()
- * @method static SaplingType DARK_OAK()
- * @method static SaplingType JUNGLE()
- * @method static SaplingType OAK()
- * @method static SaplingType SPRUCE()
- */
 enum SaplingType{
-	use LegacyEnumShimTrait;
-
 	case OAK;
 	case SPRUCE;
 	case BIRCH;
diff --git a/src/block/utils/SlabType.php b/src/block/utils/SlabType.php
index 90f3e0953..c79e4123c 100644
--- a/src/block/utils/SlabType.php
+++ b/src/block/utils/SlabType.php
@@ -23,19 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static SlabType BOTTOM()
- * @method static SlabType DOUBLE()
- * @method static SlabType TOP()
- */
 enum SlabType{
-	use LegacyEnumShimTrait;
-
 	case BOTTOM;
 	case TOP;
 	case DOUBLE;
diff --git a/src/block/utils/StairShape.php b/src/block/utils/StairShape.php
index b89b9adbb..4baf81dfe 100644
--- a/src/block/utils/StairShape.php
+++ b/src/block/utils/StairShape.php
@@ -23,21 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static StairShape INNER_LEFT()
- * @method static StairShape INNER_RIGHT()
- * @method static StairShape OUTER_LEFT()
- * @method static StairShape OUTER_RIGHT()
- * @method static StairShape STRAIGHT()
- */
 enum StairShape{
-	use LegacyEnumShimTrait;
-
 	case STRAIGHT;
 	case INNER_LEFT;
 	case INNER_RIGHT;
diff --git a/src/block/utils/SupportType.php b/src/block/utils/SupportType.php
index 9513d8640..52a7895a7 100644
--- a/src/block/utils/SupportType.php
+++ b/src/block/utils/SupportType.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static SupportType CENTER()
- * @method static SupportType EDGE()
- * @method static SupportType FULL()
- * @method static SupportType NONE()
- */
 enum SupportType{
-	use LegacyEnumShimTrait;
-
 	case FULL;
 	case CENTER;
 	case EDGE;
diff --git a/src/block/utils/WallConnectionType.php b/src/block/utils/WallConnectionType.php
index 1d4c8d152..e159abc8f 100644
--- a/src/block/utils/WallConnectionType.php
+++ b/src/block/utils/WallConnectionType.php
@@ -23,18 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static WallConnectionType SHORT()
- * @method static WallConnectionType TALL()
- */
 enum WallConnectionType{
-	use LegacyEnumShimTrait;
-
 	case SHORT;
 	case TALL;
 }
diff --git a/src/block/utils/WoodType.php b/src/block/utils/WoodType.php
index f6195b9f9..c376e14cd 100644
--- a/src/block/utils/WoodType.php
+++ b/src/block/utils/WoodType.php
@@ -23,26 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\block\utils;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static WoodType ACACIA()
- * @method static WoodType BIRCH()
- * @method static WoodType CHERRY()
- * @method static WoodType CRIMSON()
- * @method static WoodType DARK_OAK()
- * @method static WoodType JUNGLE()
- * @method static WoodType MANGROVE()
- * @method static WoodType OAK()
- * @method static WoodType SPRUCE()
- * @method static WoodType WARPED()
- */
 enum WoodType{
-	use LegacyEnumShimTrait;
-
 	case OAK;
 	case SPRUCE;
 	case BIRCH;
diff --git a/src/command/Command.php b/src/command/Command.php
index 02bae60d9..30338ddad 100644
--- a/src/command/Command.php
+++ b/src/command/Command.php
@@ -58,7 +58,7 @@ abstract class Command{
 
 	/** @var string[] */
 	private array $permission = [];
-	private ?string $permissionMessage = null;
+	private Translatable|string|null $permissionMessage = null;
 
 	/**
 	 * @param string[] $aliases
@@ -112,10 +112,11 @@ abstract class Command{
 			return true;
 		}
 
-		if($this->permissionMessage === null){
-			$target->sendMessage(KnownTranslationFactory::pocketmine_command_error_permission($this->name)->prefix(TextFormat::RED));
-		}elseif($this->permissionMessage !== ""){
-			$target->sendMessage(str_replace("<permission>", $permission ?? implode(";", $this->permission), $this->permissionMessage));
+		$message = $this->permissionMessage ?? KnownTranslationFactory::pocketmine_command_error_permission($this->name);
+		if($message instanceof Translatable){
+			$target->sendMessage($message->prefix(TextFormat::RED));
+		}elseif($message !== ""){
+			$target->sendMessage(str_replace("<permission>", $permission ?? implode(";", $this->permission), $message));
 		}
 
 		return false;
@@ -187,7 +188,7 @@ abstract class Command{
 		return $this->activeAliases;
 	}
 
-	public function getPermissionMessage() : ?string{
+	public function getPermissionMessage() : Translatable|string|null{
 		return $this->permissionMessage;
 	}
 
@@ -213,7 +214,7 @@ abstract class Command{
 		$this->description = $description;
 	}
 
-	public function setPermissionMessage(string $permissionMessage) : void{
+	public function setPermissionMessage(Translatable|string $permissionMessage) : void{
 		$this->permissionMessage = $permissionMessage;
 	}
 
diff --git a/src/crafting/CraftingManagerFromDataHelper.php b/src/crafting/CraftingManagerFromDataHelper.php
index 8315f2b3b..3924e5ef6 100644
--- a/src/crafting/CraftingManagerFromDataHelper.php
+++ b/src/crafting/CraftingManagerFromDataHelper.php
@@ -152,10 +152,10 @@ final class CraftingManagerFromDataHelper{
 	 * @return mixed[]
 	 *
 	 * @phpstan-template TData of object
-	 * @phpstan-param class-string<TData> $modelCLass
+	 * @phpstan-param class-string<TData> $modelClass
 	 * @phpstan-return list<TData>
 	 */
-	public static function loadJsonArrayOfObjectsFile(string $filePath, string $modelCLass) : array{
+	public static function loadJsonArrayOfObjectsFile(string $filePath, string $modelClass) : array{
 		$recipes = json_decode(Filesystem::fileGetContents($filePath));
 		if(!is_array($recipes)){
 			throw new SavedDataLoadingException("$filePath root should be an array, got " . get_debug_type($recipes));
@@ -166,7 +166,7 @@ final class CraftingManagerFromDataHelper{
 		$mapper->bExceptionOnUndefinedProperty = true;
 		$mapper->bExceptionOnMissingData = true;
 
-		return self::loadJsonObjectListIntoModel($mapper, $modelCLass, $recipes);
+		return self::loadJsonObjectListIntoModel($mapper, $modelClass, $recipes);
 	}
 
 	/**
diff --git a/src/crafting/FurnaceType.php b/src/crafting/FurnaceType.php
index 0ce5b72ce..7242cfef7 100644
--- a/src/crafting/FurnaceType.php
+++ b/src/crafting/FurnaceType.php
@@ -23,7 +23,6 @@ declare(strict_types=1);
 
 namespace pocketmine\crafting;
 
-use pocketmine\utils\LegacyEnumShimTrait;
 use pocketmine\world\sound\BlastFurnaceSound;
 use pocketmine\world\sound\FurnaceSound;
 use pocketmine\world\sound\SmokerSound;
@@ -31,18 +30,9 @@ use pocketmine\world\sound\Sound;
 use function spl_object_id;
 
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static FurnaceType BLAST_FURNACE()
- * @method static FurnaceType FURNACE()
- * @method static FurnaceType SMOKER()
- *
  * @phpstan-type TMetadata array{0: int, 1: Sound}
  */
 enum FurnaceType{
-	use LegacyEnumShimTrait;
-
 	case FURNACE;
 	case BLAST_FURNACE;
 	case SMOKER;
diff --git a/src/crafting/ShapelessRecipeType.php b/src/crafting/ShapelessRecipeType.php
index 4f4624a4b..5db8a8128 100644
--- a/src/crafting/ShapelessRecipeType.php
+++ b/src/crafting/ShapelessRecipeType.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\crafting;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static ShapelessRecipeType CARTOGRAPHY()
- * @method static ShapelessRecipeType CRAFTING()
- * @method static ShapelessRecipeType SMITHING()
- * @method static ShapelessRecipeType STONECUTTER()
- */
 enum ShapelessRecipeType{
-	use LegacyEnumShimTrait;
-
 	case CRAFTING;
 	case STONECUTTER;
 	case SMITHING;
diff --git a/src/data/bedrock/BannerPatternTypeIdMap.php b/src/data/bedrock/BannerPatternTypeIdMap.php
index 064844e19..87f9b8f57 100644
--- a/src/data/bedrock/BannerPatternTypeIdMap.php
+++ b/src/data/bedrock/BannerPatternTypeIdMap.php
@@ -43,44 +43,48 @@ final class BannerPatternTypeIdMap{
 	private array $enumToId = [];
 
 	public function __construct(){
-		$this->register("bo", BannerPatternType::BORDER);
-		$this->register("bri", BannerPatternType::BRICKS);
-		$this->register("mc", BannerPatternType::CIRCLE);
-		$this->register("cre", BannerPatternType::CREEPER);
-		$this->register("cr", BannerPatternType::CROSS);
-		$this->register("cbo", BannerPatternType::CURLY_BORDER);
-		$this->register("lud", BannerPatternType::DIAGONAL_LEFT);
-		$this->register("rd", BannerPatternType::DIAGONAL_RIGHT);
-		$this->register("ld", BannerPatternType::DIAGONAL_UP_LEFT);
-		$this->register("rud", BannerPatternType::DIAGONAL_UP_RIGHT);
-		$this->register("flo", BannerPatternType::FLOWER);
-		$this->register("gra", BannerPatternType::GRADIENT);
-		$this->register("gru", BannerPatternType::GRADIENT_UP);
-		$this->register("hh", BannerPatternType::HALF_HORIZONTAL);
-		$this->register("hhb", BannerPatternType::HALF_HORIZONTAL_BOTTOM);
-		$this->register("vh", BannerPatternType::HALF_VERTICAL);
-		$this->register("vhr", BannerPatternType::HALF_VERTICAL_RIGHT);
-		$this->register("moj", BannerPatternType::MOJANG);
-		$this->register("mr", BannerPatternType::RHOMBUS);
-		$this->register("sku", BannerPatternType::SKULL);
-		$this->register("ss", BannerPatternType::SMALL_STRIPES);
-		$this->register("bl", BannerPatternType::SQUARE_BOTTOM_LEFT);
-		$this->register("br", BannerPatternType::SQUARE_BOTTOM_RIGHT);
-		$this->register("tl", BannerPatternType::SQUARE_TOP_LEFT);
-		$this->register("tr", BannerPatternType::SQUARE_TOP_RIGHT);
-		$this->register("sc", BannerPatternType::STRAIGHT_CROSS);
-		$this->register("bs", BannerPatternType::STRIPE_BOTTOM);
-		$this->register("cs", BannerPatternType::STRIPE_CENTER);
-		$this->register("dls", BannerPatternType::STRIPE_DOWNLEFT);
-		$this->register("drs", BannerPatternType::STRIPE_DOWNRIGHT);
-		$this->register("ls", BannerPatternType::STRIPE_LEFT);
-		$this->register("ms", BannerPatternType::STRIPE_MIDDLE);
-		$this->register("rs", BannerPatternType::STRIPE_RIGHT);
-		$this->register("ts", BannerPatternType::STRIPE_TOP);
-		$this->register("bt", BannerPatternType::TRIANGLE_BOTTOM);
-		$this->register("tt", BannerPatternType::TRIANGLE_TOP);
-		$this->register("bts", BannerPatternType::TRIANGLES_BOTTOM);
-		$this->register("tts", BannerPatternType::TRIANGLES_TOP);
+		foreach(BannerPatternType::cases() as $case){
+			$this->register(match($case){
+				BannerPatternType::BORDER => "bo",
+				BannerPatternType::BRICKS => "bri",
+				BannerPatternType::CIRCLE => "mc",
+				BannerPatternType::CREEPER => "cre",
+				BannerPatternType::CROSS => "cr",
+				BannerPatternType::CURLY_BORDER => "cbo",
+				BannerPatternType::DIAGONAL_LEFT => "lud",
+				BannerPatternType::DIAGONAL_RIGHT => "rd",
+				BannerPatternType::DIAGONAL_UP_LEFT => "ld",
+				BannerPatternType::DIAGONAL_UP_RIGHT => "rud",
+				BannerPatternType::FLOWER => "flo",
+				BannerPatternType::GRADIENT => "gra",
+				BannerPatternType::GRADIENT_UP => "gru",
+				BannerPatternType::HALF_HORIZONTAL => "hh",
+				BannerPatternType::HALF_HORIZONTAL_BOTTOM => "hhb",
+				BannerPatternType::HALF_VERTICAL => "vh",
+				BannerPatternType::HALF_VERTICAL_RIGHT => "vhr",
+				BannerPatternType::MOJANG => "moj",
+				BannerPatternType::RHOMBUS => "mr",
+				BannerPatternType::SKULL => "sku",
+				BannerPatternType::SMALL_STRIPES => "ss",
+				BannerPatternType::SQUARE_BOTTOM_LEFT => "bl",
+				BannerPatternType::SQUARE_BOTTOM_RIGHT => "br",
+				BannerPatternType::SQUARE_TOP_LEFT => "tl",
+				BannerPatternType::SQUARE_TOP_RIGHT => "tr",
+				BannerPatternType::STRAIGHT_CROSS => "sc",
+				BannerPatternType::STRIPE_BOTTOM => "bs",
+				BannerPatternType::STRIPE_CENTER => "cs",
+				BannerPatternType::STRIPE_DOWNLEFT => "dls",
+				BannerPatternType::STRIPE_DOWNRIGHT => "drs",
+				BannerPatternType::STRIPE_LEFT => "ls",
+				BannerPatternType::STRIPE_MIDDLE => "ms",
+				BannerPatternType::STRIPE_RIGHT => "rs",
+				BannerPatternType::STRIPE_TOP => "ts",
+				BannerPatternType::TRIANGLE_BOTTOM => "bt",
+				BannerPatternType::TRIANGLE_TOP => "tt",
+				BannerPatternType::TRIANGLES_BOTTOM => "bts",
+				BannerPatternType::TRIANGLES_TOP => "tts",
+			}, $case);
+		}
 	}
 
 	public function register(string $stringId, BannerPatternType $type) : void{
diff --git a/src/data/bedrock/DyeColorIdMap.php b/src/data/bedrock/DyeColorIdMap.php
index a360e4f91..60c509705 100644
--- a/src/data/bedrock/DyeColorIdMap.php
+++ b/src/data/bedrock/DyeColorIdMap.php
@@ -48,22 +48,28 @@ final class DyeColorIdMap{
 	private array $enumToItemId = [];
 
 	private function __construct(){
-		$this->register(0, ItemTypeNames::WHITE_DYE, DyeColor::WHITE);
-		$this->register(1, ItemTypeNames::ORANGE_DYE, DyeColor::ORANGE);
-		$this->register(2, ItemTypeNames::MAGENTA_DYE, DyeColor::MAGENTA);
-		$this->register(3, ItemTypeNames::LIGHT_BLUE_DYE, DyeColor::LIGHT_BLUE);
-		$this->register(4, ItemTypeNames::YELLOW_DYE, DyeColor::YELLOW);
-		$this->register(5, ItemTypeNames::LIME_DYE, DyeColor::LIME);
-		$this->register(6, ItemTypeNames::PINK_DYE, DyeColor::PINK);
-		$this->register(7, ItemTypeNames::GRAY_DYE, DyeColor::GRAY);
-		$this->register(8, ItemTypeNames::LIGHT_GRAY_DYE, DyeColor::LIGHT_GRAY);
-		$this->register(9, ItemTypeNames::CYAN_DYE, DyeColor::CYAN);
-		$this->register(10, ItemTypeNames::PURPLE_DYE, DyeColor::PURPLE);
-		$this->register(11, ItemTypeNames::BLUE_DYE, DyeColor::BLUE);
-		$this->register(12, ItemTypeNames::BROWN_DYE, DyeColor::BROWN);
-		$this->register(13, ItemTypeNames::GREEN_DYE, DyeColor::GREEN);
-		$this->register(14, ItemTypeNames::RED_DYE, DyeColor::RED);
-		$this->register(15, ItemTypeNames::BLACK_DYE, DyeColor::BLACK);
+		foreach(DyeColor::cases() as $case){
+			[$colorId, $dyeItemId] = match($case){
+				DyeColor::WHITE => [0, ItemTypeNames::WHITE_DYE],
+				DyeColor::ORANGE => [1, ItemTypeNames::ORANGE_DYE],
+				DyeColor::MAGENTA => [2, ItemTypeNames::MAGENTA_DYE],
+				DyeColor::LIGHT_BLUE => [3, ItemTypeNames::LIGHT_BLUE_DYE],
+				DyeColor::YELLOW => [4, ItemTypeNames::YELLOW_DYE],
+				DyeColor::LIME => [5, ItemTypeNames::LIME_DYE],
+				DyeColor::PINK => [6, ItemTypeNames::PINK_DYE],
+				DyeColor::GRAY => [7, ItemTypeNames::GRAY_DYE],
+				DyeColor::LIGHT_GRAY => [8, ItemTypeNames::LIGHT_GRAY_DYE],
+				DyeColor::CYAN => [9, ItemTypeNames::CYAN_DYE],
+				DyeColor::PURPLE => [10, ItemTypeNames::PURPLE_DYE],
+				DyeColor::BLUE => [11, ItemTypeNames::BLUE_DYE],
+				DyeColor::BROWN => [12, ItemTypeNames::BROWN_DYE],
+				DyeColor::GREEN => [13, ItemTypeNames::GREEN_DYE],
+				DyeColor::RED => [14, ItemTypeNames::RED_DYE],
+				DyeColor::BLACK => [15, ItemTypeNames::BLACK_DYE],
+			};
+
+			$this->register($colorId, $dyeItemId, $case);
+		}
 	}
 
 	private function register(int $id, string $itemId, DyeColor $color) : void{
diff --git a/src/data/bedrock/FireworkRocketTypeIdMap.php b/src/data/bedrock/FireworkRocketTypeIdMap.php
index 3e7633ccc..4358c2073 100644
--- a/src/data/bedrock/FireworkRocketTypeIdMap.php
+++ b/src/data/bedrock/FireworkRocketTypeIdMap.php
@@ -28,40 +28,18 @@ use pocketmine\utils\SingletonTrait;
 
 final class FireworkRocketTypeIdMap{
 	use SingletonTrait;
-
-	/**
-	 * @var FireworkRocketType[]
-	 * @phpstan-var array<int, FireworkRocketType>
-	 */
-	private array $idToEnum = [];
-
-	/**
-	 * @var int[]
-	 * @phpstan-var array<int, int>
-	 */
-	private array $enumToId = [];
+	/** @phpstan-use IntSaveIdMapTrait<FireworkRocketType> */
+	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(FireworkRocketTypeIds::SMALL_BALL, FireworkRocketType::SMALL_BALL);
-		$this->register(FireworkRocketTypeIds::LARGE_BALL, FireworkRocketType::LARGE_BALL);
-		$this->register(FireworkRocketTypeIds::STAR, FireworkRocketType::STAR);
-		$this->register(FireworkRocketTypeIds::CREEPER, FireworkRocketType::CREEPER);
-		$this->register(FireworkRocketTypeIds::BURST, FireworkRocketType::BURST);
-	}
-
-	private function register(int $id, FireworkRocketType $type) : void{
-		$this->idToEnum[$id] = $type;
-		$this->enumToId[$type->id()] = $id;
-	}
-
-	public function fromId(int $id) : ?FireworkRocketType{
-		return $this->idToEnum[$id] ?? null;
-	}
-
-	public function toId(FireworkRocketType $type) : int{
-		if(!isset($this->enumToId[$type->id()])){
-			throw new \InvalidArgumentException("Type does not have a mapped ID");
+		foreach(FireworkRocketType::cases() as $case){
+			$this->register(match($case){
+				FireworkRocketType::SMALL_BALL => FireworkRocketTypeIds::SMALL_BALL,
+				FireworkRocketType::LARGE_BALL => FireworkRocketTypeIds::LARGE_BALL,
+				FireworkRocketType::STAR => FireworkRocketTypeIds::STAR,
+				FireworkRocketType::CREEPER => FireworkRocketTypeIds::CREEPER,
+				FireworkRocketType::BURST => FireworkRocketTypeIds::BURST,
+			}, $case);
 		}
-		return $this->enumToId[$type->id()];
 	}
 }
diff --git a/src/data/bedrock/MedicineTypeIdMap.php b/src/data/bedrock/MedicineTypeIdMap.php
index 00d1f27a8..90fd83550 100644
--- a/src/data/bedrock/MedicineTypeIdMap.php
+++ b/src/data/bedrock/MedicineTypeIdMap.php
@@ -32,9 +32,13 @@ final class MedicineTypeIdMap{
 	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(MedicineTypeIds::ANTIDOTE, MedicineType::ANTIDOTE);
-		$this->register(MedicineTypeIds::ELIXIR, MedicineType::ELIXIR);
-		$this->register(MedicineTypeIds::EYE_DROPS, MedicineType::EYE_DROPS);
-		$this->register(MedicineTypeIds::TONIC, MedicineType::TONIC);
+		foreach(MedicineType::cases() as $case){
+			$this->register(match($case){
+				MedicineType::ANTIDOTE => MedicineTypeIds::ANTIDOTE,
+				MedicineType::ELIXIR => MedicineTypeIds::ELIXIR,
+				MedicineType::EYE_DROPS => MedicineTypeIds::EYE_DROPS,
+				MedicineType::TONIC => MedicineTypeIds::TONIC,
+			}, $case);
+		}
 	}
 }
diff --git a/src/data/bedrock/MobHeadTypeIdMap.php b/src/data/bedrock/MobHeadTypeIdMap.php
index ec678b192..bf16e6eba 100644
--- a/src/data/bedrock/MobHeadTypeIdMap.php
+++ b/src/data/bedrock/MobHeadTypeIdMap.php
@@ -32,12 +32,16 @@ final class MobHeadTypeIdMap{
 	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(0, MobHeadType::SKELETON);
-		$this->register(1, MobHeadType::WITHER_SKELETON);
-		$this->register(2, MobHeadType::ZOMBIE);
-		$this->register(3, MobHeadType::PLAYER);
-		$this->register(4, MobHeadType::CREEPER);
-		$this->register(5, MobHeadType::DRAGON);
-		$this->register(6, MobHeadType::PIGLIN);
+		foreach(MobHeadType::cases() as $case){
+			$this->register(match($case){
+				MobHeadType::SKELETON => 0,
+				MobHeadType::WITHER_SKELETON => 1,
+				MobHeadType::ZOMBIE => 2,
+				MobHeadType::PLAYER => 3,
+				MobHeadType::CREEPER => 4,
+				MobHeadType::DRAGON => 5,
+				MobHeadType::PIGLIN => 6,
+			}, $case);
+		}
 	}
 }
diff --git a/src/data/bedrock/MushroomBlockTypeIdMap.php b/src/data/bedrock/MushroomBlockTypeIdMap.php
index 92edef4b2..a25336d89 100644
--- a/src/data/bedrock/MushroomBlockTypeIdMap.php
+++ b/src/data/bedrock/MushroomBlockTypeIdMap.php
@@ -33,16 +33,20 @@ final class MushroomBlockTypeIdMap{
 	use IntSaveIdMapTrait;
 
 	public function __construct(){
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_ALL_PORES, MushroomBlockType::PORES);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_NORTHWEST_CORNER, MushroomBlockType::CAP_NORTHWEST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_NORTH_SIDE, MushroomBlockType::CAP_NORTH);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_NORTHEAST_CORNER, MushroomBlockType::CAP_NORTHEAST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_WEST_SIDE, MushroomBlockType::CAP_WEST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_TOP_ONLY, MushroomBlockType::CAP_MIDDLE);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_EAST_SIDE, MushroomBlockType::CAP_EAST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTHWEST_CORNER, MushroomBlockType::CAP_SOUTHWEST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTH_SIDE, MushroomBlockType::CAP_SOUTH);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTHEAST_CORNER, MushroomBlockType::CAP_SOUTHEAST);
-		$this->register(LegacyMeta::MUSHROOM_BLOCK_ALL_CAP, MushroomBlockType::ALL_CAP);
+		foreach(MushroomBlockType::cases() as $case){
+			$this->register(match($case){
+				MushroomBlockType::PORES => LegacyMeta::MUSHROOM_BLOCK_ALL_PORES,
+				MushroomBlockType::CAP_NORTHWEST => LegacyMeta::MUSHROOM_BLOCK_CAP_NORTHWEST_CORNER,
+				MushroomBlockType::CAP_NORTH => LegacyMeta::MUSHROOM_BLOCK_CAP_NORTH_SIDE,
+				MushroomBlockType::CAP_NORTHEAST => LegacyMeta::MUSHROOM_BLOCK_CAP_NORTHEAST_CORNER,
+				MushroomBlockType::CAP_WEST => LegacyMeta::MUSHROOM_BLOCK_CAP_WEST_SIDE,
+				MushroomBlockType::CAP_MIDDLE => LegacyMeta::MUSHROOM_BLOCK_CAP_TOP_ONLY,
+				MushroomBlockType::CAP_EAST => LegacyMeta::MUSHROOM_BLOCK_CAP_EAST_SIDE,
+				MushroomBlockType::CAP_SOUTHWEST => LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTHWEST_CORNER,
+				MushroomBlockType::CAP_SOUTH => LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTH_SIDE,
+				MushroomBlockType::CAP_SOUTHEAST => LegacyMeta::MUSHROOM_BLOCK_CAP_SOUTHEAST_CORNER,
+				MushroomBlockType::ALL_CAP => LegacyMeta::MUSHROOM_BLOCK_ALL_CAP,
+			}, $case);
+		}
 	}
 }
diff --git a/src/data/bedrock/NoteInstrumentIdMap.php b/src/data/bedrock/NoteInstrumentIdMap.php
index e721b881d..c847ecd98 100644
--- a/src/data/bedrock/NoteInstrumentIdMap.php
+++ b/src/data/bedrock/NoteInstrumentIdMap.php
@@ -32,21 +32,25 @@ final class NoteInstrumentIdMap{
 	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(0, NoteInstrument::PIANO);
-		$this->register(1, NoteInstrument::BASS_DRUM);
-		$this->register(2, NoteInstrument::SNARE);
-		$this->register(3, NoteInstrument::CLICKS_AND_STICKS);
-		$this->register(4, NoteInstrument::DOUBLE_BASS);
-		$this->register(5, NoteInstrument::BELL);
-		$this->register(6, NoteInstrument::FLUTE);
-		$this->register(7, NoteInstrument::CHIME);
-		$this->register(8, NoteInstrument::GUITAR);
-		$this->register(9, NoteInstrument::XYLOPHONE);
-		$this->register(10, NoteInstrument::IRON_XYLOPHONE);
-		$this->register(11, NoteInstrument::COW_BELL);
-		$this->register(12, NoteInstrument::DIDGERIDOO);
-		$this->register(13, NoteInstrument::BIT);
-		$this->register(14, NoteInstrument::BANJO);
-		$this->register(15, NoteInstrument::PLING);
+		foreach(NoteInstrument::cases() as $case){
+			$this->register(match($case){
+				NoteInstrument::PIANO => 0,
+				NoteInstrument::BASS_DRUM => 1,
+				NoteInstrument::SNARE => 2,
+				NoteInstrument::CLICKS_AND_STICKS => 3,
+				NoteInstrument::DOUBLE_BASS => 4,
+				NoteInstrument::BELL => 5,
+				NoteInstrument::FLUTE => 6,
+				NoteInstrument::CHIME => 7,
+				NoteInstrument::GUITAR => 8,
+				NoteInstrument::XYLOPHONE => 9,
+				NoteInstrument::IRON_XYLOPHONE => 10,
+				NoteInstrument::COW_BELL => 11,
+				NoteInstrument::DIDGERIDOO => 12,
+				NoteInstrument::BIT => 13,
+				NoteInstrument::BANJO => 14,
+				NoteInstrument::PLING => 15,
+			}, $case);
+		}
 	}
 }
diff --git a/src/data/bedrock/PotionTypeIdMap.php b/src/data/bedrock/PotionTypeIdMap.php
index 3fef20f68..4e7d8d4c7 100644
--- a/src/data/bedrock/PotionTypeIdMap.php
+++ b/src/data/bedrock/PotionTypeIdMap.php
@@ -32,48 +32,52 @@ final class PotionTypeIdMap{
 	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(PotionTypeIds::WATER, PotionType::WATER);
-		$this->register(PotionTypeIds::MUNDANE, PotionType::MUNDANE);
-		$this->register(PotionTypeIds::LONG_MUNDANE, PotionType::LONG_MUNDANE);
-		$this->register(PotionTypeIds::THICK, PotionType::THICK);
-		$this->register(PotionTypeIds::AWKWARD, PotionType::AWKWARD);
-		$this->register(PotionTypeIds::NIGHT_VISION, PotionType::NIGHT_VISION);
-		$this->register(PotionTypeIds::LONG_NIGHT_VISION, PotionType::LONG_NIGHT_VISION);
-		$this->register(PotionTypeIds::INVISIBILITY, PotionType::INVISIBILITY);
-		$this->register(PotionTypeIds::LONG_INVISIBILITY, PotionType::LONG_INVISIBILITY);
-		$this->register(PotionTypeIds::LEAPING, PotionType::LEAPING);
-		$this->register(PotionTypeIds::LONG_LEAPING, PotionType::LONG_LEAPING);
-		$this->register(PotionTypeIds::STRONG_LEAPING, PotionType::STRONG_LEAPING);
-		$this->register(PotionTypeIds::FIRE_RESISTANCE, PotionType::FIRE_RESISTANCE);
-		$this->register(PotionTypeIds::LONG_FIRE_RESISTANCE, PotionType::LONG_FIRE_RESISTANCE);
-		$this->register(PotionTypeIds::SWIFTNESS, PotionType::SWIFTNESS);
-		$this->register(PotionTypeIds::LONG_SWIFTNESS, PotionType::LONG_SWIFTNESS);
-		$this->register(PotionTypeIds::STRONG_SWIFTNESS, PotionType::STRONG_SWIFTNESS);
-		$this->register(PotionTypeIds::SLOWNESS, PotionType::SLOWNESS);
-		$this->register(PotionTypeIds::LONG_SLOWNESS, PotionType::LONG_SLOWNESS);
-		$this->register(PotionTypeIds::WATER_BREATHING, PotionType::WATER_BREATHING);
-		$this->register(PotionTypeIds::LONG_WATER_BREATHING, PotionType::LONG_WATER_BREATHING);
-		$this->register(PotionTypeIds::HEALING, PotionType::HEALING);
-		$this->register(PotionTypeIds::STRONG_HEALING, PotionType::STRONG_HEALING);
-		$this->register(PotionTypeIds::HARMING, PotionType::HARMING);
-		$this->register(PotionTypeIds::STRONG_HARMING, PotionType::STRONG_HARMING);
-		$this->register(PotionTypeIds::POISON, PotionType::POISON);
-		$this->register(PotionTypeIds::LONG_POISON, PotionType::LONG_POISON);
-		$this->register(PotionTypeIds::STRONG_POISON, PotionType::STRONG_POISON);
-		$this->register(PotionTypeIds::REGENERATION, PotionType::REGENERATION);
-		$this->register(PotionTypeIds::LONG_REGENERATION, PotionType::LONG_REGENERATION);
-		$this->register(PotionTypeIds::STRONG_REGENERATION, PotionType::STRONG_REGENERATION);
-		$this->register(PotionTypeIds::STRENGTH, PotionType::STRENGTH);
-		$this->register(PotionTypeIds::LONG_STRENGTH, PotionType::LONG_STRENGTH);
-		$this->register(PotionTypeIds::STRONG_STRENGTH, PotionType::STRONG_STRENGTH);
-		$this->register(PotionTypeIds::WEAKNESS, PotionType::WEAKNESS);
-		$this->register(PotionTypeIds::LONG_WEAKNESS, PotionType::LONG_WEAKNESS);
-		$this->register(PotionTypeIds::WITHER, PotionType::WITHER);
-		$this->register(PotionTypeIds::TURTLE_MASTER, PotionType::TURTLE_MASTER);
-		$this->register(PotionTypeIds::LONG_TURTLE_MASTER, PotionType::LONG_TURTLE_MASTER);
-		$this->register(PotionTypeIds::STRONG_TURTLE_MASTER, PotionType::STRONG_TURTLE_MASTER);
-		$this->register(PotionTypeIds::SLOW_FALLING, PotionType::SLOW_FALLING);
-		$this->register(PotionTypeIds::LONG_SLOW_FALLING, PotionType::LONG_SLOW_FALLING);
-		$this->register(PotionTypeIds::STRONG_SLOWNESS, PotionType::STRONG_SLOWNESS);
+		foreach(PotionType::cases() as $case){
+			$this->register(match($case){
+				PotionType::WATER => PotionTypeIds::WATER,
+				PotionType::MUNDANE => PotionTypeIds::MUNDANE,
+				PotionType::LONG_MUNDANE => PotionTypeIds::LONG_MUNDANE,
+				PotionType::THICK => PotionTypeIds::THICK,
+				PotionType::AWKWARD => PotionTypeIds::AWKWARD,
+				PotionType::NIGHT_VISION => PotionTypeIds::NIGHT_VISION,
+				PotionType::LONG_NIGHT_VISION => PotionTypeIds::LONG_NIGHT_VISION,
+				PotionType::INVISIBILITY => PotionTypeIds::INVISIBILITY,
+				PotionType::LONG_INVISIBILITY => PotionTypeIds::LONG_INVISIBILITY,
+				PotionType::LEAPING => PotionTypeIds::LEAPING,
+				PotionType::LONG_LEAPING => PotionTypeIds::LONG_LEAPING,
+				PotionType::STRONG_LEAPING => PotionTypeIds::STRONG_LEAPING,
+				PotionType::FIRE_RESISTANCE => PotionTypeIds::FIRE_RESISTANCE,
+				PotionType::LONG_FIRE_RESISTANCE => PotionTypeIds::LONG_FIRE_RESISTANCE,
+				PotionType::SWIFTNESS => PotionTypeIds::SWIFTNESS,
+				PotionType::LONG_SWIFTNESS => PotionTypeIds::LONG_SWIFTNESS,
+				PotionType::STRONG_SWIFTNESS => PotionTypeIds::STRONG_SWIFTNESS,
+				PotionType::SLOWNESS => PotionTypeIds::SLOWNESS,
+				PotionType::LONG_SLOWNESS => PotionTypeIds::LONG_SLOWNESS,
+				PotionType::WATER_BREATHING => PotionTypeIds::WATER_BREATHING,
+				PotionType::LONG_WATER_BREATHING => PotionTypeIds::LONG_WATER_BREATHING,
+				PotionType::HEALING => PotionTypeIds::HEALING,
+				PotionType::STRONG_HEALING => PotionTypeIds::STRONG_HEALING,
+				PotionType::HARMING => PotionTypeIds::HARMING,
+				PotionType::STRONG_HARMING => PotionTypeIds::STRONG_HARMING,
+				PotionType::POISON => PotionTypeIds::POISON,
+				PotionType::LONG_POISON => PotionTypeIds::LONG_POISON,
+				PotionType::STRONG_POISON => PotionTypeIds::STRONG_POISON,
+				PotionType::REGENERATION => PotionTypeIds::REGENERATION,
+				PotionType::LONG_REGENERATION => PotionTypeIds::LONG_REGENERATION,
+				PotionType::STRONG_REGENERATION => PotionTypeIds::STRONG_REGENERATION,
+				PotionType::STRENGTH => PotionTypeIds::STRENGTH,
+				PotionType::LONG_STRENGTH => PotionTypeIds::LONG_STRENGTH,
+				PotionType::STRONG_STRENGTH => PotionTypeIds::STRONG_STRENGTH,
+				PotionType::WEAKNESS => PotionTypeIds::WEAKNESS,
+				PotionType::LONG_WEAKNESS => PotionTypeIds::LONG_WEAKNESS,
+				PotionType::WITHER => PotionTypeIds::WITHER,
+				PotionType::TURTLE_MASTER => PotionTypeIds::TURTLE_MASTER,
+				PotionType::LONG_TURTLE_MASTER => PotionTypeIds::LONG_TURTLE_MASTER,
+				PotionType::STRONG_TURTLE_MASTER => PotionTypeIds::STRONG_TURTLE_MASTER,
+				PotionType::SLOW_FALLING => PotionTypeIds::SLOW_FALLING,
+				PotionType::LONG_SLOW_FALLING => PotionTypeIds::LONG_SLOW_FALLING,
+				PotionType::STRONG_SLOWNESS => PotionTypeIds::STRONG_SLOWNESS,
+			}, $case);
+		}
 	}
 }
diff --git a/src/data/bedrock/SuspiciousStewTypeIdMap.php b/src/data/bedrock/SuspiciousStewTypeIdMap.php
index c4de4b742..d6a31f0ea 100644
--- a/src/data/bedrock/SuspiciousStewTypeIdMap.php
+++ b/src/data/bedrock/SuspiciousStewTypeIdMap.php
@@ -32,15 +32,20 @@ final class SuspiciousStewTypeIdMap{
 	use IntSaveIdMapTrait;
 
 	private function __construct(){
-		$this->register(SuspiciousStewTypeIds::POPPY, SuspiciousStewType::POPPY);
-		$this->register(SuspiciousStewTypeIds::CORNFLOWER, SuspiciousStewType::CORNFLOWER);
-		$this->register(SuspiciousStewTypeIds::TULIP, SuspiciousStewType::TULIP);
-		$this->register(SuspiciousStewTypeIds::AZURE_BLUET, SuspiciousStewType::AZURE_BLUET);
-		$this->register(SuspiciousStewTypeIds::LILY_OF_THE_VALLEY, SuspiciousStewType::LILY_OF_THE_VALLEY);
-		$this->register(SuspiciousStewTypeIds::DANDELION, SuspiciousStewType::DANDELION);
-		$this->register(SuspiciousStewTypeIds::BLUE_ORCHID, SuspiciousStewType::BLUE_ORCHID);
-		$this->register(SuspiciousStewTypeIds::ALLIUM, SuspiciousStewType::ALLIUM);
-		$this->register(SuspiciousStewTypeIds::OXEYE_DAISY, SuspiciousStewType::OXEYE_DAISY);
-		$this->register(SuspiciousStewTypeIds::WITHER_ROSE, SuspiciousStewType::WITHER_ROSE);
+		foreach(SuspiciousStewType::cases() as $case){
+			$this->register(match($case){
+				SuspiciousStewType::POPPY => SuspiciousStewTypeIds::POPPY,
+				SuspiciousStewType::CORNFLOWER => SuspiciousStewTypeIds::CORNFLOWER,
+				SuspiciousStewType::TULIP => SuspiciousStewTypeIds::TULIP,
+				SuspiciousStewType::AZURE_BLUET => SuspiciousStewTypeIds::AZURE_BLUET,
+				SuspiciousStewType::LILY_OF_THE_VALLEY => SuspiciousStewTypeIds::LILY_OF_THE_VALLEY,
+				SuspiciousStewType::DANDELION => SuspiciousStewTypeIds::DANDELION,
+				SuspiciousStewType::BLUE_ORCHID => SuspiciousStewTypeIds::BLUE_ORCHID,
+				SuspiciousStewType::ALLIUM => SuspiciousStewTypeIds::ALLIUM,
+				SuspiciousStewType::OXEYE_DAISY => SuspiciousStewTypeIds::OXEYE_DAISY,
+				SuspiciousStewType::WITHER_ROSE => SuspiciousStewTypeIds::WITHER_ROSE,
+			}, $case);
+		}
+
 	}
 }
diff --git a/src/data/bedrock/block/convert/BlockObjectToStateSerializer.php b/src/data/bedrock/block/convert/BlockObjectToStateSerializer.php
index b0b06ac90..fd62b86bb 100644
--- a/src/data/bedrock/block/convert/BlockObjectToStateSerializer.php
+++ b/src/data/bedrock/block/convert/BlockObjectToStateSerializer.php
@@ -158,8 +158,7 @@ use pocketmine\block\WallBanner;
 use pocketmine\block\WallCoralFan;
 use pocketmine\block\WallSign;
 use pocketmine\block\Water;
-use pocketmine\block\WeightedPressurePlateHeavy;
-use pocketmine\block\WeightedPressurePlateLight;
+use pocketmine\block\WeightedPressurePlate;
 use pocketmine\block\Wheat;
 use pocketmine\block\Wood;
 use pocketmine\block\WoodenButton;
@@ -1738,11 +1737,11 @@ final class BlockObjectToStateSerializer implements BlockStateSerializer{
 			return Writer::create(Ids::WEEPING_VINES)
 				->writeInt(StateNames::WEEPING_VINES_AGE, $block->getAge());
 		});
-		$this->map(Blocks::WEIGHTED_PRESSURE_PLATE_HEAVY(), function(WeightedPressurePlateHeavy $block) : Writer{
+		$this->map(Blocks::WEIGHTED_PRESSURE_PLATE_HEAVY(), function(WeightedPressurePlate $block) : Writer{
 			return Writer::create(Ids::HEAVY_WEIGHTED_PRESSURE_PLATE)
 				->writeInt(StateNames::REDSTONE_SIGNAL, $block->getOutputSignalStrength());
 		});
-		$this->map(Blocks::WEIGHTED_PRESSURE_PLATE_LIGHT(), function(WeightedPressurePlateLight $block) : Writer{
+		$this->map(Blocks::WEIGHTED_PRESSURE_PLATE_LIGHT(), function(WeightedPressurePlate $block) : Writer{
 			return Writer::create(Ids::LIGHT_WEIGHTED_PRESSURE_PLATE)
 				->writeInt(StateNames::REDSTONE_SIGNAL, $block->getOutputSignalStrength());
 		});
diff --git a/src/data/java/GameModeIdMap.php b/src/data/java/GameModeIdMap.php
index 41258dd66..9262723ed 100644
--- a/src/data/java/GameModeIdMap.php
+++ b/src/data/java/GameModeIdMap.php
@@ -44,10 +44,14 @@ final class GameModeIdMap{
 	private array $enumToId = [];
 
 	public function __construct(){
-		$this->register(0, GameMode::SURVIVAL);
-		$this->register(1, GameMode::CREATIVE);
-		$this->register(2, GameMode::ADVENTURE);
-		$this->register(3, GameMode::SPECTATOR);
+		foreach(GameMode::cases() as $case){
+			$this->register(match($case){
+				GameMode::SURVIVAL => 0,
+				GameMode::CREATIVE => 1,
+				GameMode::ADVENTURE => 2,
+				GameMode::SPECTATOR => 3,
+			}, $case);
+		}
 	}
 
 	private function register(int $id, GameMode $type) : void{
diff --git a/src/data/runtime/LegacyRuntimeEnumDescriberTrait.php b/src/data/runtime/LegacyRuntimeEnumDescriberTrait.php
deleted file mode 100644
index dd35fabfb..000000000
--- a/src/data/runtime/LegacyRuntimeEnumDescriberTrait.php
+++ /dev/null
@@ -1,94 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\data\runtime;
-
-/**
- * Provides backwards-compatible shims for the old codegen'd enum describer methods.
- * This is kept for plugin backwards compatibility, but these functions should not be used in new code.
- * @deprecated
- */
-trait LegacyRuntimeEnumDescriberTrait{
-
-	/**
-	 * @phpstan-template T of \UnitEnum
-	 * @phpstan-param T $case
-	 */
-	abstract protected function enum(\UnitEnum &$case) : void;
-
-	public function bellAttachmentType(\pocketmine\block\utils\BellAttachmentType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function copperOxidation(\pocketmine\block\utils\CopperOxidation &$value) : void{
-		$this->enum($value);
-	}
-
-	public function coralType(\pocketmine\block\utils\CoralType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function dirtType(\pocketmine\block\utils\DirtType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function dripleafState(\pocketmine\block\utils\DripleafState &$value) : void{
-		$this->enum($value);
-	}
-
-	public function dyeColor(\pocketmine\block\utils\DyeColor &$value) : void{
-		$this->enum($value);
-	}
-
-	public function froglightType(\pocketmine\block\utils\FroglightType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function leverFacing(\pocketmine\block\utils\LeverFacing &$value) : void{
-		$this->enum($value);
-	}
-
-	public function medicineType(\pocketmine\item\MedicineType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function mobHeadType(\pocketmine\block\utils\MobHeadType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function mushroomBlockType(\pocketmine\block\utils\MushroomBlockType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function potionType(\pocketmine\item\PotionType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function slabType(\pocketmine\block\utils\SlabType &$value) : void{
-		$this->enum($value);
-	}
-
-	public function suspiciousStewType(\pocketmine\item\SuspiciousStewType &$value) : void{
-		$this->enum($value);
-	}
-}
diff --git a/src/data/runtime/RuntimeDataDescriber.php b/src/data/runtime/RuntimeDataDescriber.php
index 04217f5df..fa36f15fe 100644
--- a/src/data/runtime/RuntimeDataDescriber.php
+++ b/src/data/runtime/RuntimeDataDescriber.php
@@ -35,7 +35,7 @@ use pocketmine\math\Facing;
  * You may use it as a type for parameters and return values, but it should not be implemented outside of this package.
  * New methods may be added without warning.
  */
-interface RuntimeDataDescriber extends RuntimeEnumDescriber{
+interface RuntimeDataDescriber{
 	public function int(int $bits, int &$value) : void;
 
 	/**
@@ -89,10 +89,6 @@ interface RuntimeDataDescriber extends RuntimeEnumDescriber{
 
 	public function straightOnlyRailShape(int &$railShape) : void;
 
-	/**
-	 * @phpstan-template T of \UnitEnum
-	 * @phpstan-param T $case
-	 */
 	public function enum(\UnitEnum &$case) : void;
 
 	/**
diff --git a/src/data/runtime/RuntimeDataReader.php b/src/data/runtime/RuntimeDataReader.php
index 84239f411..1dd0c681b 100644
--- a/src/data/runtime/RuntimeDataReader.php
+++ b/src/data/runtime/RuntimeDataReader.php
@@ -35,8 +35,6 @@ use function log;
 use function spl_object_id;
 
 final class RuntimeDataReader implements RuntimeDataDescriber{
-	use LegacyRuntimeEnumDescriberTrait;
-
 	private int $offset = 0;
 
 	public function __construct(
diff --git a/src/data/runtime/RuntimeDataSizeCalculator.php b/src/data/runtime/RuntimeDataSizeCalculator.php
index 18c703cb8..1563e4886 100644
--- a/src/data/runtime/RuntimeDataSizeCalculator.php
+++ b/src/data/runtime/RuntimeDataSizeCalculator.php
@@ -29,8 +29,6 @@ use function count;
 use function log;
 
 final class RuntimeDataSizeCalculator implements RuntimeDataDescriber{
-	use LegacyRuntimeEnumDescriberTrait;
-
 	private int $bits = 0;
 
 	protected function addBits(int $bits) : void{
diff --git a/src/data/runtime/RuntimeDataWriter.php b/src/data/runtime/RuntimeDataWriter.php
index 0fbdd869f..a26c842cd 100644
--- a/src/data/runtime/RuntimeDataWriter.php
+++ b/src/data/runtime/RuntimeDataWriter.php
@@ -32,8 +32,6 @@ use function log;
 use function spl_object_id;
 
 final class RuntimeDataWriter implements RuntimeDataDescriber{
-	use LegacyRuntimeEnumDescriberTrait;
-
 	private int $value = 0;
 	private int $offset = 0;
 
diff --git a/src/data/runtime/RuntimeEnumDescriber.php b/src/data/runtime/RuntimeEnumDescriber.php
deleted file mode 100644
index 79550d041..000000000
--- a/src/data/runtime/RuntimeEnumDescriber.php
+++ /dev/null
@@ -1,61 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\data\runtime;
-
-/**
- * Provides backwards-compatible shims for the old codegen'd enum describer methods.
- * This is kept for plugin backwards compatibility, but these functions should not be used in new code.
- * @deprecated
- */
-interface RuntimeEnumDescriber{
-
-	public function bellAttachmentType(\pocketmine\block\utils\BellAttachmentType &$value) : void;
-
-	public function copperOxidation(\pocketmine\block\utils\CopperOxidation &$value) : void;
-
-	public function coralType(\pocketmine\block\utils\CoralType &$value) : void;
-
-	public function dirtType(\pocketmine\block\utils\DirtType &$value) : void;
-
-	public function dripleafState(\pocketmine\block\utils\DripleafState &$value) : void;
-
-	public function dyeColor(\pocketmine\block\utils\DyeColor &$value) : void;
-
-	public function froglightType(\pocketmine\block\utils\FroglightType &$value) : void;
-
-	public function leverFacing(\pocketmine\block\utils\LeverFacing &$value) : void;
-
-	public function medicineType(\pocketmine\item\MedicineType &$value) : void;
-
-	public function mobHeadType(\pocketmine\block\utils\MobHeadType &$value) : void;
-
-	public function mushroomBlockType(\pocketmine\block\utils\MushroomBlockType &$value) : void;
-
-	public function potionType(\pocketmine\item\PotionType &$value) : void;
-
-	public function slabType(\pocketmine\block\utils\SlabType &$value) : void;
-
-	public function suspiciousStewType(\pocketmine\item\SuspiciousStewType &$value) : void;
-
-}
diff --git a/src/entity/Entity.php b/src/entity/Entity.php
index d701e1823..8b327cd68 100644
--- a/src/entity/Entity.php
+++ b/src/entity/Entity.php
@@ -27,6 +27,7 @@ declare(strict_types=1);
 namespace pocketmine\entity;
 
 use pocketmine\block\Block;
+use pocketmine\block\BlockTypeIds;
 use pocketmine\block\Water;
 use pocketmine\entity\animation\Animation;
 use pocketmine\entity\animation\ItemAnimation;
@@ -637,6 +638,9 @@ abstract class Entity{
 
 		$changedProperties = $this->getDirtyNetworkData();
 		if(count($changedProperties) > 0){
+			if(isset($changedProperties[EntityMetadataProperties::FLAGS2]) && !isset($changedProperties[EntityMetadataProperties::FLAGS])){
+				$changedProperties[EntityMetadataProperties::FLAGS] = $this->networkProperties->getAll()[EntityMetadataProperties::FLAGS];
+			}
 			$this->sendData(null, $changedProperties);
 			$this->networkProperties->clearDirtyProperties();
 		}
@@ -648,7 +652,7 @@ abstract class Entity{
 		}
 		$this->checkBlockIntersectionsNextTick = true;
 
-		if($this->location->y <= 0 && $this->isAlive()){
+		if($this->location->y <= World::Y_MIN - 16 && $this->isAlive()){
 			$ev = new EntityDamageEvent($this, EntityDamageEvent::CAUSE_VOID, 10);
 			$this->attack($ev);
 			$hasUpdate = true;
@@ -1112,6 +1116,12 @@ abstract class Entity{
 
 	public function isUnderwater() : bool{
 		$block = $this->getWorld()->getBlockAt((int) floor($this->location->x), $blockY = (int) floor($y = ($this->location->y + $this->getEyeHeight())), (int) floor($this->location->z));
+		if(!($block instanceof Water)){
+			if($block->getTypeId() === BlockTypeIds::AIR){
+				return false;
+			}
+			$block = $block->getBlockLayer(1);
+		}
 
 		if($block instanceof Water){
 			$f = ($blockY + 1) - ($block->getFluidHeightPercent() - 0.1111111);
@@ -1272,6 +1282,17 @@ abstract class Entity{
 				}
 			}
 		}
+
+		for($z = $minZ; $z <= $maxZ; ++$z){
+			for($x = $minX; $x <= $maxX; ++$x){
+				for($y = $minY; $y <= $maxY; ++$y){
+					$block = $world->getBlockAtLayer($x, $y, $z, 1);
+					if($block->getTypeId() !== BlockTypeIds::AIR){
+						yield $block;
+					}
+				}
+			}
+		}
 	}
 
 	/**
@@ -1475,7 +1496,7 @@ abstract class Entity{
 		return $this->hasSpawned;
 	}
 
-	abstract public static function getNetworkTypeId() : string;
+	abstract public function getNetworkTypeId() : string;
 
 	/**
 	 * Called by spawnTo() to send whatever packets needed to spawn the entity to the client.
@@ -1484,7 +1505,7 @@ abstract class Entity{
 		$player->getNetworkSession()->sendDataPacket(AddActorPacket::create(
 			$this->getId(), //TODO: actor unique ID
 			$this->getId(),
-			static::getNetworkTypeId(),
+			$this->getNetworkTypeId(),
 			$this->location->asVector3(),
 			$this->getMotion(),
 			$this->location->pitch,
diff --git a/src/entity/Human.php b/src/entity/Human.php
index ab6d141e7..29a68cf10 100644
--- a/src/entity/Human.php
+++ b/src/entity/Human.php
@@ -98,7 +98,7 @@ class Human extends Living implements ProjectileSource, InventoryHolder{
 	private const TAG_SKIN_GEOMETRY_NAME = "GeometryName"; //TAG_String
 	private const TAG_SKIN_GEOMETRY_DATA = "GeometryData"; //TAG_ByteArray
 
-	public static function getNetworkTypeId() : string{ return EntityIds::PLAYER; }
+	public function getNetworkTypeId() : string{ return EntityIds::PLAYER; }
 
 	protected PlayerInventory $inventory;
 	protected PlayerOffHandInventory $offHandInventory;
diff --git a/src/entity/Living.php b/src/entity/Living.php
index 61aaab082..716cbd608 100644
--- a/src/entity/Living.php
+++ b/src/entity/Living.php
@@ -38,7 +38,6 @@ use pocketmine\event\entity\EntityDamageEvent;
 use pocketmine\event\entity\EntityDeathEvent;
 use pocketmine\inventory\ArmorInventory;
 use pocketmine\inventory\CallbackInventoryListener;
-use pocketmine\inventory\Inventory;
 use pocketmine\item\Armor;
 use pocketmine\item\Durable;
 use pocketmine\item\enchantment\Enchantment;
diff --git a/src/entity/Squid.php b/src/entity/Squid.php
index 75c50061b..bc47925f3 100644
--- a/src/entity/Squid.php
+++ b/src/entity/Squid.php
@@ -37,7 +37,7 @@ use const M_PI;
 
 class Squid extends WaterAnimal{
 
-	public static function getNetworkTypeId() : string{ return EntityIds::SQUID; }
+	public function getNetworkTypeId() : string{ return EntityIds::SQUID; }
 
 	public ?Vector3 $swimDirection = null;
 	public float $swimSpeed = 0.1;
diff --git a/src/entity/Villager.php b/src/entity/Villager.php
index 376401a5d..caca9a148 100644
--- a/src/entity/Villager.php
+++ b/src/entity/Villager.php
@@ -38,7 +38,7 @@ class Villager extends Living implements Ageable{
 
 	private const TAG_PROFESSION = "Profession"; //TAG_Int
 
-	public static function getNetworkTypeId() : string{ return EntityIds::VILLAGER; }
+	public function getNetworkTypeId() : string{ return EntityIds::VILLAGER; }
 
 	private bool $baby = false;
 	private int $profession = self::PROFESSION_FARMER;
diff --git a/src/entity/Zombie.php b/src/entity/Zombie.php
index 18fc2207e..16ca4c0b0 100644
--- a/src/entity/Zombie.php
+++ b/src/entity/Zombie.php
@@ -29,7 +29,7 @@ use function mt_rand;
 
 class Zombie extends Living{
 
-	public static function getNetworkTypeId() : string{ return EntityIds::ZOMBIE; }
+	public function getNetworkTypeId() : string{ return EntityIds::ZOMBIE; }
 
 	protected function getInitialSizeInfo() : EntitySizeInfo{
 		return new EntitySizeInfo(1.8, 0.6); //TODO: eye height ??
diff --git a/src/entity/object/ExperienceOrb.php b/src/entity/object/ExperienceOrb.php
index 5120da3e1..b72fda748 100644
--- a/src/entity/object/ExperienceOrb.php
+++ b/src/entity/object/ExperienceOrb.php
@@ -37,7 +37,7 @@ use function sqrt;
 
 class ExperienceOrb extends Entity{
 
-	public static function getNetworkTypeId() : string{ return EntityIds::XP_ORB; }
+	public function getNetworkTypeId() : string{ return EntityIds::XP_ORB; }
 
 	public const TAG_VALUE_PC = "Value"; //short
 	public const TAG_VALUE_PE = "experience value"; //int (WTF?)
diff --git a/src/entity/object/FallingBlock.php b/src/entity/object/FallingBlock.php
index 1056498fa..c43305b8e 100644
--- a/src/entity/object/FallingBlock.php
+++ b/src/entity/object/FallingBlock.php
@@ -26,6 +26,7 @@ namespace pocketmine\entity\object;
 use pocketmine\block\Block;
 use pocketmine\block\RuntimeBlockStateRegistry;
 use pocketmine\block\utils\Fallable;
+use pocketmine\block\Water;
 use pocketmine\data\bedrock\block\BlockStateDeserializeException;
 use pocketmine\data\SavedDataLoadingException;
 use pocketmine\entity\Entity;
@@ -39,9 +40,7 @@ use pocketmine\math\Vector3;
 use pocketmine\nbt\tag\ByteTag;
 use pocketmine\nbt\tag\CompoundTag;
 use pocketmine\nbt\tag\IntTag;
-use pocketmine\network\mcpe\convert\TypeConverter;
 use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
-use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataCollection;
 use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
 use pocketmine\player\Player;
 use pocketmine\world\format\io\GlobalBlockStateHandlers;
@@ -56,7 +55,7 @@ class FallingBlock extends Entity{
 	private const TAG_TILE = "Tile"; //TAG_Byte
 	private const TAG_DATA = "Data"; //TAG_Byte
 
-	public static function getNetworkTypeId() : string{ return EntityIds::FALLING_BLOCK; }
+	public function getNetworkTypeId() : string{ return EntityIds::FALLING_BLOCK; }
 
 	protected Block $block;
 
@@ -153,6 +152,9 @@ class FallingBlock extends Entity{
 					if(!$ev->isCancelled()){
 						$b = $ev->getTo();
 						$world->setBlock($pos, $b);
+						if($block instanceof Water && $b->canWaterlogged($block)){
+							$world->setBlockLayer($pos, $block, 1);
+						}
 						if($this->onGround && $b instanceof Fallable && ($sound = $b->getLandSound()) !== null){
 							$world->addSound($pos->add(0.5, 0.5, 0.5), $sound);
 						}
diff --git a/src/entity/object/FireworkRocket.php b/src/entity/object/FireworkRocket.php
index 1b26e42c3..8948e9d6e 100644
--- a/src/entity/object/FireworkRocket.php
+++ b/src/entity/object/FireworkRocket.php
@@ -48,7 +48,7 @@ use function sqrt;
 
 class FireworkRocket extends Entity implements Explosive{
 
-	public static function getNetworkTypeId() : string{ return EntityIds::FIREWORKS_ROCKET; }
+	public function getNetworkTypeId() : string{ return EntityIds::FIREWORKS_ROCKET; }
 
 	/* Maximum number of ticks this will live for. */
 	protected int $lifeTicks;
diff --git a/src/entity/object/ItemEntity.php b/src/entity/object/ItemEntity.php
index 90eeece67..43c495b6d 100644
--- a/src/entity/object/ItemEntity.php
+++ b/src/entity/object/ItemEntity.php
@@ -52,7 +52,7 @@ class ItemEntity extends Entity{
 	private const TAG_THROWER = "Thrower"; //TAG_String
 	public const TAG_ITEM = "Item"; //TAG_Compound
 
-	public static function getNetworkTypeId() : string{ return EntityIds::ITEM; }
+	public function getNetworkTypeId() : string{ return EntityIds::ITEM; }
 
 	public const MERGE_CHECK_PERIOD = 2; //0.1 seconds
 	public const DEFAULT_DESPAWN_DELAY = 6000; //5 minutes
diff --git a/src/entity/object/Painting.php b/src/entity/object/Painting.php
index f6449883c..5b5217e62 100644
--- a/src/entity/object/Painting.php
+++ b/src/entity/object/Painting.php
@@ -48,7 +48,7 @@ class Painting extends Entity{
 	public const TAG_DIRECTION_BE = "Direction"; //TAG_Byte
 	public const TAG_MOTIVE = "Motive"; //TAG_String
 
-	public static function getNetworkTypeId() : string{ return EntityIds::PAINTING; }
+	public function getNetworkTypeId() : string{ return EntityIds::PAINTING; }
 
 	public const DATA_TO_FACING = [
 		0 => Facing::SOUTH,
diff --git a/src/entity/object/PrimedTNT.php b/src/entity/object/PrimedTNT.php
index ec621adfb..d08b9f1bb 100644
--- a/src/entity/object/PrimedTNT.php
+++ b/src/entity/object/PrimedTNT.php
@@ -41,7 +41,7 @@ class PrimedTNT extends Entity implements Explosive{
 
 	private const TAG_FUSE = "Fuse"; //TAG_Short
 
-	public static function getNetworkTypeId() : string{ return EntityIds::TNT; }
+	public function getNetworkTypeId() : string{ return EntityIds::TNT; }
 
 	protected int $fuse;
 	protected bool $worksUnderwater = false;
diff --git a/src/entity/projectile/Arrow.php b/src/entity/projectile/Arrow.php
index 5a288ba72..81cd07663 100644
--- a/src/entity/projectile/Arrow.php
+++ b/src/entity/projectile/Arrow.php
@@ -46,7 +46,7 @@ use function sqrt;
 
 class Arrow extends Projectile{
 
-	public static function getNetworkTypeId() : string{ return EntityIds::ARROW; }
+	public function getNetworkTypeId() : string{ return EntityIds::ARROW; }
 
 	public const PICKUP_NONE = 0;
 	public const PICKUP_ANY = 1;
diff --git a/src/entity/projectile/Egg.php b/src/entity/projectile/Egg.php
index 9c3826714..1b2807f5f 100644
--- a/src/entity/projectile/Egg.php
+++ b/src/entity/projectile/Egg.php
@@ -29,7 +29,7 @@ use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
 use pocketmine\world\particle\ItemBreakParticle;
 
 class Egg extends Throwable{
-	public static function getNetworkTypeId() : string{ return EntityIds::EGG; }
+	public function getNetworkTypeId() : string{ return EntityIds::EGG; }
 
 	//TODO: spawn chickens on collision
 
diff --git a/src/entity/projectile/EnderPearl.php b/src/entity/projectile/EnderPearl.php
index 1f92ee8d9..3b69c5326 100644
--- a/src/entity/projectile/EnderPearl.php
+++ b/src/entity/projectile/EnderPearl.php
@@ -30,7 +30,7 @@ use pocketmine\world\particle\EndermanTeleportParticle;
 use pocketmine\world\sound\EndermanTeleportSound;
 
 class EnderPearl extends Throwable{
-	public static function getNetworkTypeId() : string{ return EntityIds::ENDER_PEARL; }
+	public function getNetworkTypeId() : string{ return EntityIds::ENDER_PEARL; }
 
 	protected function onHit(ProjectileHitEvent $event) : void{
 		$owner = $this->getOwningEntity();
diff --git a/src/entity/projectile/ExperienceBottle.php b/src/entity/projectile/ExperienceBottle.php
index ea8447a74..b30346880 100644
--- a/src/entity/projectile/ExperienceBottle.php
+++ b/src/entity/projectile/ExperienceBottle.php
@@ -30,7 +30,7 @@ use pocketmine\world\sound\PotionSplashSound;
 use function mt_rand;
 
 class ExperienceBottle extends Throwable{
-	public static function getNetworkTypeId() : string{ return EntityIds::XP_BOTTLE; }
+	public function getNetworkTypeId() : string{ return EntityIds::XP_BOTTLE; }
 
 	protected function getInitialGravity() : float{ return 0.07; }
 
diff --git a/src/entity/projectile/Snowball.php b/src/entity/projectile/Snowball.php
index 30a0ba6e2..2229f6c87 100644
--- a/src/entity/projectile/Snowball.php
+++ b/src/entity/projectile/Snowball.php
@@ -28,7 +28,7 @@ use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
 use pocketmine\world\particle\SnowballPoofParticle;
 
 class Snowball extends Throwable{
-	public static function getNetworkTypeId() : string{ return EntityIds::SNOWBALL; }
+	public function getNetworkTypeId() : string{ return EntityIds::SNOWBALL; }
 
 	protected function onHit(ProjectileHitEvent $event) : void{
 		$world = $this->getWorld();
diff --git a/src/entity/projectile/SplashPotion.php b/src/entity/projectile/SplashPotion.php
index f4635cad7..dd4f3d3b4 100644
--- a/src/entity/projectile/SplashPotion.php
+++ b/src/entity/projectile/SplashPotion.php
@@ -52,7 +52,7 @@ class SplashPotion extends Throwable{
 
 	public const TAG_POTION_ID = "PotionId"; //TAG_Short
 
-	public static function getNetworkTypeId() : string{ return EntityIds::SPLASH_POTION; }
+	public function getNetworkTypeId() : string{ return EntityIds::SPLASH_POTION; }
 
 	protected bool $linger = false;
 	protected PotionType $potionType;
diff --git a/src/event/HandlerList.php b/src/event/HandlerList.php
index 74eedf3a4..2072cd522 100644
--- a/src/event/HandlerList.php
+++ b/src/event/HandlerList.php
@@ -37,8 +37,7 @@ class HandlerList{
 	private array $affectedHandlerCaches = [];
 
 	/**
-	 * @phpstan-template TEvent of Event
-	 * @phpstan-param class-string<TEvent> $class
+	 * @phpstan-param class-string<covariant Event> $class
 	 */
 	public function __construct(
 		private string $class,
diff --git a/src/event/HandlerListManager.php b/src/event/HandlerListManager.php
index 047632f54..605a38747 100644
--- a/src/event/HandlerListManager.php
+++ b/src/event/HandlerListManager.php
@@ -86,8 +86,7 @@ class HandlerListManager{
 	 *
 	 * Calling this method also lazily initializes the $classMap inheritance tree of handler lists.
 	 *
-	 * @phpstan-template TEvent of Event
-	 * @phpstan-param class-string<TEvent> $event
+	 * @phpstan-param class-string<covariant Event> $event
 	 *
 	 * @throws \ReflectionException
 	 * @throws \InvalidArgumentException
@@ -113,8 +112,7 @@ class HandlerListManager{
 	}
 
 	/**
-	 * @phpstan-template TEvent of Event
-	 * @phpstan-param class-string<TEvent> $event
+	 * @phpstan-param class-string<covariant Event> $event
 	 *
 	 * @return RegisteredListener[]
 	 */
diff --git a/src/inventory/transaction/AnvilTransaction.php b/src/inventory/transaction/AnvilTransaction.php
index c818abc9c..050900bbf 100644
--- a/src/inventory/transaction/AnvilTransaction.php
+++ b/src/inventory/transaction/AnvilTransaction.php
@@ -28,7 +28,6 @@ use pocketmine\block\Block;
 use pocketmine\item\Durable;
 use pocketmine\item\EnchantedBook;
 use pocketmine\item\enchantment\AvailableEnchantmentRegistry;
-use pocketmine\item\enchantment\Enchantment;
 use pocketmine\item\enchantment\EnchantmentInstance;
 use pocketmine\item\enchantment\EnchantmentTransfer;
 use pocketmine\item\enchantment\IncompatibleEnchantMap;
@@ -37,8 +36,6 @@ use pocketmine\item\utils\ItemRepairUtils;
 use pocketmine\player\Player;
 use pocketmine\utils\Limits;
 use pocketmine\world\sound\AnvilUseSound;
-use function array_intersect;
-use function array_merge;
 use function count;
 use function floor;
 use function log;
@@ -216,19 +213,12 @@ class AnvilTransaction extends InventoryTransaction{
 	 */
 	public static function getApplicableEnchants(Item $target, Item $source) : array{
 		$applicableEnchants = [];
-
-		$availableEnchantRegistry = AvailableEnchantmentRegistry::getInstance();
-		$canEnchant = fn(Enchantment $enchantmentType) => (bool) count(
-			array_intersect($target->getEnchantmentTags(), array_merge(
-				$availableEnchantRegistry->getPrimaryItemTags($enchantmentType),
-				$availableEnchantRegistry->getSecondaryItemTags($enchantmentType)
-			))
-		);
+		$availableEnchantment = AvailableEnchantmentRegistry::getInstance();
 
 		foreach($source->getEnchantments() as $enchantment){
 			$enchantmentType = $enchantment->getType();
 			if(
-				!$canEnchant($enchantmentType) &&
+				!$availableEnchantment->isAvailableForItem($enchantmentType, $target) &&
 				!$target instanceof EnchantedBook // enchanted books let in any compatible
 			){
 				continue;
diff --git a/src/item/BoatType.php b/src/item/BoatType.php
index 518a1324e..6c257bf0e 100644
--- a/src/item/BoatType.php
+++ b/src/item/BoatType.php
@@ -24,23 +24,8 @@ declare(strict_types=1);
 namespace pocketmine\item;
 
 use pocketmine\block\utils\WoodType;
-use pocketmine\utils\LegacyEnumShimTrait;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static BoatType ACACIA()
- * @method static BoatType BIRCH()
- * @method static BoatType DARK_OAK()
- * @method static BoatType JUNGLE()
- * @method static BoatType MANGROVE()
- * @method static BoatType OAK()
- * @method static BoatType SPRUCE()
- */
 enum BoatType{
-	use LegacyEnumShimTrait;
-
 	case OAK;
 	case SPRUCE;
 	case BIRCH;
diff --git a/src/item/Bucket.php b/src/item/Bucket.php
index ee69a0a8a..b598530dd 100644
--- a/src/item/Bucket.php
+++ b/src/item/Bucket.php
@@ -39,11 +39,13 @@ class Bucket extends Item{
 
 	public function onInteractBlock(Player $player, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector, array &$returnedItems) : ItemUseResult{
 		//TODO: move this to generic placement logic
-		if($blockClicked instanceof Liquid && $blockClicked->isSource()){
+		$layer2 = $blockClicked->getBlockLayer(1);
+		$liquid = $blockClicked instanceof Liquid ? $blockClicked : ($layer2 instanceof Liquid ? $layer2 : null);
+		if($liquid instanceof Liquid && $liquid->isSource()){
 			$stack = clone $this;
 			$stack->pop();
 
-			$resultItem = match($blockClicked->getTypeId()){
+			$resultItem = match($liquid->getTypeId()){
 				BlockTypeIds::LAVA => VanillaItems::LAVA_BUCKET(),
 				BlockTypeIds::WATER => VanillaItems::WATER_BUCKET(),
 				default => null
@@ -55,8 +57,8 @@ class Bucket extends Item{
 			$ev = new PlayerBucketFillEvent($player, $blockReplace, $face, $this, $resultItem);
 			$ev->call();
 			if(!$ev->isCancelled()){
-				$player->getWorld()->setBlock($blockClicked->getPosition(), VanillaBlocks::AIR());
-				$player->getWorld()->addSound($blockClicked->getPosition()->add(0.5, 0.5, 0.5), $blockClicked->getBucketFillSound());
+				$player->getWorld()->setBlockLayer($liquid->getPosition(), VanillaBlocks::AIR(), $liquid->getLayer());
+				$player->getWorld()->addSound($liquid->getPosition()->add(0.5, 0.5, 0.5), $liquid->getBucketFillSound());
 
 				$this->pop();
 				$returnedItems[] = $ev->getItem();
diff --git a/src/item/FireworkRocketType.php b/src/item/FireworkRocketType.php
index 391bd3cce..922681085 100644
--- a/src/item/FireworkRocketType.php
+++ b/src/item/FireworkRocketType.php
@@ -23,14 +23,12 @@ declare(strict_types=1);
 
 namespace pocketmine\item;
 
-use pocketmine\utils\LegacyEnumShimTrait;
 use pocketmine\world\sound\FireworkExplosionSound;
 use pocketmine\world\sound\FireworkLargeExplosionSound;
 use pocketmine\world\sound\Sound;
 use function spl_object_id;
 
 enum FireworkRocketType{
-	use LegacyEnumShimTrait;
 
 	case SMALL_BALL;
 	case LARGE_BALL;
diff --git a/src/item/ItemTypeIds.php b/src/item/ItemTypeIds.php
index 91110b18f..9f71c98ba 100644
--- a/src/item/ItemTypeIds.php
+++ b/src/item/ItemTypeIds.php
@@ -328,9 +328,14 @@ final class ItemTypeIds{
 	public const CROSSBOW = 20289;
 	public const ELYTRA = 20290;
 	public const TRIDENT = 20291;
-	public const SHIELD = 20292;
+	public const CARROT_ON_A_STICK = 20292;
+	public const SHIELD = 20293;
+	public const LEATHER_HORSE_ARMOR = 20294;
+	public const IRON_HORSE_ARMOR = 20295;
+	public const GOLDEN_HORSE_ARMOR = 20296;
+	public const DIAMOND_HORSE_ARMOR = 20297;
 
-	public const FIRST_UNUSED_ITEM_ID = 20293;
+	public const FIRST_UNUSED_ITEM_ID = 20298;
 
 	private static int $nextDynamicId = self::FIRST_UNUSED_ITEM_ID;
 
diff --git a/src/item/ItemUseResult.php b/src/item/ItemUseResult.php
index e3fbe10fb..a7da91974 100644
--- a/src/item/ItemUseResult.php
+++ b/src/item/ItemUseResult.php
@@ -23,19 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\item;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static ItemUseResult FAIL()
- * @method static ItemUseResult NONE()
- * @method static ItemUseResult SUCCESS()
- */
 enum ItemUseResult{
-	use LegacyEnumShimTrait;
-
 	case NONE;
 	case FAIL;
 	case SUCCESS;
diff --git a/src/item/LiquidBucket.php b/src/item/LiquidBucket.php
index eb2cb18ed..d764ba598 100644
--- a/src/item/LiquidBucket.php
+++ b/src/item/LiquidBucket.php
@@ -29,6 +29,7 @@ use pocketmine\block\Liquid;
 use pocketmine\event\player\PlayerBucketEmptyEvent;
 use pocketmine\math\Vector3;
 use pocketmine\player\Player;
+use function in_array;
 
 class LiquidBucket extends Item{
 	private Liquid $liquid;
@@ -55,18 +56,28 @@ class LiquidBucket extends Item{
 	}
 
 	public function onInteractBlock(Player $player, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector, array &$returnedItems) : ItemUseResult{
-		if(!$blockReplace->canBeReplaced()){
+		//TODO: move this to generic placement logic
+		$resultBlock = clone $this->liquid;
+
+		$toReplace = $blockReplace->canWaterlogged($resultBlock) ? $blockReplace->getBlockLayer(1) : null;
+		$toReplace = $blockReplace->canBeReplaced() ? $blockReplace : $toReplace;
+		$toReplace = $blockClicked->canWaterlogged($resultBlock) ? $blockClicked->getBlockLayer(1) : $toReplace;
+		if($toReplace === null){
 			return ItemUseResult::NONE;
 		}
 
-		//TODO: move this to generic placement logic
-		$resultBlock = clone $this->liquid;
+		if(!$resultBlock->isLayerSupported(1)){
+			if(!$blockReplace->canBeReplaced()){
+				return ItemUseResult::NONE;
+			}
+			$toReplace = $blockReplace;
+		}
 
-		$ev = new PlayerBucketEmptyEvent($player, $blockReplace, $face, $this, VanillaItems::BUCKET());
+		$ev = new PlayerBucketEmptyEvent($player, $toReplace, $face, $this, VanillaItems::BUCKET());
 		$ev->call();
 		if(!$ev->isCancelled()){
-			$player->getWorld()->setBlock($blockReplace->getPosition(), $resultBlock->getFlowingForm());
-			$player->getWorld()->addSound($blockReplace->getPosition()->add(0.5, 0.5, 0.5), $resultBlock->getBucketEmptySound());
+			$player->getWorld()->setBlockLayer($toReplace->getPosition(), $resultBlock->getFlowingForm(), $toReplace->getLayer());
+			$player->getWorld()->addSound($toReplace->getPosition()->add(0.5, 0.5, 0.5), $resultBlock->getBucketEmptySound());
 
 			$this->pop();
 			$returnedItems[] = $ev->getItem();
diff --git a/src/item/MedicineType.php b/src/item/MedicineType.php
index ea99bb75d..8d40eb74f 100644
--- a/src/item/MedicineType.php
+++ b/src/item/MedicineType.php
@@ -25,20 +25,8 @@ namespace pocketmine\item;
 
 use pocketmine\entity\effect\Effect;
 use pocketmine\entity\effect\VanillaEffects;
-use pocketmine\utils\LegacyEnumShimTrait;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static MedicineType ANTIDOTE()
- * @method static MedicineType ELIXIR()
- * @method static MedicineType EYE_DROPS()
- * @method static MedicineType TONIC()
- */
 enum MedicineType{
-	use LegacyEnumShimTrait;
-
 	case ANTIDOTE;
 	case ELIXIR;
 	case EYE_DROPS;
diff --git a/src/item/PotionType.php b/src/item/PotionType.php
index 3f4773e6d..8200eb038 100644
--- a/src/item/PotionType.php
+++ b/src/item/PotionType.php
@@ -25,62 +25,12 @@ namespace pocketmine\item;
 
 use pocketmine\entity\effect\EffectInstance;
 use pocketmine\entity\effect\VanillaEffects;
-use pocketmine\utils\LegacyEnumShimTrait;
 use function spl_object_id;
 
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static PotionType AWKWARD()
- * @method static PotionType FIRE_RESISTANCE()
- * @method static PotionType HARMING()
- * @method static PotionType HEALING()
- * @method static PotionType INVISIBILITY()
- * @method static PotionType LEAPING()
- * @method static PotionType LONG_FIRE_RESISTANCE()
- * @method static PotionType LONG_INVISIBILITY()
- * @method static PotionType LONG_LEAPING()
- * @method static PotionType LONG_MUNDANE()
- * @method static PotionType LONG_NIGHT_VISION()
- * @method static PotionType LONG_POISON()
- * @method static PotionType LONG_REGENERATION()
- * @method static PotionType LONG_SLOWNESS()
- * @method static PotionType LONG_SLOW_FALLING()
- * @method static PotionType LONG_STRENGTH()
- * @method static PotionType LONG_SWIFTNESS()
- * @method static PotionType LONG_TURTLE_MASTER()
- * @method static PotionType LONG_WATER_BREATHING()
- * @method static PotionType LONG_WEAKNESS()
- * @method static PotionType MUNDANE()
- * @method static PotionType NIGHT_VISION()
- * @method static PotionType POISON()
- * @method static PotionType REGENERATION()
- * @method static PotionType SLOWNESS()
- * @method static PotionType SLOW_FALLING()
- * @method static PotionType STRENGTH()
- * @method static PotionType STRONG_HARMING()
- * @method static PotionType STRONG_HEALING()
- * @method static PotionType STRONG_LEAPING()
- * @method static PotionType STRONG_POISON()
- * @method static PotionType STRONG_REGENERATION()
- * @method static PotionType STRONG_SLOWNESS()
- * @method static PotionType STRONG_STRENGTH()
- * @method static PotionType STRONG_SWIFTNESS()
- * @method static PotionType STRONG_TURTLE_MASTER()
- * @method static PotionType SWIFTNESS()
- * @method static PotionType THICK()
- * @method static PotionType TURTLE_MASTER()
- * @method static PotionType WATER()
- * @method static PotionType WATER_BREATHING()
- * @method static PotionType WEAKNESS()
- * @method static PotionType WITHER()
- *
  * @phpstan-type TMetadata array{0: string, 1: \Closure() : list<EffectInstance>}
  */
 enum PotionType{
-	use LegacyEnumShimTrait;
-
 	case WATER;
 	case MUNDANE;
 	case LONG_MUNDANE;
diff --git a/src/item/SuspiciousStewType.php b/src/item/SuspiciousStewType.php
index d53b82a3f..52290a522 100644
--- a/src/item/SuspiciousStewType.php
+++ b/src/item/SuspiciousStewType.php
@@ -25,26 +25,8 @@ namespace pocketmine\item;
 
 use pocketmine\entity\effect\EffectInstance;
 use pocketmine\entity\effect\VanillaEffects;
-use pocketmine\utils\LegacyEnumShimTrait;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static SuspiciousStewType ALLIUM()
- * @method static SuspiciousStewType AZURE_BLUET()
- * @method static SuspiciousStewType BLUE_ORCHID()
- * @method static SuspiciousStewType CORNFLOWER()
- * @method static SuspiciousStewType DANDELION()
- * @method static SuspiciousStewType LILY_OF_THE_VALLEY()
- * @method static SuspiciousStewType OXEYE_DAISY()
- * @method static SuspiciousStewType POPPY()
- * @method static SuspiciousStewType TULIP()
- * @method static SuspiciousStewType WITHER_ROSE()
- */
 enum SuspiciousStewType{
-	use LegacyEnumShimTrait;
-
 	case POPPY;
 	case CORNFLOWER;
 	case TULIP;
diff --git a/src/item/ToolTier.php b/src/item/ToolTier.php
index 8469bc7e5..e9282eb13 100644
--- a/src/item/ToolTier.php
+++ b/src/item/ToolTier.php
@@ -23,24 +23,10 @@ declare(strict_types=1);
 
 namespace pocketmine\item;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static ToolTier DIAMOND()
- * @method static ToolTier GOLD()
- * @method static ToolTier IRON()
- * @method static ToolTier NETHERITE()
- * @method static ToolTier STONE()
- * @method static ToolTier WOOD()
- *
  * @phpstan-type TMetadata array{0: int, 1: int, 2: int, 3: int, 4: int}
  */
 enum ToolTier{
-	use LegacyEnumShimTrait;
-
 	case WOOD;
 	case GOLD;
 	case STONE;
diff --git a/src/item/enchantment/Enchantment.php b/src/item/enchantment/Enchantment.php
index 948f4648b..e8335d5f3 100644
--- a/src/item/enchantment/Enchantment.php
+++ b/src/item/enchantment/Enchantment.php
@@ -44,15 +44,11 @@ class Enchantment{
 	/**
 	 * @phpstan-param null|(\Closure(int $level) : int) $minEnchantingPower
 	 *
-	 * @param int $primaryItemFlags     @deprecated
-	 * @param int $secondaryItemFlags   @deprecated
 	 * @param int $enchantingPowerRange Value used to calculate the maximum enchanting power (minEnchantingPower + enchantingPowerRange)
 	 */
 	public function __construct(
 		private Translatable|string $name,
 		private int $rarity,
-		private int $primaryItemFlags,
-		private int $secondaryItemFlags,
 		private int $maxLevel,
 		?\Closure $minEnchantingPower = null,
 		private int $enchantingPowerRange = 50
@@ -79,47 +75,6 @@ class Enchantment{
 		return $this->rarity;
 	}
 
-	/**
-	 * Returns a bitset indicating what item types can have this item applied from an enchanting table.
-	 *
-	 * @deprecated
-	 * @see AvailableEnchantmentRegistry::getPrimaryItemTags()
-	 */
-	public function getPrimaryItemFlags() : int{
-		return $this->primaryItemFlags;
-	}
-
-	/**
-	 * Returns a bitset indicating what item types cannot have this item applied from an enchanting table, but can from
-	 * an anvil.
-	 *
-	 * @deprecated
-	 * @see AvailableEnchantmentRegistry::getSecondaryItemTags()
-	 */
-	public function getSecondaryItemFlags() : int{
-		return $this->secondaryItemFlags;
-	}
-
-	/**
-	 * Returns whether this enchantment can apply to the item type from an enchanting table.
-	 *
-	 * @deprecated
-	 * @see AvailableEnchantmentRegistry
-	 */
-	public function hasPrimaryItemType(int $flag) : bool{
-		return ($this->primaryItemFlags & $flag) !== 0;
-	}
-
-	/**
-	 * Returns whether this enchantment can apply to the item type from an anvil, if it is not a primary item.
-	 *
-	 * @deprecated
-	 * @see AvailableEnchantmentRegistry
-	 */
-	public function hasSecondaryItemType(int $flag) : bool{
-		return ($this->secondaryItemFlags & $flag) !== 0;
-	}
-
 	/**
 	 * Returns the maximum level of this enchantment that can be found on an enchantment table.
 	 */
diff --git a/src/item/enchantment/ItemFlags.php b/src/item/enchantment/ItemFlags.php
deleted file mode 100644
index 5e4ad4d7d..000000000
--- a/src/item/enchantment/ItemFlags.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\item\enchantment;
-
-/** @deprecated */
-final class ItemFlags{
-
-	private function __construct(){
-		//NOOP
-	}
-
-	public const NONE = 0x0;
-	public const ALL = 0xffff;
-	public const ARMOR = self::HEAD | self::TORSO | self::LEGS | self::FEET;
-	public const HEAD = 0x1;
-	public const TORSO = 0x2;
-	public const LEGS = 0x4;
-	public const FEET = 0x8;
-	public const SWORD = 0x10;
-	public const BOW = 0x20;
-	public const TOOL = self::HOE | self::SHEARS | self::FLINT_AND_STEEL;
-	public const HOE = 0x40;
-	public const SHEARS = 0x80;
-	public const FLINT_AND_STEEL = 0x100;
-	public const DIG = self::AXE | self::PICKAXE | self::SHOVEL;
-	public const AXE = 0x200;
-	public const PICKAXE = 0x400;
-	public const SHOVEL = 0x800;
-	public const FISHING_ROD = 0x1000;
-	public const CARROT_STICK = 0x2000;
-	public const ELYTRA = 0x4000;
-	public const TRIDENT = 0x8000;
-}
diff --git a/src/item/enchantment/ProtectionEnchantment.php b/src/item/enchantment/ProtectionEnchantment.php
index be78a2306..f7a117117 100644
--- a/src/item/enchantment/ProtectionEnchantment.php
+++ b/src/item/enchantment/ProtectionEnchantment.php
@@ -38,13 +38,11 @@ class ProtectionEnchantment extends Enchantment{
 	 *
 	 * @phpstan-param null|(\Closure(int $level) : int) $minEnchantingPower
 	 *
-	 * @param int        $primaryItemFlags      @deprecated
-	 * @param int        $secondaryItemFlags    @deprecated
 	 * @param int[]|null $applicableDamageTypes EntityDamageEvent::CAUSE_* constants which this enchantment type applies to, or null if it applies to all types of damage.
 	 * @param int        $enchantingPowerRange  Value used to calculate the maximum enchanting power (minEnchantingPower + enchantingPowerRange)
 	 */
-	public function __construct(Translatable|string $name, int $rarity, int $primaryItemFlags, int $secondaryItemFlags, int $maxLevel, float $typeModifier, ?array $applicableDamageTypes, ?\Closure $minEnchantingPower = null, int $enchantingPowerRange = 50){
-		parent::__construct($name, $rarity, $primaryItemFlags, $secondaryItemFlags, $maxLevel, $minEnchantingPower, $enchantingPowerRange);
+	public function __construct(Translatable|string $name, int $rarity, int $maxLevel, float $typeModifier, ?array $applicableDamageTypes, ?\Closure $minEnchantingPower = null, int $enchantingPowerRange = 50){
+		parent::__construct($name, $rarity, $maxLevel, $minEnchantingPower, $enchantingPowerRange);
 
 		$this->typeModifier = $typeModifier;
 		if($applicableDamageTypes !== null){
diff --git a/src/item/enchantment/VanillaEnchantments.php b/src/item/enchantment/VanillaEnchantments.php
index 779098c77..bfb9e3e92 100644
--- a/src/item/enchantment/VanillaEnchantments.php
+++ b/src/item/enchantment/VanillaEnchantments.php
@@ -62,8 +62,6 @@ final class VanillaEnchantments{
 		self::register("PROTECTION", new ProtectionEnchantment(
 			KnownTranslationFactory::enchantment_protect_all(),
 			Rarity::COMMON,
-			0,
-			0,
 			4,
 			0.75,
 			null,
@@ -73,8 +71,6 @@ final class VanillaEnchantments{
 		self::register("FIRE_PROTECTION", new ProtectionEnchantment(
 			KnownTranslationFactory::enchantment_protect_fire(),
 			Rarity::UNCOMMON,
-			0,
-			0,
 			4,
 			1.25,
 			[
@@ -89,8 +85,6 @@ final class VanillaEnchantments{
 		self::register("FEATHER_FALLING", new ProtectionEnchantment(
 			KnownTranslationFactory::enchantment_protect_fall(),
 			Rarity::UNCOMMON,
-			0,
-			0,
 			4,
 			2.5,
 			[
@@ -102,8 +96,6 @@ final class VanillaEnchantments{
 		self::register("BLAST_PROTECTION", new ProtectionEnchantment(
 			KnownTranslationFactory::enchantment_protect_explosion(),
 			Rarity::RARE,
-			0,
-			0,
 			4,
 			1.5,
 			[
@@ -116,8 +108,6 @@ final class VanillaEnchantments{
 		self::register("PROJECTILE_PROTECTION", new ProtectionEnchantment(
 			KnownTranslationFactory::enchantment_protect_projectile(),
 			Rarity::UNCOMMON,
-			0,
-			0,
 			4,
 			1.5,
 			[
@@ -129,8 +119,6 @@ final class VanillaEnchantments{
 		self::register("THORNS", new Enchantment(
 			KnownTranslationFactory::enchantment_thorns(),
 			Rarity::MYTHIC,
-			0,
-			0,
 			3,
 			fn(int $level) : int => 20 * ($level - 1) + 10,
 			50
@@ -138,8 +126,6 @@ final class VanillaEnchantments{
 		self::register("RESPIRATION", new Enchantment(
 			KnownTranslationFactory::enchantment_oxygen(),
 			Rarity::RARE,
-			0,
-			0,
 			3,
 			fn(int $level) : int => 10 * $level,
 			30
@@ -148,8 +134,6 @@ final class VanillaEnchantments{
 		self::register("SHARPNESS", new SharpnessEnchantment(
 			KnownTranslationFactory::enchantment_damage_all(),
 			Rarity::COMMON,
-			0,
-			0,
 			5,
 			fn(int $level) : int => 11 * ($level - 1) + 1,
 			20
@@ -157,8 +141,6 @@ final class VanillaEnchantments{
 		self::register("KNOCKBACK", new KnockbackEnchantment(
 			KnownTranslationFactory::enchantment_knockback(),
 			Rarity::UNCOMMON,
-			0,
-			0,
 			2,
 			fn(int $level) : int => 20 * ($level - 1) + 5,
 			50
@@ -166,8 +148,6 @@ final class VanillaEnchantments{
 		self::register("FIRE_ASPECT", new FireAspectEnchantment(
 			KnownTranslationFactory::enchantment_fire(),
 			Rarity::RARE,
-			0,
-			0,
 			2,
 			fn(int $level) : int => 20 * ($level - 1) + 10,
 			50
@@ -177,8 +157,6 @@ final class VanillaEnchantments{
 		self::register("EFFICIENCY", new Enchantment(
 			KnownTranslationFactory::enchantment_digging(),
 			Rarity::COMMON,
-			0,
-			0,
 			5,
 			fn(int $level) : int => 10 * ($level - 1) + 1,
 			50
@@ -186,8 +164,6 @@ final class VanillaEnchantments{
 		self::register("FORTUNE", new Enchantment(
 			KnownTranslationFactory::enchantment_lootBonusDigger(),
 			Rarity::RARE,
-			0,
-			0,
 			3,
 			fn(int $level) : int => 9 * ($level - 1) + 15,
 			50
@@ -195,8 +171,6 @@ final class VanillaEnchantments{
 		self::register("SILK_TOUCH", new Enchantment(
 			KnownTranslationFactory::enchantment_untouching(),
 			Rarity::MYTHIC,
-			0,
-			0,
 			1,
 			fn(int $level) : int => 15,
 			50
@@ -204,8 +178,6 @@ final class VanillaEnchantments{
 		self::register("UNBREAKING", new Enchantment(
 			KnownTranslationFactory::enchantment_durability(),
 			Rarity::UNCOMMON,
-			0,
-			0,
 			3,
 			fn(int $level) : int => 8 * ($level - 1) + 5,
 			50
@@ -214,8 +186,6 @@ final class VanillaEnchantments{
 		self::register("POWER", new Enchantment(
 			KnownTranslationFactory::enchantment_arrowDamage(),
 			Rarity::COMMON,
-			0,
-			0,
 			5,
 			fn(int $level) : int => 10 * ($level - 1) + 1,
 			15
@@ -223,8 +193,6 @@ final class VanillaEnchantments{
 		self::register("PUNCH", new Enchantment(
 			KnownTranslationFactory::enchantment_arrowKnockback(),
 			Rarity::RARE,
-			0,
-			0,
 			2,
 			fn(int $level) : int => 20 * ($level - 1) + 12,
 			25
@@ -232,8 +200,6 @@ final class VanillaEnchantments{
 		self::register("FLAME", new Enchantment(
 			KnownTranslationFactory::enchantment_arrowFire(),
 			Rarity::RARE,
-			0,
-			0,
 			1,
 			fn(int $level) : int => 20,
 			30
@@ -241,8 +207,6 @@ final class VanillaEnchantments{
 		self::register("INFINITY", new Enchantment(
 			KnownTranslationFactory::enchantment_arrowInfinite(),
 			Rarity::MYTHIC,
-			0,
-			0,
 			1,
 			fn(int $level) : int => 20,
 			30
@@ -251,8 +215,6 @@ final class VanillaEnchantments{
 		self::register("MENDING", new Enchantment(
 			KnownTranslationFactory::enchantment_mending(),
 			Rarity::RARE,
-			0,
-			0,
 			1,
 			fn(int $level) : int => 25,
 			50
@@ -261,8 +223,6 @@ final class VanillaEnchantments{
 		self::register("VANISHING", new Enchantment(
 			KnownTranslationFactory::enchantment_curse_vanishing(),
 			Rarity::MYTHIC,
-			0,
-			0,
 			1,
 			fn(int $level) : int => 25,
 			25
@@ -271,8 +231,6 @@ final class VanillaEnchantments{
 		self::register("SWIFT_SNEAK", new Enchantment(
 			KnownTranslationFactory::enchantment_swift_sneak(),
 			Rarity::MYTHIC,
-			0,
-			0,
 			3,
 			fn(int $level) : int => 10 * $level,
 			5
diff --git a/src/network/mcpe/auth/ProcessLoginTask.php b/src/network/mcpe/auth/ProcessLoginTask.php
index 607b75c89..3bd8d62b8 100644
--- a/src/network/mcpe/auth/ProcessLoginTask.php
+++ b/src/network/mcpe/auth/ProcessLoginTask.php
@@ -39,16 +39,6 @@ use function time;
 class ProcessLoginTask extends AsyncTask{
 	private const TLS_KEY_ON_COMPLETION = "completion";
 
-	/**
-	 * Old Mojang root auth key. This was used since the introduction of Xbox Live authentication in 0.15.0.
-	 * This key is expected to be replaced by the key below in the future, but this has not yet happened as of
-	 * 2023-07-01.
-	 * Ideally we would place a time expiry on this key, but since Mojang have not given a hard date for the key change,
-	 * and one bad guess has already caused a major outage, we can't do this.
-	 * TODO: This needs to be removed as soon as the new key is deployed by Mojang's authentication servers.
-	 */
-	public const MOJANG_OLD_ROOT_PUBLIC_KEY = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE8ELkixyLcwlZryUQcu1TvPOmI2B7vX83ndnWRUaXm74wFfa5f/lwQNTfrLVHa2PmenpGI6JhIMUJaWZrjmMj90NoKNFSNBuKdm8rYiXsfaz3K36x/1U26HpG0ZxK/V1V";
-
 	/**
 	 * New Mojang root auth key. Mojang notified third-party developers of this change prior to the release of 1.20.0.
 	 * Expectations were that this would be used starting a "couple of weeks" after the release, but as of 2023-07-01,
@@ -128,7 +118,6 @@ class ProcessLoginTask extends AsyncTask{
 		try{
 			[$headersArray, $claimsArray, ] = JwtUtils::parse($jwt);
 		}catch(JwtException $e){
-			//TODO: we shouldn't be showing internal information like this to the client
 			throw new VerifyLoginException("Failed to parse JWT: " . $e->getMessage(), null, 0, $e);
 		}
 
@@ -141,13 +130,11 @@ class ProcessLoginTask extends AsyncTask{
 			/** @var JwtHeader $headers */
 			$headers = $mapper->map($headersArray, new JwtHeader());
 		}catch(\JsonMapper_Exception $e){
-			//TODO: we shouldn't be showing internal information like this to the client
 			throw new VerifyLoginException("Invalid JWT header: " . $e->getMessage(), null, 0, $e);
 		}
 
 		$headerDerKey = base64_decode($headers->x5u, true);
 		if($headerDerKey === false){
-			//TODO: we shouldn't be showing internal information like this to the client
 			throw new VerifyLoginException("Invalid JWT public key: base64 decoding error decoding x5u");
 		}
 
@@ -163,7 +150,6 @@ class ProcessLoginTask extends AsyncTask{
 		try{
 			$signingKeyOpenSSL = JwtUtils::parseDerPublicKey($headerDerKey);
 		}catch(JwtException $e){
-			//TODO: we shouldn't be showing this internal information to the client
 			throw new VerifyLoginException("Invalid JWT public key: " . $e->getMessage(), null, 0, $e);
 		}
 		try{
@@ -174,7 +160,7 @@ class ProcessLoginTask extends AsyncTask{
 			throw new VerifyLoginException($e->getMessage(), null, 0, $e);
 		}
 
-		if($headers->x5u === self::MOJANG_ROOT_PUBLIC_KEY || $headers->x5u === self::MOJANG_OLD_ROOT_PUBLIC_KEY){
+		if($headers->x5u === self::MOJANG_ROOT_PUBLIC_KEY){
 			$this->authenticated = true; //we're signed into xbox live
 		}
 
diff --git a/src/network/mcpe/cache/ChunkCache.php b/src/network/mcpe/cache/ChunkCache.php
index 0e7a19c68..37e4a5161 100644
--- a/src/network/mcpe/cache/ChunkCache.php
+++ b/src/network/mcpe/cache/ChunkCache.php
@@ -125,7 +125,7 @@ class ChunkCache implements ChunkListener{
 					$chunk,
 					$typeConverter,
 					$this->caches[$chunkHash][$protocolId],
-					$this->compressor,
+					$this->compressor
 				)
 			);
 
diff --git a/src/network/mcpe/convert/ItemTranslator.php b/src/network/mcpe/convert/ItemTranslator.php
index f40780972..029595fcb 100644
--- a/src/network/mcpe/convert/ItemTranslator.php
+++ b/src/network/mcpe/convert/ItemTranslator.php
@@ -75,9 +75,9 @@ final class ItemTranslator{
 
 		$itemData = $this->itemSerializer->serializeType($item, $this->itemDataDowngrader);
 
-		try {
+		try{
 			$numericId = $this->itemTypeDictionary->fromStringId($itemData->getName());
-		} catch (\InvalidArgumentException) {
+		}catch(\InvalidArgumentException){
 			throw new ItemTypeSerializeException("Unknown item type " . $itemData->getName());
 		}
 
diff --git a/src/network/mcpe/handler/InGamePacketHandler.php b/src/network/mcpe/handler/InGamePacketHandler.php
index 870d8acb8..3763481c4 100644
--- a/src/network/mcpe/handler/InGamePacketHandler.php
+++ b/src/network/mcpe/handler/InGamePacketHandler.php
@@ -530,15 +530,19 @@ class InGamePacketHandler extends ChunkRequestPacketHandler{
 	private function onFailedBlockAction(Vector3 $blockPos, ?int $face) : void{
 		if($blockPos->distanceSquared($this->player->getLocation()) < 10000){
 			$blocks = $blockPos->sidesArray();
+			$world = $this->player->getWorld();
+			$typeConverter = $this->session->getTypeConverter();
 			if($face !== null){
 				$sidePos = $blockPos->getSide($face);
 
 				/** @var Vector3[] $blocks */
 				array_push($blocks, ...$sidePos->sidesArray()); //getAllSides() on each of these will include $blockPos and $sidePos because they are next to each other
 			}else{
-				$blocks[] = $blockPos;
+				foreach($world->createBlockUpdatePackets($typeConverter, [$blockPos], true) as $packet){
+					$this->session->sendDataPacket($packet);
+				}
 			}
-			foreach($this->player->getWorld()->createBlockUpdatePackets($this->session->getTypeConverter(), $blocks) as $packet){
+			foreach($world->createBlockUpdatePackets($typeConverter, $blocks) as $packet){
 				$this->session->sendDataPacket($packet);
 			}
 		}
@@ -753,7 +757,6 @@ class InGamePacketHandler extends ChunkRequestPacketHandler{
 				throw new PacketHandlingException("Invalid tag type " . get_debug_type($frontTextTag) . " for tag \"" . Sign::TAG_FRONT_TEXT . "\" in sign update data");
 			}
 			$textBlobTag = $frontTextTag->getTag(Sign::TAG_TEXT_BLOB);
-
 			if(!$textBlobTag instanceof StringTag){
 				throw new PacketHandlingException("Invalid tag type " . get_debug_type($textBlobTag) . " for tag \"" . Sign::TAG_TEXT_BLOB . "\" in sign update data");
 			}
diff --git a/src/network/mcpe/handler/ItemStackRequestExecutor.php b/src/network/mcpe/handler/ItemStackRequestExecutor.php
index 4fb93da47..a63f5f348 100644
--- a/src/network/mcpe/handler/ItemStackRequestExecutor.php
+++ b/src/network/mcpe/handler/ItemStackRequestExecutor.php
@@ -223,17 +223,10 @@ class ItemStackRequestExecutor{
 	/**
 	 * @throws ItemStackRequestProcessException
 	 */
-	private function assertFirstSpecialTransaction() : void{
+	protected function beginCrafting(int $recipeId, int $repetitions) : void{
 		if($this->specialTransaction !== null){
 			throw new ItemStackRequestProcessException("Another special transaction is already in progress");
 		}
-	}
-
-	/**
-	 * @throws ItemStackRequestProcessException
-	 */
-	protected function beginCrafting(int $recipeId, int $repetitions) : void{
-		$this->assertFirstSpecialTransaction();
 		if($repetitions < 1){
 			throw new ItemStackRequestProcessException("Cannot craft a recipe less than 1 time");
 		}
@@ -266,27 +259,6 @@ class ItemStackRequestExecutor{
 		}
 	}
 
-	/**
-	 * @throws ItemStackRequestProcessException
-	 */
-	protected function beginAnvilTransaction(?string $rename) : void{
-		$this->assertFirstSpecialTransaction();
-
-		$currentWindow = $this->player->getCurrentWindow();
-		if(!$currentWindow instanceof AnvilInventory){
-			throw new ItemStackRequestProcessException("Player's current window is not an anvil inventory");
-		}
-
-		$this->specialTransaction = new AnvilTransaction(
-			$this->player,
-			$this->player->getWorld()->getBlock($currentWindow->getHolder()),
-			clone $currentWindow->getItem(0),
-			clone $currentWindow->getItem(1),
-			$rename, []
-		);
-		$this->setNextCreatedItem($this->specialTransaction->getResult());
-	}
-
 	/**
 	 * @throws ItemStackRequestProcessException
 	 */
@@ -320,7 +292,7 @@ class ItemStackRequestExecutor{
 	 * @throws ItemStackRequestProcessException
 	 */
 	private function assertDoingCrafting() : void{
-		if(!$this->specialTransaction instanceof CraftingTransaction && !$this->specialTransaction instanceof EnchantingTransaction){
+		if(!$this->specialTransaction instanceof CraftingTransaction && !$this->specialTransaction instanceof EnchantingTransaction && !$this->specialTransaction instanceof AnvilTransaction){
 			if($this->specialTransaction === null){
 				throw new ItemStackRequestProcessException("Expected CraftRecipe or CraftRecipeAuto action to precede this action");
 			}else{
@@ -379,14 +351,24 @@ class ItemStackRequestExecutor{
 		}elseif($action instanceof CraftRecipeAutoStackRequestAction){
 			$this->beginCrafting($action->getRecipeId(), $action->getRepetitions());
 		}elseif($action instanceof CraftRecipeOptionalStackRequestAction){
-			$filterStrings = $this->request->getFilterStrings();
-			$filterStringIndex = $action->getFilterStringIndex();
-			$this->beginAnvilTransaction($filterStringIndex >= 0 ? ($filterStrings[$filterStringIndex] ?? null) : null);
-		}elseif($action instanceof CraftingConsumeInputStackRequestAction){
-			if(!$this->specialTransaction instanceof AnvilTransaction){
-				$this->assertDoingCrafting();
+			$window = $this->player->getCurrentWindow();
+			if($window instanceof AnvilInventory){
+				$filterStrings = $this->request->getFilterStrings();
+				$filterStringIndex = $action->getFilterStringIndex();
+
+				$this->specialTransaction = new AnvilTransaction(
+					$this->player,
+					$this->player->getWorld()->getBlock($window->getHolder()),
+					$window->getItem(AnvilInventory::SLOT_INPUT),
+					$window->getItem(AnvilInventory::SLOT_MATERIAL),
+					$filterStringIndex >= 0 ? ($filterStrings[$filterStringIndex] ?? null) : null, []
+				);
+				$this->setNextCreatedItem($this->specialTransaction->getResult());
 			}
-			$this->removeItemFromSlot($action->getSource(), $action->getCount()); //output discarded - we allow the transaction to verify the balance
+		}elseif($action instanceof CraftingConsumeInputStackRequestAction){
+			$this->assertDoingCrafting();
+			$this->removeItemFromSlot($action->getSource(), $action->getCount()); //output discarded - we allow CraftingTransaction to verify the balance
+
 		}elseif($action instanceof CraftingCreateSpecificResultStackRequestAction){
 			$this->assertDoingCrafting();
 
diff --git a/src/network/mcpe/serializer/ChunkSerializer.php b/src/network/mcpe/serializer/ChunkSerializer.php
index 905cb1a8f..fcc56a56f 100644
--- a/src/network/mcpe/serializer/ChunkSerializer.php
+++ b/src/network/mcpe/serializer/ChunkSerializer.php
@@ -29,6 +29,7 @@ use pocketmine\data\bedrock\LegacyBiomeIdToStringIdMap;
 use pocketmine\nbt\TreeRoot;
 use pocketmine\network\mcpe\convert\BlockTranslator;
 use pocketmine\network\mcpe\convert\TypeConverter;
+use pocketmine\network\mcpe\protocol\ProtocolInfo;
 use pocketmine\network\mcpe\protocol\serializer\NetworkNbtSerializer;
 use pocketmine\network\mcpe\protocol\serializer\PacketSerializer;
 use pocketmine\network\mcpe\protocol\serializer\PacketSerializerContext;
@@ -155,6 +156,8 @@ final class ChunkSerializer{
 
 		$blockStateDictionary = $blockTranslator->getBlockStateDictionary();
 
+		$p_1_20_40 = $stream->getProtocolId() === ProtocolInfo::PROTOCOL_1_20_40;
+		$states = $p_1_20_40 ? $blockStateDictionary->getStates() : [];
 		foreach($layers as $blocks){
 			$bitsPerBlock = $blocks->getBitsPerBlock();
 			$words = $blocks->getWordArray();
@@ -181,7 +184,15 @@ final class ChunkSerializer{
 				}
 			}else{
 				foreach($palette as $p){
-					$stream->put(Binary::writeUnsignedVarInt($blockTranslator->internalIdToNetworkId($p) << 1));
+					$networkId = $blockTranslator->internalIdToNetworkId($p);
+					if($p_1_20_40){
+						$name = $states[$networkId]->getStateName();
+						//TODO: these blocks is known to cause crashes on 1.20.40 clients if they are sent in LevelChunk packet
+						if($name === "minecraft:chiseled_bookshelf" || $name === "minecraft:dispenser" || $name === "minecraft:dropper"){
+							$networkId = $blockStateDictionary->lookupStateIdFromData($blockTranslator->getFallbackStateData());
+						}
+					}
+					$stream->put(Binary::writeUnsignedVarInt($networkId << 1));
 				}
 			}
 		}
diff --git a/src/player/GameMode.php b/src/player/GameMode.php
index 519cbbe8a..cff399376 100644
--- a/src/player/GameMode.php
+++ b/src/player/GameMode.php
@@ -25,24 +25,13 @@ namespace pocketmine\player;
 
 use pocketmine\lang\KnownTranslationFactory;
 use pocketmine\lang\Translatable;
-use pocketmine\utils\LegacyEnumShimTrait;
 use function mb_strtolower;
 use function spl_object_id;
 
 /**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static GameMode ADVENTURE()
- * @method static GameMode CREATIVE()
- * @method static GameMode SPECTATOR()
- * @method static GameMode SURVIVAL()
- *
  * @phpstan-type TMetadata array{0: string, 1: Translatable, 2: list<string>}
  */
 enum GameMode{
-	use LegacyEnumShimTrait;
-
 	case SURVIVAL;
 	case CREATIVE;
 	case ADVENTURE;
diff --git a/src/player/IPlayer.php b/src/player/IPlayer.php
index 36ab253a4..b749d7410 100644
--- a/src/player/IPlayer.php
+++ b/src/player/IPlayer.php
@@ -23,13 +23,15 @@ declare(strict_types=1);
 
 namespace pocketmine\player;
 
+use DateTimeImmutable;
+
 interface IPlayer{
 
 	public function getName() : string;
 
-	public function getFirstPlayed() : ?int;
+	public function getFirstPlayed() : ?DateTimeImmutable;
 
-	public function getLastPlayed() : ?int;
+	public function getLastPlayed() : ?DateTimeImmutable;
 
 	public function hasPlayedBefore() : bool;
 
diff --git a/src/player/OfflinePlayer.php b/src/player/OfflinePlayer.php
index 0b08cf948..7a4192897 100644
--- a/src/player/OfflinePlayer.php
+++ b/src/player/OfflinePlayer.php
@@ -23,6 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\player;
 
+use DateTimeImmutable;
 use pocketmine\nbt\tag\CompoundTag;
 use pocketmine\nbt\tag\LongTag;
 
@@ -36,12 +37,12 @@ class OfflinePlayer implements IPlayer{
 		return $this->name;
 	}
 
-	public function getFirstPlayed() : ?int{
-		return ($this->namedtag !== null && ($firstPlayedTag = $this->namedtag->getTag(Player::TAG_FIRST_PLAYED)) instanceof LongTag) ? $firstPlayedTag->getValue() : null;
+	public function getFirstPlayed() : ?DateTimeImmutable{
+		return ($this->namedtag !== null && ($firstPlayedTag = $this->namedtag->getTag(Player::TAG_FIRST_PLAYED)) instanceof LongTag) ? new DateTimeImmutable('@' . $firstPlayedTag->getValue() / 1000) : null;
 	}
 
-	public function getLastPlayed() : ?int{
-		return ($this->namedtag !== null && ($lastPlayedTag = $this->namedtag->getTag(Player::TAG_LAST_PLAYED)) instanceof LongTag) ? $lastPlayedTag->getValue() : null;
+	public function getLastPlayed() : ?DateTimeImmutable{
+		return ($this->namedtag !== null && ($lastPlayedTag = $this->namedtag->getTag(Player::TAG_LAST_PLAYED)) instanceof LongTag) ? new DateTimeImmutable('@' . $lastPlayedTag->getValue() / 1000) : null;
 	}
 
 	public function hasPlayedBefore() : bool{
diff --git a/src/player/Player.php b/src/player/Player.php
index 272e928c9..edd8ce358 100644
--- a/src/player/Player.php
+++ b/src/player/Player.php
@@ -23,6 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\player;
 
+use DateTimeImmutable;
 use pocketmine\block\BaseSign;
 use pocketmine\block\Bed;
 use pocketmine\block\BlockTypeTags;
@@ -225,8 +226,8 @@ class Player extends Human implements CommandSender, ChunkListener, IPlayer{
 
 	protected int $messageCounter = 2;
 
-	protected int $firstPlayed;
-	protected int $lastPlayed;
+	protected DateTimeImmutable $firstPlayed;
+	protected DateTimeImmutable $lastPlayed;
 	protected GameMode $gamemode;
 
 	/**
@@ -368,8 +369,12 @@ class Player extends Human implements CommandSender, ChunkListener, IPlayer{
 			}
 		));
 
-		$this->firstPlayed = $nbt->getLong(self::TAG_FIRST_PLAYED, $now = (int) (microtime(true) * 1000));
-		$this->lastPlayed = $nbt->getLong(self::TAG_LAST_PLAYED, $now);
+		$now = (int) (microtime(true) * 1000);
+		$createDateTimeImmutable = static function(string $tag) use ($nbt, $now) : DateTimeImmutable{
+			return new DateTimeImmutable('@' . $nbt->getLong($tag, $now) / 1000);
+		};
+		$this->firstPlayed = $createDateTimeImmutable(self::TAG_FIRST_PLAYED);
+		$this->lastPlayed = $createDateTimeImmutable(self::TAG_LAST_PLAYED);
 
 		if(!$this->server->getForceGamemode() && ($gameModeTag = $nbt->getTag(self::TAG_GAME_MODE)) instanceof IntTag){
 			$this->internalSetGameMode(GameModeIdMap::getInstance()->fromId($gameModeTag->getValue()) ?? GameMode::SURVIVAL); //TODO: bad hack here to avoid crashes on corrupted data
@@ -428,19 +433,19 @@ class Player extends Human implements CommandSender, ChunkListener, IPlayer{
 	/**
 	 * TODO: not sure this should be nullable
 	 */
-	public function getFirstPlayed() : ?int{
+	public function getFirstPlayed() : ?DateTimeImmutable{
 		return $this->firstPlayed;
 	}
 
 	/**
 	 * TODO: not sure this should be nullable
 	 */
-	public function getLastPlayed() : ?int{
+	public function getLastPlayed() : ?DateTimeImmutable{
 		return $this->lastPlayed;
 	}
 
 	public function hasPlayedBefore() : bool{
-		return $this->lastPlayed - $this->firstPlayed > 1; // microtime(true) - microtime(true) may have less than one millisecond difference
+		return ((int) $this->firstPlayed->diff($this->lastPlayed)->format('%s')) > 1;
 	}
 
 	/**
@@ -2330,7 +2335,7 @@ class Player extends Human implements CommandSender, ChunkListener, IPlayer{
 		}
 
 		$nbt->setInt(self::TAG_GAME_MODE, GameModeIdMap::getInstance()->toId($this->gamemode));
-		$nbt->setLong(self::TAG_FIRST_PLAYED, $this->firstPlayed);
+		$nbt->setLong(self::TAG_FIRST_PLAYED, (int) $this->firstPlayed->format('Uv'));
 		$nbt->setLong(self::TAG_LAST_PLAYED, (int) floor(microtime(true) * 1000));
 
 		return $nbt;
diff --git a/src/player/UsedChunkStatus.php b/src/player/UsedChunkStatus.php
index dda41fe7e..ad80fe084 100644
--- a/src/player/UsedChunkStatus.php
+++ b/src/player/UsedChunkStatus.php
@@ -23,20 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\player;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static UsedChunkStatus NEEDED()
- * @method static UsedChunkStatus REQUESTED_GENERATION()
- * @method static UsedChunkStatus REQUESTED_SENDING()
- * @method static UsedChunkStatus SENT()
- */
 enum UsedChunkStatus{
-	use LegacyEnumShimTrait;
-
 	case NEEDED;
 	case REQUESTED_GENERATION;
 	case REQUESTED_SENDING;
diff --git a/src/plugin/DiskResourceProvider.php b/src/plugin/DiskResourceProvider.php
deleted file mode 100644
index efdc9cd17..000000000
--- a/src/plugin/DiskResourceProvider.php
+++ /dev/null
@@ -1,83 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\plugin;
-
-use pocketmine\utils\AssumptionFailedError;
-use function file_exists;
-use function fopen;
-use function is_dir;
-use function rtrim;
-use function str_replace;
-use function strlen;
-use function substr;
-use const DIRECTORY_SEPARATOR;
-
-/**
- * Provides resources from the given plugin directory on disk. The path may be prefixed with a specific access protocol
- * to enable special types of access.
- */
-class DiskResourceProvider implements ResourceProvider{
-	private string $file;
-
-	public function __construct(string $path){
-		$this->file = rtrim(str_replace(DIRECTORY_SEPARATOR, "/", $path), "/") . "/";
-	}
-
-	/**
-	 * Gets an embedded resource on the plugin file.
-	 * WARNING: You must close the resource given using fclose()
-	 *
-	 * @return null|resource Resource data, or null
-	 */
-	public function getResource(string $filename){
-		$filename = rtrim(str_replace(DIRECTORY_SEPARATOR, "/", $filename), "/");
-		if(file_exists($this->file . $filename)){
-			$resource = fopen($this->file . $filename, "rb");
-			if($resource === false) throw new AssumptionFailedError("fopen() should not fail on a file which exists");
-			return $resource;
-		}
-
-		return null;
-	}
-
-	/**
-	 * Returns all the resources packaged with the plugin in the form ["path/in/resources" => SplFileInfo]
-	 *
-	 * @return \SplFileInfo[]
-	 */
-	public function getResources() : array{
-		$resources = [];
-		if(is_dir($this->file)){
-			/** @var \SplFileInfo $resource */
-			foreach(new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($this->file)) as $resource){
-				if($resource->isFile()){
-					$path = str_replace(DIRECTORY_SEPARATOR, "/", substr((string) $resource, strlen($this->file)));
-					$resources[$path] = $resource;
-				}
-			}
-		}
-
-		return $resources;
-	}
-}
diff --git a/src/plugin/FolderPluginLoader.php b/src/plugin/FolderPluginLoader.php
new file mode 100644
index 000000000..73f6b8841
--- /dev/null
+++ b/src/plugin/FolderPluginLoader.php
@@ -0,0 +1,72 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+ */
+
+declare(strict_types=1);
+
+namespace pocketmine\plugin;
+
+use pocketmine\thread\ThreadSafeClassLoader;
+use pocketmine\utils\Filesystem;
+use Symfony\Component\Filesystem\Path;
+use function file_exists;
+use function is_dir;
+
+class FolderPluginLoader implements PluginLoader{
+	public function __construct(
+		private readonly ThreadSafeClassLoader $loader
+	){}
+
+	public function canLoadPlugin(string $path) : bool{
+		return is_dir($path) && file_exists(Path::join($path, "plugin.yml")) && file_exists(Path::join($path, "src"));
+	}
+
+	/**
+	 * Loads the plugin contained in $file
+	 */
+	public function loadPlugin(string $path) : void{
+		$description = $this->getPluginDescription($path);
+		if($description !== null){
+			$this->loader->addPath($description->getSrcNamespacePrefix(), "$path/src");
+		}
+	}
+
+	/**
+	 * Gets the PluginDescription from the file
+	 */
+	public function getPluginDescription(string $path) : ?PluginDescription{
+		$pluginYmlPath = Path::join($path, "plugin.yml");
+		if(is_dir($path) && file_exists($pluginYmlPath)){
+			try{
+				$yaml = Filesystem::fileGetContents($pluginYmlPath);
+			}catch(\RuntimeException){
+				//TODO: this ought to be logged
+				return null;
+			}
+			return new PluginDescription($yaml);
+		}
+
+		return null;
+	}
+
+	public function getAccessProtocol() : string{
+		return "";
+	}
+}
diff --git a/src/plugin/PharPluginLoader.php b/src/plugin/PharPluginLoader.php
index a8dc04804..1ef8f2b84 100644
--- a/src/plugin/PharPluginLoader.php
+++ b/src/plugin/PharPluginLoader.php
@@ -42,18 +42,18 @@ class PharPluginLoader implements PluginLoader{
 	/**
 	 * Loads the plugin contained in $file
 	 */
-	public function loadPlugin(string $file) : void{
-		$description = $this->getPluginDescription($file);
+	public function loadPlugin(string $path) : void{
+		$description = $this->getPluginDescription($path);
 		if($description !== null){
-			$this->loader->addPath($description->getSrcNamespacePrefix(), "$file/src");
+			$this->loader->addPath($description->getSrcNamespacePrefix(), "$path/src");
 		}
 	}
 
 	/**
 	 * Gets the PluginDescription from the file
 	 */
-	public function getPluginDescription(string $file) : ?PluginDescription{
-		$phar = new \Phar($file);
+	public function getPluginDescription(string $path) : ?PluginDescription{
+		$phar = new \Phar($path);
 		if(isset($phar["plugin.yml"])){
 			return new PluginDescription($phar["plugin.yml"]->getContent());
 		}
diff --git a/src/plugin/Plugin.php b/src/plugin/Plugin.php
index 49b393e5a..ae64d443b 100644
--- a/src/plugin/Plugin.php
+++ b/src/plugin/Plugin.php
@@ -34,7 +34,7 @@ use pocketmine\Server;
  */
 interface Plugin{
 
-	public function __construct(PluginLoader $loader, Server $server, PluginDescription $description, string $dataFolder, string $file, ResourceProvider $resourceProvider);
+	public function __construct(PluginLoader $loader, Server $server, PluginDescription $description, string $dataFolder, string $file, string $resourceFolder);
 
 	public function isEnabled() : bool;
 
diff --git a/src/plugin/PluginBase.php b/src/plugin/PluginBase.php
index da2eae824..a32339e84 100644
--- a/src/plugin/PluginBase.php
+++ b/src/plugin/PluginBase.php
@@ -37,18 +37,21 @@ use function copy;
 use function count;
 use function dirname;
 use function file_exists;
+use function fopen;
+use function is_dir;
 use function mkdir;
 use function rtrim;
 use function str_contains;
+use function str_replace;
+use function strlen;
 use function strtolower;
+use function substr;
 use function trim;
 use const DIRECTORY_SEPARATOR;
 
 abstract class PluginBase implements Plugin, CommandExecutor{
 	private bool $isEnabled = false;
 
-	private string $resourceFolder;
-
 	private ?Config $config = null;
 	private string $configFile;
 
@@ -61,12 +64,12 @@ abstract class PluginBase implements Plugin, CommandExecutor{
 		private PluginDescription $description,
 		private string $dataFolder,
 		private string $file,
-		private ResourceProvider $resourceProvider
+		private string $resourceFolder,
 	){
 		$this->dataFolder = rtrim($dataFolder, "/" . DIRECTORY_SEPARATOR) . "/";
 		//TODO: this is accessed externally via reflection, not unused
 		$this->file = rtrim($file, "/" . DIRECTORY_SEPARATOR) . "/";
-		$this->resourceFolder = Path::join($this->file, "resources") . "/";
+		$this->resourceFolder = rtrim(str_replace(DIRECTORY_SEPARATOR, "/", $resourceFolder), "/") . "/";
 
 		$this->configFile = Path::join($this->dataFolder, "config.yml");
 
@@ -227,19 +230,6 @@ abstract class PluginBase implements Plugin, CommandExecutor{
 		return Path::join($this->getResourceFolder(), $filename);
 	}
 
-	/**
-	 * @deprecated Prefer using standard PHP functions with {@link PluginBase::getResourcePath()}, like
-	 * file_get_contents() or fopen().
-	 *
-	 * Gets an embedded resource on the plugin file.
-	 * WARNING: You must close the resource given using fclose()
-	 *
-	 * @return null|resource Resource data, or null
-	 */
-	public function getResource(string $filename){
-		return $this->resourceProvider->getResource($filename);
-	}
-
 	/**
 	 * Saves an embedded resource to its relative location in the data folder
 	 */
@@ -271,7 +261,18 @@ abstract class PluginBase implements Plugin, CommandExecutor{
 	 * @return \SplFileInfo[]
 	 */
 	public function getResources() : array{
-		return $this->resourceProvider->getResources();
+		$resources = [];
+		if(is_dir($this->resourceFolder)){
+			/** @var \SplFileInfo $resource */
+			foreach(new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($this->resourceFolder)) as $resource){
+				if($resource->isFile()){
+					$path = str_replace(DIRECTORY_SEPARATOR, "/", substr((string) $resource, strlen($this->resourceFolder)));
+					$resources[$path] = $resource;
+				}
+			}
+		}
+
+		return $resources;
 	}
 
 	public function getConfig() : Config{
diff --git a/src/plugin/PluginEnableOrder.php b/src/plugin/PluginEnableOrder.php
index c942ea33f..71fe273ce 100644
--- a/src/plugin/PluginEnableOrder.php
+++ b/src/plugin/PluginEnableOrder.php
@@ -23,19 +23,9 @@ declare(strict_types=1);
 
 namespace pocketmine\plugin;
 
-use pocketmine\utils\LegacyEnumShimTrait;
 use function mb_strtolower;
 
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static PluginEnableOrder POSTWORLD()
- * @method static PluginEnableOrder STARTUP()
- */
 enum PluginEnableOrder{
-	use LegacyEnumShimTrait;
-
 	case STARTUP;
 	case POSTWORLD;
 
diff --git a/src/plugin/PluginLoader.php b/src/plugin/PluginLoader.php
index 58c168373..d87daf9fc 100644
--- a/src/plugin/PluginLoader.php
+++ b/src/plugin/PluginLoader.php
@@ -36,13 +36,13 @@ interface PluginLoader{
 	/**
 	 * Loads the plugin contained in $file
 	 */
-	public function loadPlugin(string $file) : void;
+	public function loadPlugin(string $path) : void;
 
 	/**
 	 * Gets the PluginDescription from the file
 	 * @throws PluginDescriptionParseException
 	 */
-	public function getPluginDescription(string $file) : ?PluginDescription;
+	public function getPluginDescription(string $path) : ?PluginDescription;
 
 	/**
 	 * Returns the protocol prefix used to access files in this plugin, e.g. file://, phar://
diff --git a/src/plugin/PluginManager.php b/src/plugin/PluginManager.php
index 301c66854..a7b0768f8 100644
--- a/src/plugin/PluginManager.php
+++ b/src/plugin/PluginManager.php
@@ -213,7 +213,7 @@ class PluginManager{
 		 * @var Plugin $plugin
 		 * @see Plugin::__construct()
 		 */
-		$plugin = new $mainClass($loader, $this->server, $description, $dataFolder, $prefixed, new DiskResourceProvider($prefixed . "/resources/"));
+		$plugin = new $mainClass($loader, $this->server, $description, $dataFolder, $prefixed, $prefixed . "/resources/");
 		$this->plugins[$plugin->getDescription()->getName()] = $plugin;
 
 		return $plugin;
@@ -486,12 +486,10 @@ class PluginManager{
 		return true; //TODO: maybe this should be an error?
 	}
 
+	/** @internal */
 	public function disablePlugins() : void{
 		while(count($this->enabledPlugins) > 0){
 			foreach($this->enabledPlugins as $plugin){
-				if(!$plugin->isEnabled()){
-					continue; //in case a plugin disabled another plugin
-				}
 				$name = $plugin->getDescription()->getName();
 				if(isset($this->pluginDependents[$name]) && count($this->pluginDependents[$name]) > 0){
 					$this->server->getLogger()->debug("Deferring disable of plugin $name due to dependent plugins still enabled: " . implode(", ", array_keys($this->pluginDependents[$name])));
@@ -503,7 +501,7 @@ class PluginManager{
 		}
 	}
 
-	public function disablePlugin(Plugin $plugin) : void{
+	private function disablePlugin(Plugin $plugin) : void{
 		if($plugin->isEnabled()){
 			$this->server->getLogger()->info($this->server->getLanguage()->translate(KnownTranslationFactory::pocketmine_plugin_disable($plugin->getDescription()->getFullName())));
 			(new PluginDisableEvent($plugin))->call();
@@ -527,21 +525,10 @@ class PluginManager{
 
 	public function tickSchedulers(int $currentTick) : void{
 		foreach($this->enabledPlugins as $pluginName => $p){
-			if(isset($this->enabledPlugins[$pluginName])){
-				//the plugin may have been disabled as a result of updating other plugins' schedulers, and therefore
-				//removed from enabledPlugins; however, foreach will still see it due to copy-on-write
-				$p->getScheduler()->mainThreadHeartbeat($currentTick);
-			}
+			$p->getScheduler()->mainThreadHeartbeat($currentTick);
 		}
 	}
 
-	public function clearPlugins() : void{
-		$this->disablePlugins();
-		$this->plugins = [];
-		$this->enabledPlugins = [];
-		$this->fileAssociations = [];
-	}
-
 	/**
 	 * Returns whether the given ReflectionMethod could be used as an event handler. Used to filter methods on Listeners
 	 * when registering.
diff --git a/src/plugin/ResourceProvider.php b/src/plugin/ResourceProvider.php
deleted file mode 100644
index 3594d7eee..000000000
--- a/src/plugin/ResourceProvider.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\plugin;
-
-interface ResourceProvider{
-	/**
-	 * Gets an embedded resource on the plugin file.
-	 * WARNING: You must close the resource given using fclose()
-	 *
-	 * @return null|resource Resource data, or null
-	 */
-	public function getResource(string $filename);
-
-	/**
-	 * Returns all the resources packaged with the plugin in the form ["path/in/resources" => SplFileInfo]
-	 *
-	 * @return \SplFileInfo[]
-	 */
-	public function getResources() : array;
-}
diff --git a/src/plugin/ScriptPluginLoader.php b/src/plugin/ScriptPluginLoader.php
index 36d522c93..8e45eaab8 100644
--- a/src/plugin/ScriptPluginLoader.php
+++ b/src/plugin/ScriptPluginLoader.php
@@ -46,15 +46,15 @@ class ScriptPluginLoader implements PluginLoader{
 	/**
 	 * Loads the plugin contained in $file
 	 */
-	public function loadPlugin(string $file) : void{
-		include_once $file;
+	public function loadPlugin(string $path) : void{
+		include_once $path;
 	}
 
 	/**
 	 * Gets the PluginDescription from the file
 	 */
-	public function getPluginDescription(string $file) : ?PluginDescription{
-		$content = @file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
+	public function getPluginDescription(string $path) : ?PluginDescription{
+		$content = @file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
 		if($content === false){
 			return null;
 		}
diff --git a/src/scheduler/AsyncTask.php b/src/scheduler/AsyncTask.php
index b4c3ce20d..af6e4cdc9 100644
--- a/src/scheduler/AsyncTask.php
+++ b/src/scheduler/AsyncTask.php
@@ -24,12 +24,10 @@ declare(strict_types=1);
 namespace pocketmine\scheduler;
 
 use pmmp\thread\Runnable;
-use pmmp\thread\Thread as NativeThread;
 use pmmp\thread\ThreadSafe;
 use pmmp\thread\ThreadSafeArray;
 use pocketmine\thread\NonThreadSafeValue;
 use function array_key_exists;
-use function assert;
 use function igbinary_serialize;
 use function igbinary_unserialize;
 use function is_null;
@@ -83,16 +81,7 @@ abstract class AsyncTask extends Runnable{
 		$this->onRun();
 
 		$this->finished = true;
-		$worker = NativeThread::getCurrentThread();
-		assert($worker instanceof AsyncWorker);
-		$worker->getNotifier()->wakeupSleeper();
-	}
-
-	/**
-	 * @deprecated
-	 */
-	public function isCrashed() : bool{
-		return $this->isTerminated();
+		AsyncWorker::getNotifier()->wakeupSleeper();
 	}
 
 	/**
@@ -121,20 +110,6 @@ abstract class AsyncTask extends Runnable{
 		$this->result = is_scalar($result) || is_null($result) || $result instanceof ThreadSafe ? $result : new NonThreadSafeValue($result);
 	}
 
-	/**
-	 * @deprecated
-	 */
-	public function cancelRun() : void{
-		//NOOP
-	}
-
-	/**
-	 * @deprecated
-	 */
-	public function hasCancelledRun() : bool{
-		return false;
-	}
-
 	public function setSubmitted() : void{
 		$this->submitted = true;
 	}
@@ -194,13 +169,6 @@ abstract class AsyncTask extends Runnable{
 
 	}
 
-	/**
-	 * @deprecated No longer used
-	 */
-	public function onError() : void{
-
-	}
-
 	/**
 	 * Saves mixed data in thread-local storage. Data stored using this storage is **only accessible from the thread it
 	 * was stored on**. Data stored using this method will **not** be serialized.
diff --git a/src/scheduler/AsyncWorker.php b/src/scheduler/AsyncWorker.php
index 919e3eedc..5fdfb1ebb 100644
--- a/src/scheduler/AsyncWorker.php
+++ b/src/scheduler/AsyncWorker.php
@@ -36,7 +36,7 @@ class AsyncWorker extends Worker{
 	/** @var mixed[] */
 	private static array $store = [];
 
-	private const TLS_KEY_NOTIFIER = self::class . "::notifier";
+	private static ?SleeperNotifier $notifier = null;
 
 	public function __construct(
 		private ThreadSafeLogger $logger,
@@ -45,12 +45,11 @@ class AsyncWorker extends Worker{
 		private SleeperHandlerEntry $sleeperEntry
 	){}
 
-	public function getNotifier() : SleeperNotifier{
-		$notifier = $this->getFromThreadStore(self::TLS_KEY_NOTIFIER);
-		if(!$notifier instanceof SleeperNotifier){
-			throw new AssumptionFailedError("SleeperNotifier not found in thread-local storage");
+	public static function getNotifier() : SleeperNotifier{
+		if(self::$notifier !== null){
+			return self::$notifier;
 		}
-		return $notifier;
+		throw new AssumptionFailedError("SleeperNotifier not found in thread-local storage");
 	}
 
 	protected function onRun() : void{
@@ -66,7 +65,7 @@ class AsyncWorker extends Worker{
 			$this->logger->debug("No memory limit set");
 		}
 
-		$this->saveToThreadStore(self::TLS_KEY_NOTIFIER, $this->sleeperEntry->createNotifier());
+		self::$notifier = $this->sleeperEntry->createNotifier();
 	}
 
 	public function getLogger() : ThreadSafeLogger{
@@ -84,6 +83,8 @@ class AsyncWorker extends Worker{
 	/**
 	 * Saves mixed data into the worker's thread-local object store. This can be used to store objects which you
 	 * want to use on this worker thread from multiple AsyncTasks.
+	 *
+	 * @deprecated Use static class properties instead.
 	 */
 	public function saveToThreadStore(string $identifier, mixed $value) : void{
 		if(NativeThread::getCurrentThread() !== $this){
@@ -99,6 +100,8 @@ class AsyncWorker extends Worker{
 	 * account for the possibility that what you're trying to retrieve might not exist.
 	 *
 	 * Objects stored in this storage may ONLY be retrieved while the task is running.
+	 *
+	 * @deprecated Use static class properties instead.
 	 */
 	public function getFromThreadStore(string $identifier) : mixed{
 		if(NativeThread::getCurrentThread() !== $this){
@@ -109,6 +112,8 @@ class AsyncWorker extends Worker{
 
 	/**
 	 * Removes previously-stored mixed data from the worker's thread-local object store.
+	 *
+	 * @deprecated Use static class properties instead.
 	 */
 	public function removeFromThreadStore(string $identifier) : void{
 		if(NativeThread::getCurrentThread() !== $this){
diff --git a/src/thread/CommonThreadPartsTrait.php b/src/thread/CommonThreadPartsTrait.php
index de2ecbde8..9a14b2345 100644
--- a/src/thread/CommonThreadPartsTrait.php
+++ b/src/thread/CommonThreadPartsTrait.php
@@ -23,6 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\thread;
 
+use pmmp\thread\Thread as NativeThread;
 use pmmp\thread\ThreadSafeArray;
 use pocketmine\errorhandler\ErrorToExceptionHandler;
 use pocketmine\Server;
@@ -77,9 +78,7 @@ trait CommonThreadPartsTrait{
 	/**
 	 * Registers the class loaders for this thread.
 	 *
-	 * WARNING: This method MUST be called from any descendent threads' run() method to make autoloading usable.
-	 * If you do not do this, you will not be able to use new classes that were not loaded when the thread was started
-	 * (unless you are using a custom autoloader).
+	 * @internal
 	 */
 	public function registerClassLoaders() : void{
 		if($this->composerAutoloaderPath !== null){
@@ -96,6 +95,15 @@ trait CommonThreadPartsTrait{
 
 	public function getCrashInfo() : ?ThreadCrashInfo{ return $this->crashInfo; }
 
+	public function start(int $options = NativeThread::INHERIT_NONE) : bool{
+		ThreadManager::getInstance()->add($this);
+
+		if($this->getClassLoaders() === null){
+			$this->setClassLoaders();
+		}
+		return parent::start($options);
+	}
+
 	final public function run() : void{
 		error_reporting(-1);
 		$this->registerClassLoaders();
@@ -110,6 +118,20 @@ trait CommonThreadPartsTrait{
 		$this->isKilled = true;
 	}
 
+	/**
+	 * Stops the thread using the best way possible. Try to stop it yourself before calling this.
+	 */
+	public function quit() : void{
+		$this->isKilled = true;
+
+		if(!$this->isJoined()){
+			$this->notify();
+			$this->join();
+		}
+
+		ThreadManager::getInstance()->remove($this);
+	}
+
 	/**
 	 * Called by set_exception_handler() when an uncaught exception is thrown.
 	 */
diff --git a/src/thread/Thread.php b/src/thread/Thread.php
index 706f96429..a6c36e14c 100644
--- a/src/thread/Thread.php
+++ b/src/thread/Thread.php
@@ -37,28 +37,4 @@ use pocketmine\scheduler\AsyncTask;
  */
 abstract class Thread extends NativeThread{
 	use CommonThreadPartsTrait;
-
-	public function start(int $options = NativeThread::INHERIT_NONE) : bool{
-		//this is intentionally not traitified
-		ThreadManager::getInstance()->add($this);
-
-		if($this->getClassLoaders() === null){
-			$this->setClassLoaders();
-		}
-		return parent::start($options);
-	}
-
-	/**
-	 * Stops the thread using the best way possible. Try to stop it yourself before calling this.
-	 */
-	public function quit() : void{
-		$this->isKilled = true;
-
-		if(!$this->isJoined()){
-			$this->notify();
-			$this->join();
-		}
-
-		ThreadManager::getInstance()->remove($this);
-	}
 }
diff --git a/src/thread/ThreadSafeClassLoader.php b/src/thread/ThreadSafeClassLoader.php
index 95b983dc1..fd9e6afed 100644
--- a/src/thread/ThreadSafeClassLoader.php
+++ b/src/thread/ThreadSafeClassLoader.php
@@ -51,12 +51,12 @@ class ThreadSafeClassLoader extends ThreadSafe{
 	 * @var ThreadSafeArray|string[]
 	 * @phpstan-var ThreadSafeArray<int, string>
 	 */
-	private $fallbackLookup;
+	private ThreadSafeArray $fallbackLookup;
 	/**
 	 * @var ThreadSafeArray|string[][]
 	 * @phpstan-var ThreadSafeArray<string, ThreadSafeArray<int, string>>
 	 */
-	private $psr4Lookup;
+	private ThreadSafeArray $psr4Lookup;
 
 	public function __construct(){
 		$this->fallbackLookup = new ThreadSafeArray();
diff --git a/src/thread/Worker.php b/src/thread/Worker.php
index 3bc5cda97..cc0b56046 100644
--- a/src/thread/Worker.php
+++ b/src/thread/Worker.php
@@ -23,7 +23,6 @@ declare(strict_types=1);
 
 namespace pocketmine\thread;
 
-use pmmp\thread\Thread as NativeThread;
 use pmmp\thread\Worker as NativeWorker;
 use pocketmine\scheduler\AsyncTask;
 
@@ -39,31 +38,4 @@ use pocketmine\scheduler\AsyncTask;
  */
 abstract class Worker extends NativeWorker{
 	use CommonThreadPartsTrait;
-
-	public function start(int $options = NativeThread::INHERIT_NONE) : bool{
-		//this is intentionally not traitified
-		ThreadManager::getInstance()->add($this);
-
-		if($this->getClassLoaders() === null){
-			$this->setClassLoaders();
-		}
-		return parent::start($options);
-	}
-
-	/**
-	 * Stops the thread using the best way possible. Try to stop it yourself before calling this.
-	 */
-	public function quit() : void{
-		$this->isKilled = true;
-
-		if(!$this->isShutdown()){
-			$this->synchronized(function() : void{
-				while($this->unstack() !== null);
-			});
-			$this->notify();
-			$this->shutdown();
-		}
-
-		ThreadManager::getInstance()->remove($this);
-	}
 }
diff --git a/src/timings/Timings.php b/src/timings/Timings.php
index 61a8bbc92..563af69bf 100644
--- a/src/timings/Timings.php
+++ b/src/timings/Timings.php
@@ -210,8 +210,7 @@ abstract class Timings{
 	}
 
 	/**
-	 * @phpstan-template T of object
-	 * @phpstan-param class-string<T> $class
+	 * @phpstan-param class-string<covariant object> $class
 	 */
 	private static function shortenCoreClassName(string $class, string $prefix) : string{
 		if(str_starts_with($class, $prefix)){
@@ -302,8 +301,7 @@ abstract class Timings{
 	}
 
 	/**
-	 * @phpstan-template TEvent of Event
-	 * @phpstan-param class-string<TEvent> $event
+	 * @phpstan-param class-string<covariant Event> $event
 	 */
 	public static function getEventHandlerTimings(string $event, string $handlerName, string $group) : TimingsHandler{
 		if(!isset(self::$eventHandlers[$event][$handlerName])){
diff --git a/src/utils/EnumTrait.php b/src/utils/EnumTrait.php
deleted file mode 100644
index 7427e69f4..000000000
--- a/src/utils/EnumTrait.php
+++ /dev/null
@@ -1,109 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\utils;
-
-/**
- * This trait allows a class to simulate a Java-style enum. Members are exposed as static methods and handled via
- * __callStatic().
- *
- * Classes using this trait need to include \@method tags in their class docblock for every enum member.
- * Alternatively, just put \@generate-registry-docblock in the docblock and run build/generate-registry-annotations.php
- *
- * @deprecated Use native PHP 8.1 enums instead. Use {@link LegacyEnumShimTrait} if you need to provide backwards
- * compatible EnumTrait-like API for migrated enums.
- */
-trait EnumTrait{
-	use RegistryTrait;
-	use NotCloneable;
-	use NotSerializable;
-
-	/**
-	 * Registers the given object as an enum member.
-	 *
-	 * @throws \InvalidArgumentException
-	 */
-	protected static function register(self $member) : void{
-		self::_registryRegister($member->name(), $member);
-	}
-
-	protected static function registerAll(self ...$members) : void{
-		foreach($members as $member){
-			self::register($member);
-		}
-	}
-
-	/**
-	 * Returns all members of the enum.
-	 * This is overridden to change the return typehint.
-	 *
-	 * @return self[]
-	 * @phpstan-return array<string, self>
-	 */
-	public static function getAll() : array{
-		//phpstan doesn't support generic traits yet :(
-		/** @var self[] $result */
-		$result = self::_registryGetAll();
-		return $result;
-	}
-
-	/** @var int|null */
-	private static $nextId = null;
-
-	/** @var string */
-	private $enumName;
-	/** @var int */
-	private $runtimeId;
-
-	/**
-	 * @throws \InvalidArgumentException
-	 */
-	private function __construct(string $enumName){
-		self::verifyName($enumName);
-		$this->enumName = $enumName;
-		if(self::$nextId === null){
-			self::$nextId = Process::pid(); //this provides enough base entropy to prevent hardcoding
-		}
-		$this->runtimeId = self::$nextId++;
-	}
-
-	public function name() : string{
-		return $this->enumName;
-	}
-
-	/**
-	 * Returns a runtime-only identifier for this enum member. This will be different with each run, so don't try to
-	 * hardcode it.
-	 * This can be useful for switches or array indexing.
-	 */
-	public function id() : int{
-		return $this->runtimeId;
-	}
-
-	/**
-	 * Returns whether the two objects are equivalent.
-	 */
-	public function equals(self $other) : bool{
-		return $this->enumName === $other->enumName;
-	}
-}
diff --git a/src/utils/LegacyEnumShimTrait.php b/src/utils/LegacyEnumShimTrait.php
deleted file mode 100644
index 4bb3587ab..000000000
--- a/src/utils/LegacyEnumShimTrait.php
+++ /dev/null
@@ -1,92 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\utils;
-
-use function count;
-use function mb_strtoupper;
-use function spl_object_id;
-
-/**
- * Offers a shim to make a native enum behave similarly to a legacy {@link EnumTrait} enum.
- * Used to provide backwards compatibility for enums that have been migrated to native PHP 8.1 enums.
- *
- * @deprecated
- */
-trait LegacyEnumShimTrait{
-
-	/**
-	 * @param mixed[] $arguments
-	 */
-	public static function __callStatic(string $name, array $arguments) : self{
-		if(count($arguments) > 0){
-			throw new \ArgumentCountError("Expected exactly 0 arguments, " . count($arguments) . " passed");
-		}
-		return self::getAll()[mb_strtoupper($name)];
-	}
-
-	/**
-	 * Returns a list of all cases, indexed by name.
-	 *
-	 * @return self[]
-	 * @phpstan-return array<string, self>
-	 */
-	public static function getAll() : array{
-		/** @var array<string, self>|null $result */
-		static $result = null;
-		if($result === null){
-			$result = [];
-			foreach(self::cases() as $case){
-				$result[mb_strtoupper($case->name)] = $case;
-			}
-		}
-		return $result;
-	}
-
-	/**
-	 * Shim for {@link \UnitEnum::name}.
-	 *
-	 * @deprecated Use the native enum's name property instead.
-	 */
-	public function name() : string{
-		return $this->name;
-	}
-
-	/**
-	 * Alias of spl_object_id($this).
-	 *
-	 * @deprecated
-	 */
-	public function id() : int{
-		return spl_object_id($this);
-	}
-
-	/**
-	 * Returns whether the two objects are equivalent.
-	 *
-	 * @deprecated Native enums can be safely compared with ===.
-	 */
-	public function equals(self $other) : bool{
-		return $this === $other;
-	}
-}
diff --git a/src/utils/RegistryTrait.php b/src/utils/RegistryTrait.php
index cf231bf21..3ae0be1c6 100644
--- a/src/utils/RegistryTrait.php
+++ b/src/utils/RegistryTrait.php
@@ -104,13 +104,10 @@ trait RegistryTrait{
 	}
 
 	/**
-	 * @param string  $name
 	 * @param mixed[] $arguments
 	 * @phpstan-param list<mixed> $arguments
-	 *
-	 * @return object
 	 */
-	public static function __callStatic($name, $arguments){
+	public static function __callStatic(string $name, array $arguments) : object{
 		if(count($arguments) > 0){
 			throw new \ArgumentCountError("Expected exactly 0 arguments, " . count($arguments) . " passed");
 		}
diff --git a/src/world/BlockTransaction.php b/src/world/BlockTransaction.php
index 5f7e9f9fa..9a29ab2f8 100644
--- a/src/world/BlockTransaction.php
+++ b/src/world/BlockTransaction.php
@@ -28,7 +28,7 @@ use pocketmine\math\Vector3;
 use pocketmine\utils\Utils;
 
 class BlockTransaction{
-	/** @var Block[][][] */
+	/** @var Block[][][][] */
 	private array $blocks = [];
 
 	/**
@@ -58,7 +58,7 @@ class BlockTransaction{
 	 * @return $this
 	 */
 	public function addBlockAt(int $x, int $y, int $z, Block $state) : self{
-		$this->blocks[$x][$y][$z] = $state;
+		$this->blocks[$x][$y][$z][$state->getLayer()] = $state;
 		return $this;
 	}
 
@@ -66,15 +66,15 @@ class BlockTransaction{
 	 * Reads a block from the given world, masked by the blocks in this transaction. This can be useful if you want to
 	 * add blocks to the transaction that depend on previous blocks should they exist.
 	 */
-	public function fetchBlock(Vector3 $pos) : Block{
-		return $this->fetchBlockAt($pos->getFloorX(), $pos->getFloorY(), $pos->getFloorZ());
+	public function fetchBlock(Vector3 $pos, int $layer = 0) : Block{
+		return $this->fetchBlockAt($pos->getFloorX(), $pos->getFloorY(), $pos->getFloorZ(), $layer);
 	}
 
 	/**
 	 * @see BlockTransaction::fetchBlock()
 	 */
-	public function fetchBlockAt(int $x, int $y, int $z) : Block{
-		return $this->blocks[$x][$y][$z] ?? $this->world->getBlockAt($x, $y, $z);
+	public function fetchBlockAt(int $x, int $y, int $z, int $layer = 0) : Block{
+		return $this->blocks[$x][$y][$z][$layer] ?? $this->world->getBlockAtLayer($x, $y, $z, $layer);
 	}
 
 	/**
@@ -93,9 +93,9 @@ class BlockTransaction{
 		}
 		$changedBlocks = 0;
 		foreach($this->getBlocks() as [$x, $y, $z, $block]){
-			$oldBlock = $this->world->getBlockAt($x, $y, $z);
+			$oldBlock = $this->world->getBlockAtLayer($x, $y, $z, $block->getLayer());
 			if(!$oldBlock->isSameState($block)){
-				$this->world->setBlockAt($x, $y, $z, $block);
+				$this->world->setBlockAtLayer($x, $y, $z, $block, $block->getLayer());
 				$changedBlocks++;
 			}
 		}
@@ -109,8 +109,10 @@ class BlockTransaction{
 	public function getBlocks() : \Generator{
 		foreach($this->blocks as $x => $yLine){
 			foreach($yLine as $y => $zLine){
-				foreach($zLine as $z => $block){
-					yield [$x, $y, $z, $block];
+				foreach($zLine as $z => $layerLine){
+					foreach($layerLine as $block){
+						yield [$x, $y, $z, $block];
+					}
 				}
 			}
 		}
diff --git a/src/world/ChunkManager.php b/src/world/ChunkManager.php
index c5e1f3fd4..5085ab868 100644
--- a/src/world/ChunkManager.php
+++ b/src/world/ChunkManager.php
@@ -33,6 +33,8 @@ interface ChunkManager{
 	 */
 	public function getBlockAt(int $x, int $y, int $z) : Block;
 
+	public function getBlockAtLayer(int $x, int $y, int $z, int $layer = 0) : Block;
+
 	/**
 	 * Sets the block at the given coordinates to the block state specified.
 	 *
@@ -40,6 +42,8 @@ interface ChunkManager{
 	 */
 	public function setBlockAt(int $x, int $y, int $z, Block $block) : void;
 
+	public function setBlockAtLayer(int $x, int $y, int $z, Block $block, int $layer = 0) : void;
+
 	public function getChunk(int $chunkX, int $chunkZ) : ?Chunk;
 
 	public function setChunk(int $chunkX, int $chunkZ, Chunk $chunk) : void;
diff --git a/src/world/SimpleChunkManager.php b/src/world/SimpleChunkManager.php
index 221adbe89..ad0ee4126 100644
--- a/src/world/SimpleChunkManager.php
+++ b/src/world/SimpleChunkManager.php
@@ -40,15 +40,23 @@ class SimpleChunkManager implements ChunkManager{
 	){}
 
 	public function getBlockAt(int $x, int $y, int $z) : Block{
+		return $this->getBlockAtLayer($x, $y, $z);
+	}
+
+	public function getBlockAtLayer(int $x, int $y, int $z, int $layer = 0) : Block{
 		if($this->isInWorld($x, $y, $z) && ($chunk = $this->getChunk($x >> Chunk::COORD_BIT_SIZE, $z >> Chunk::COORD_BIT_SIZE)) !== null){
-			return RuntimeBlockStateRegistry::getInstance()->fromStateId($chunk->getBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK));
+			return RuntimeBlockStateRegistry::getInstance()->fromStateId($chunk->getBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK, $layer));
 		}
 		return VanillaBlocks::AIR();
 	}
 
 	public function setBlockAt(int $x, int $y, int $z, Block $block) : void{
+		$this->setBlockAtLayer($x, $y, $z, $block);
+	}
+
+	public function setBlockAtLayer(int $x, int $y, int $z, Block $block, int $layer = 0) : void{
 		if(($chunk = $this->getChunk($x >> Chunk::COORD_BIT_SIZE, $z >> Chunk::COORD_BIT_SIZE)) !== null){
-			$chunk->setBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK, $block->getStateId());
+			$chunk->setBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK, $block->getStateId(), $layer);
 		}else{
 			throw new \InvalidArgumentException("Cannot set block at coordinates x=$x,y=$y,z=$z, terrain is not loaded or out of bounds");
 		}
diff --git a/src/world/World.php b/src/world/World.php
index fd66da1c7..3d81d7359 100644
--- a/src/world/World.php
+++ b/src/world/World.php
@@ -209,8 +209,8 @@ class World implements ChunkManager{
 
 	private bool $inDynamicStateRecalculation = false;
 	/**
-	 * @var Block[][] chunkHash => [relativeBlockHash => Block]
-	 * @phpstan-var array<ChunkPosHash, array<ChunkBlockPosHash, Block>>
+	 * @var Block[][][] chunkHash => [relativeBlockHash => [blockLayer => Block]]
+	 * @phpstan-var array<ChunkPosHash, array<ChunkBlockPosHash, array<int, Block>>>
 	 */
 	private array $blockCache = [];
 	/**
@@ -304,7 +304,7 @@ class World implements ChunkManager{
 	 */
 	private array $changedBlocks = [];
 
-	/** @phpstan-var ReversePriorityQueue<int, Vector3> */
+	/** @phpstan-var ReversePriorityQueue<int, array{Vector3, int}> */
 	private ReversePriorityQueue $scheduledBlockUpdateQueue;
 	/**
 	 * @var int[] blockHash => tick delay
@@ -1027,12 +1027,12 @@ class World implements ChunkManager{
 		//Delayed updates
 		while($this->scheduledBlockUpdateQueue->count() > 0 && $this->scheduledBlockUpdateQueue->current()["priority"] <= $currentTick){
 			/** @var Vector3 $vec */
-			$vec = $this->scheduledBlockUpdateQueue->extract()["data"];
+			[$vec, $layer] = $this->scheduledBlockUpdateQueue->extract()["data"];
 			unset($this->scheduledBlockUpdateQueueIndex[World::blockHash($vec->x, $vec->y, $vec->z)]);
 			if(!$this->isInLoadedTerrain($vec)){
 				continue;
 			}
-			$block = $this->getBlock($vec);
+			$block = $this->getBlockLayer($vec, $layer);
 			$block->onScheduledUpdate();
 		}
 		$this->timings->scheduledBlockUpdates->stopTiming();
@@ -1047,19 +1047,21 @@ class World implements ChunkManager{
 				continue;
 			}
 
-			$block = $this->getBlockAt($x, $y, $z);
+			foreach([0, 1] as $layer){
+				$block = $this->getBlockAtLayer($x, $y, $z, $layer);
 
-			if(BlockUpdateEvent::hasHandlers()){
-				$ev = new BlockUpdateEvent($block);
-				$ev->call();
-				if($ev->isCancelled()){
-					continue;
+				if(BlockUpdateEvent::hasHandlers()){
+					$ev = new BlockUpdateEvent($block);
+					$ev->call();
+					if($ev->isCancelled()){
+						continue;
+					}
 				}
+				foreach($this->getNearbyEntities(AxisAlignedBB::one()->offset($x, $y, $z)) as $entity){
+					$entity->onNearbyBlockChange();
+				}
+				$block->onNearbyBlockChange();
 			}
-			foreach($this->getNearbyEntities(AxisAlignedBB::one()->offset($x, $y, $z)) as $entity){
-				$entity->onNearbyBlockChange();
-			}
-			$block->onNearbyBlockChange();
 		}
 
 		$this->timings->neighbourBlockUpdates->stopTiming();
@@ -1099,7 +1101,7 @@ class World implements ChunkManager{
 							$p->onChunkChanged($chunkX, $chunkZ, $chunk);
 						}
 					}else{
-						$this->broadcastPacketToPlayersByTypeConverterUsingChunk($chunkX, $chunkZ, fn(TypeConverter $typeConverter) : array => $this->createBlockUpdatePackets($typeConverter, $blocks));
+						$this->broadcastPacketToPlayersByTypeConverterUsingChunk($chunkX, $chunkZ, fn(TypeConverter $typeConverter) : array => $this->createBlockUpdatePackets($typeConverter, $blocks, true));
 					}
 				}
 			}
@@ -1172,7 +1174,7 @@ class World implements ChunkManager{
 	 * @return ClientboundPacket[]
 	 * @phpstan-return list<ClientboundPacket>
 	 */
-	public function createBlockUpdatePackets(TypeConverter $typeConverter, array $blocks) : array{
+	public function createBlockUpdatePackets(TypeConverter $typeConverter, array $blocks, bool $secondLayer = false) : array{
 		$packets = [];
 
 		$blockTranslator = $typeConverter->getBlockTranslator();
@@ -1189,7 +1191,7 @@ class World implements ChunkManager{
 			if($tile instanceof Spawnable){
 				$expectedClass = $fullBlock->getIdInfo()->getTileClass();
 				if($expectedClass !== null && $tile instanceof $expectedClass && count($fakeStateProperties = $tile->getRenderUpdateBugWorkaroundStateProperties($fullBlock)) > 0){
-					$originalStateData = $blockTranslator->internalIdToNetworkStateData($fullBlock->getStateId());
+					$originalStateData = $blockTranslator->internalIdToCurrentNetworkStateData($fullBlock->getStateId());
 					$fakeStateData = new BlockStateData(
 						$originalStateData->getName(),
 						array_merge($originalStateData->getStates(), $fakeStateProperties),
@@ -1210,6 +1212,15 @@ class World implements ChunkManager{
 				UpdateBlockPacket::DATA_LAYER_NORMAL
 			);
 
+			if($secondLayer){
+				$packets[] = UpdateBlockPacket::create(
+					$blockPosition,
+					$blockTranslator->internalIdToNetworkId($this->getBlockAtLayer($b->x, $b->y, $b->z, 1)->getStateId()),
+					UpdateBlockPacket::FLAG_NETWORK,
+					UpdateBlockPacket::DATA_LAYER_LIQUID
+				);
+			}
+
 			if($tile instanceof Spawnable){
 				$packets[] = BlockActorDataPacket::create($blockPosition, $tile->getSerializedSpawnCompound($typeConverter));
 			}
@@ -1225,10 +1236,12 @@ class World implements ChunkManager{
 		}else{
 			$count = 0;
 			foreach($this->blockCache as $list){
-				$count += count($list);
-				if($count > 2048){
-					$this->blockCache = [];
-					break;
+				foreach($list as $layer){
+					$count += count($layer);
+					if($count > 2048){
+						$this->blockCache = [];
+						break;
+					}
 				}
 			}
 
@@ -1532,7 +1545,7 @@ class World implements ChunkManager{
 	 * Schedules a block update to be executed after the specified number of ticks.
 	 * Blocks will be updated with the scheduled update type.
 	 */
-	public function scheduleDelayedBlockUpdate(Vector3 $pos, int $delay) : void{
+	public function scheduleDelayedBlockUpdate(Vector3 $pos, int $delay, int $layer = 0) : void{
 		if(
 			!$this->isInWorld($pos->x, $pos->y, $pos->z) ||
 			(isset($this->scheduledBlockUpdateQueueIndex[$index = World::blockHash($pos->x, $pos->y, $pos->z)]) && $this->scheduledBlockUpdateQueueIndex[$index] <= $delay)
@@ -1540,7 +1553,7 @@ class World implements ChunkManager{
 			return;
 		}
 		$this->scheduledBlockUpdateQueueIndex[$index] = $delay;
-		$this->scheduledBlockUpdateQueue->insert(new Vector3((int) $pos->x, (int) $pos->y, (int) $pos->z), $delay + $this->server->getTick());
+		$this->scheduledBlockUpdateQueue->insert([new Vector3((int) $pos->x, (int) $pos->y, (int) $pos->z), $layer], $delay + $this->server->getTick());
 	}
 
 	private function tryAddToNeighbourUpdateQueue(int $x, int $y, int $z) : void{
@@ -1595,9 +1608,11 @@ class World implements ChunkManager{
 			for($z = $minZ; $z <= $maxZ; ++$z){
 				for($x = $minX; $x <= $maxX; ++$x){
 					for($y = $minY; $y <= $maxY; ++$y){
-						$block = $this->getBlockAt($x, $y, $z);
-						if($block->collidesWithBB($bb)){
-							return [$block];
+						foreach([0, 1] as $layer){
+							$block = $this->getBlockAtLayer($x, $y, $z, $layer);
+							if($block->collidesWithBB($bb)){
+								return [$block];
+							}
 						}
 					}
 				}
@@ -1606,9 +1621,11 @@ class World implements ChunkManager{
 			for($z = $minZ; $z <= $maxZ; ++$z){
 				for($x = $minX; $x <= $maxX; ++$x){
 					for($y = $minY; $y <= $maxY; ++$y){
-						$block = $this->getBlockAt($x, $y, $z);
-						if($block->collidesWithBB($bb)){
-							$collides[] = $block;
+						foreach([0, 1] as $layer){
+							$block = $this->getBlockAtLayer($x, $y, $z, $layer);
+							if($block->collidesWithBB($bb)){
+								$collides[] = $block;
+							}
 						}
 					}
 				}
@@ -1639,6 +1656,10 @@ class World implements ChunkManager{
 			}
 		}
 
+		foreach($this->getBlockAtLayer($x, $y, $z, 1)->getCollisionBoxes() as $layer1Box){
+			$boxes[] = $layer1Box;
+		}
+
 		return $boxes;
 	}
 
@@ -1964,19 +1985,27 @@ class World implements ChunkManager{
 	 * @param bool $addToCache Whether to cache the block object created by this method call.
 	 */
 	public function getBlockAt(int $x, int $y, int $z, bool $cached = true, bool $addToCache = true) : Block{
+		return $this->getBlockAtLayer($x, $y, $z, 0, $cached, $addToCache);
+	}
+
+	public function getBlockLayer(Vector3 $pos, int $layer = 0, bool $cached = true, bool $addToCache = true) : Block{
+		return $this->getBlockAtLayer((int) floor($pos->x), (int) floor($pos->y), (int) floor($pos->z), $layer, $cached, $addToCache);
+	}
+
+	public function getBlockAtLayer(int $x, int $y, int $z, int $layer = 0, bool $cached = true, bool $addToCache = true) : Block{
 		$relativeBlockHash = null;
 		$chunkHash = World::chunkHash($x >> Chunk::COORD_BIT_SIZE, $z >> Chunk::COORD_BIT_SIZE);
 
 		if($this->isInWorld($x, $y, $z)){
 			$relativeBlockHash = World::chunkBlockHash($x, $y, $z);
 
-			if($cached && isset($this->blockCache[$chunkHash][$relativeBlockHash])){
-				return $this->blockCache[$chunkHash][$relativeBlockHash];
+			if($cached && isset($this->blockCache[$chunkHash][$relativeBlockHash][$layer])){
+				return $this->blockCache[$chunkHash][$relativeBlockHash][$layer];
 			}
 
 			$chunk = $this->chunks[$chunkHash] ?? null;
 			if($chunk !== null){
-				$block = RuntimeBlockStateRegistry::getInstance()->fromStateId($chunk->getBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK));
+				$block = RuntimeBlockStateRegistry::getInstance()->fromStateId($chunk->getBlockStateId($x & Chunk::COORD_MASK, $y, $z & Chunk::COORD_MASK, $layer));
 			}else{
 				$addToCache = false;
 				$block = VanillaBlocks::AIR();
@@ -1986,6 +2015,7 @@ class World implements ChunkManager{
 		}
 
 		$block->position($this, $x, $y, $z);
+		$block->setLayer($layer);
 
 		if($this->inDynamicStateRecalculation){
 			//this call was generated by a parent getBlock() call calculating dynamic stateinfo
@@ -2003,7 +2033,7 @@ class World implements ChunkManager{
 		}
 
 		if($addToCache && $relativeBlockHash !== null){
-			$this->blockCache[$chunkHash][$relativeBlockHash] = $block;
+			$this->blockCache[$chunkHash][$relativeBlockHash][$layer] = $block;
 		}
 
 		return $block;
@@ -2027,6 +2057,14 @@ class World implements ChunkManager{
 	 * @throws \InvalidArgumentException if the position is out of the world bounds
 	 */
 	public function setBlockAt(int $x, int $y, int $z, Block $block, bool $update = true) : void{
+		$this->setBlockAtLayer($x, $y, $z, $block, 0, $update);
+	}
+
+	public function setBlockLayer(Vector3 $pos, Block $block, int $layer = 0, bool $update = true) : void{
+		$this->setBlockAtLayer((int) floor($pos->x), (int) floor($pos->y), (int) floor($pos->z), $block, $layer, $update);
+	}
+
+	public function setBlockAtLayer(int $x, int $y, int $z, Block $block, int $layer = 0, bool $update = true) : void{
 		if(!$this->isInWorld($x, $y, $z)){
 			throw new \InvalidArgumentException("Pos x=$x,y=$y,z=$z is outside of the world bounds");
 		}
@@ -2043,13 +2081,14 @@ class World implements ChunkManager{
 		$block = clone $block;
 
 		$block->position($this, $x, $y, $z);
+		$block->setLayer($layer);
 		$block->writeStateToWorld();
 		$pos = new Vector3($x, $y, $z);
 
 		$chunkHash = World::chunkHash($chunkX, $chunkZ);
 		$relativeBlockHash = World::chunkBlockHash($x, $y, $z);
 
-		unset($this->blockCache[$chunkHash][$relativeBlockHash]);
+		unset($this->blockCache[$chunkHash][$relativeBlockHash][$layer]);
 		unset($this->blockCollisionBoxCache[$chunkHash][$relativeBlockHash]);
 		//blocks like fences have collision boxes that reach into neighbouring blocks, so we need to invalidate the
 		//caches for those blocks as well
diff --git a/src/world/WorldManager.php b/src/world/WorldManager.php
index bd968f904..ff603a2df 100644
--- a/src/world/WorldManager.php
+++ b/src/world/WorldManager.php
@@ -129,10 +129,6 @@ class WorldManager{
 		}
 
 		$ev = new WorldUnloadEvent($world);
-		if($world === $this->defaultWorld && !$forceUnload){
-			$ev->cancel();
-		}
-
 		$ev->call();
 
 		if(!$forceUnload && $ev->isCancelled()){
diff --git a/src/world/format/Chunk.php b/src/world/format/Chunk.php
index f92a9fac8..6f8aa1828 100644
--- a/src/world/format/Chunk.php
+++ b/src/world/format/Chunk.php
@@ -29,6 +29,7 @@ namespace pocketmine\world\format;
 use pocketmine\block\Block;
 use pocketmine\block\tile\Tile;
 use pocketmine\data\bedrock\BiomeIds;
+use pocketmine\network\mcpe\protocol\types\DimensionIds;
 use function array_map;
 
 class Chunk{
@@ -62,6 +63,9 @@ class Chunk{
 
 	protected HeightArray $heightMap;
 
+	/** @var int */
+	protected $dimensionId;
+
 	/**
 	 * @param SubChunk[] $subChunks
 	 */
@@ -77,6 +81,13 @@ class Chunk{
 		$this->heightMap = HeightArray::fill($val); //TODO: what about lazily initializing this?
 
 		$this->terrainPopulated = $terrainPopulated;
+
+		// TODO: Hack! There's no way to cleanly do this without diverging from pmmp too much, so this is the best workaround for that
+		$this->dimensionId = match($this->getBiomeId(0, 0, 0)) {
+			BiomeIds::HELL, BiomeIds::BASALT_DELTAS, BiomeIds::SOULSAND_VALLEY, BiomeIds::CRIMSON_FOREST, BiomeIds::WARPED_FOREST => DimensionIds::NETHER,
+			BiomeIds::THE_END => DimensionIds::THE_END,
+			default => DimensionIds::OVERWORLD
+		};
 	}
 
 	/**
@@ -95,15 +106,15 @@ class Chunk{
 	 *
 	 * @return int the blockstate ID of the given block
 	 */
-	public function getBlockStateId(int $x, int $y, int $z) : int{
-		return $this->getSubChunk($y >> SubChunk::COORD_BIT_SIZE)->getBlockStateId($x, $y & SubChunk::COORD_MASK, $z);
+	public function getBlockStateId(int $x, int $y, int $z, int $layer = 0) : int{
+		return $this->getSubChunk($y >> SubChunk::COORD_BIT_SIZE)->getBlockStateId($x, $y & SubChunk::COORD_MASK, $z, $layer);
 	}
 
 	/**
 	 * Sets the blockstate at the given coordinate by internal ID.
 	 */
-	public function setBlockStateId(int $x, int $y, int $z, int $block) : void{
-		$this->getSubChunk($y >> SubChunk::COORD_BIT_SIZE)->setBlockStateId($x, $y & SubChunk::COORD_MASK, $z, $block);
+	public function setBlockStateId(int $x, int $y, int $z, int $block, int $layer = 0) : void{
+		$this->getSubChunk($y >> SubChunk::COORD_BIT_SIZE)->setBlockStateId($x, $y & SubChunk::COORD_MASK, $z, $block, $layer);
 		$this->terrainDirtyFlags |= self::DIRTY_FLAG_BLOCKS;
 	}
 
@@ -277,6 +288,17 @@ class Chunk{
 		$this->terrainDirtyFlags = self::DIRTY_FLAGS_NONE;
 	}
 
+	public function getDimensionId() : int{
+		return $this->dimensionId;
+	}
+
+	/**
+	 * @see DimensionIds
+	 */
+	public function setDimensionId(int $dimension) : void{
+		$this->dimensionId = $dimension;
+	}
+
 	public function getSubChunk(int $y) : SubChunk{
 		if($y < self::MIN_SUBCHUNK_INDEX || $y > self::MAX_SUBCHUNK_INDEX){
 			throw new \InvalidArgumentException("Invalid subchunk Y coordinate $y");
diff --git a/src/world/format/SubChunk.php b/src/world/format/SubChunk.php
index 3f7e943e3..f758c0569 100644
--- a/src/world/format/SubChunk.php
+++ b/src/world/format/SubChunk.php
@@ -69,18 +69,24 @@ class SubChunk{
 	 */
 	public function getEmptyBlockId() : int{ return $this->emptyBlockId; }
 
-	public function getBlockStateId(int $x, int $y, int $z) : int{
-		if(count($this->blockLayers) === 0){
+	public function getBlockStateId(int $x, int $y, int $z, int $layer = 0) : int{
+		if(!isset($this->blockLayers[$layer])){
 			return $this->emptyBlockId;
 		}
-		return $this->blockLayers[0]->get($x, $y, $z);
+		if($x > SubChunk::COORD_MASK || $z > SubChunk::COORD_MASK){
+			throw new \InvalidArgumentException("Coordinates x=$x,y=$y,z=$z is out of bounds");
+		}
+		return $this->blockLayers[$layer]->get($x, $y, $z);
 	}
 
-	public function setBlockStateId(int $x, int $y, int $z, int $block) : void{
-		if(count($this->blockLayers) === 0){
-			$this->blockLayers[] = new PalettedBlockArray($this->emptyBlockId);
+	public function setBlockStateId(int $x, int $y, int $z, int $block, int $layer = 0) : void{
+		if(!isset($this->blockLayers[$layer])){
+			$this->blockLayers[$layer] = new PalettedBlockArray($this->emptyBlockId);
 		}
-		$this->blockLayers[0]->set($x, $y, $z, $block);
+		if($x > SubChunk::COORD_MASK || $z > SubChunk::COORD_MASK){
+			throw new \InvalidArgumentException("Coordinates x=$x,y=$y,z=$z is out of bounds");
+		}
+		$this->blockLayers[$layer]->set($x, $y, $z, $block);
 	}
 
 	/**
@@ -94,6 +100,9 @@ class SubChunk{
 		if(count($this->blockLayers) === 0){
 			return null;
 		}
+		if($x > SubChunk::COORD_MASK || $z > SubChunk::COORD_MASK){
+			throw new \InvalidArgumentException("Coordinates x=$x,z=$z is out of bounds");
+		}
 		for($y = self::EDGE_LENGTH - 1; $y >= 0; --$y){
 			if($this->blockLayers[0]->get($x, $y, $z) !== $this->emptyBlockId){
 				return $y;
diff --git a/src/world/format/io/BaseWorldProvider.php b/src/world/format/io/BaseWorldProvider.php
index a4d8651a6..e7c5f7ca5 100644
--- a/src/world/format/io/BaseWorldProvider.php
+++ b/src/world/format/io/BaseWorldProvider.php
@@ -71,6 +71,7 @@ abstract class BaseWorldProvider implements WorldProvider{
 			try{
 				$newStateData = $this->blockDataUpgrader->upgradeIntIdMeta($legacyIdMeta >> 4, $legacyIdMeta & 0xf);
 			}catch(BlockStateDeserializeException $e){
+				$this->logger->logException($e);
 				$newStateData = GlobalBlockStateHandlers::getUnknownBlockStateData();
 			}
 
diff --git a/src/world/format/io/leveldb/LevelDB.php b/src/world/format/io/leveldb/LevelDB.php
index 3d4f577a1..f0aa6a993 100644
--- a/src/world/format/io/leveldb/LevelDB.php
+++ b/src/world/format/io/leveldb/LevelDB.php
@@ -25,12 +25,14 @@ namespace pocketmine\world\format\io\leveldb;
 
 use pocketmine\block\Block;
 use pocketmine\data\bedrock\BiomeIds;
+use pocketmine\data\bedrock\block\BlockStateData;
 use pocketmine\data\bedrock\block\BlockStateDeserializeException;
 use pocketmine\nbt\LittleEndianNbtSerializer;
 use pocketmine\nbt\NBT;
 use pocketmine\nbt\NbtDataException;
 use pocketmine\nbt\tag\CompoundTag;
 use pocketmine\nbt\TreeRoot;
+use pocketmine\network\mcpe\convert\TypeConverter;
 use pocketmine\utils\Binary;
 use pocketmine\utils\BinaryDataException;
 use pocketmine\utils\BinaryStream;
@@ -196,7 +198,7 @@ class LevelDB extends BaseWorldProvider implements WritableWorldProvider{
 
 			//TODO: remember data for unknown states so we can implement them later
 			try{
-				$blockStateData = $this->blockDataUpgrader->upgradeBlockStateNbt($blockStateNbt);
+				$blockStateData = $this->blockDataUpgrader->upgradeBlockStateNbt($blockStateNbt->setInt(BlockStateData::TAG_VERSION, 0));
 			}catch(BlockStateDeserializeException $e){
 				//while not ideal, this is not a fatal error
 				$logger->error("Failed to upgrade blockstate: " . $e->getMessage() . " offset $i in palette, blockstate NBT: " . $blockStateNbt->toString());
@@ -204,7 +206,16 @@ class LevelDB extends BaseWorldProvider implements WritableWorldProvider{
 				continue;
 			}
 			try{
-				$palette[] = $this->blockStateDeserializer->deserialize($blockStateData);
+				try{
+					$palette[] = $this->blockStateDeserializer->deserialize($blockStateData);
+				}catch(BlockStateDeserializeException $e){
+					$dictionary = TypeConverter::getInstance()->getBlockTranslator()->getBlockStateDictionary();
+					$palette[] = $this->blockStateDeserializer->deserialize(
+						$dictionary->generateDataFromStateId(
+							$dictionary->lookupStateIdFromIdMeta($blockStateData->getName(), 0) ?? throw $e
+						) ?? throw $e
+					);
+				}
 			}catch(BlockStateDeserializeException $e){
 				$logger->error("Failed to deserialize blockstate: " . $e->getMessage() . " offset $i in palette, blockstate NBT: " . $blockStateNbt->toString());
 				$palette[] = $this->blockStateDeserializer->deserialize(GlobalBlockStateHandlers::getUnknownBlockStateData());
@@ -309,12 +320,17 @@ class LevelDB extends BaseWorldProvider implements WritableWorldProvider{
 					break;
 				}
 			}catch(BinaryDataException $e){
-				throw new CorruptedChunkException("Failed to deserialize biome palette $i: " . $e->getMessage(), 0, $e);
+				//throw new CorruptedChunkException("Failed to deserialize biome palette $i: " . $e->getMessage(), 0, $e);
+				$result = [];
+				for($subChunkIndex = Chunk::MIN_SUBCHUNK_INDEX; $subChunkIndex <= Chunk::MAX_SUBCHUNK_INDEX; $subChunkIndex++){
+					$result[$subChunkIndex] = new PalettedBlockArray(BiomeIds::OCEAN);
+				}
+				return $result;
 			}
 		}
 		if(!$stream->feof()){
 			//maybe bad output produced by a third-party conversion tool like Chunker
-			$logger->error("Unexpected trailing data after 3D biomes data");
+			//$logger->error("Unexpected trailing data after 3D biomes data");
 		}
 
 		return $result;
diff --git a/src/world/generator/noise/Noise.php b/src/world/generator/noise/Noise.php
index af9cefe14..d91a58350 100644
--- a/src/world/generator/noise/Noise.php
+++ b/src/world/generator/noise/Noise.php
@@ -208,6 +208,7 @@ abstract class Noise{
 			throw new \InvalidArgumentException("xSize % samplingRate must return 0");
 		}
 
+		/** @phpstan-var \SplFixedArray<float> $noiseArray */
 		$noiseArray = new \SplFixedArray($xSize + 1);
 
 		for($xx = 0; $xx <= $xSize; $xx += $samplingRate){
@@ -217,7 +218,13 @@ abstract class Noise{
 		for($xx = 0; $xx < $xSize; ++$xx){
 			if($xx % $samplingRate !== 0){
 				$nx = (int) ($xx / $samplingRate) * $samplingRate;
-				$noiseArray[$xx] = self::linearLerp($xx, $nx, $nx + $samplingRate, $noiseArray[$nx], $noiseArray[$nx + $samplingRate]);
+				$noiseArray[$xx] = self::linearLerp(
+					x: $xx,
+					x1: $nx,
+					x2: $nx + $samplingRate,
+					q0: $noiseArray[$nx],
+					q1: $noiseArray[$nx + $samplingRate]
+				);
 			}
 		}
 
@@ -234,6 +241,7 @@ abstract class Noise{
 		assert($xSize % $samplingRate === 0, new \InvalidArgumentException("xSize % samplingRate must return 0"));
 		assert($zSize % $samplingRate === 0, new \InvalidArgumentException("zSize % samplingRate must return 0"));
 
+		/** @phpstan-var \SplFixedArray<\SplFixedArray<float>> $noiseArray */
 		$noiseArray = new \SplFixedArray($xSize + 1);
 
 		for($xx = 0; $xx <= $xSize; $xx += $samplingRate){
@@ -253,9 +261,16 @@ abstract class Noise{
 					$nx = (int) ($xx / $samplingRate) * $samplingRate;
 					$nz = (int) ($zz / $samplingRate) * $samplingRate;
 					$noiseArray[$xx][$zz] = Noise::bilinearLerp(
-						$xx, $zz, $noiseArray[$nx][$nz], $noiseArray[$nx][$nz + $samplingRate],
-						$noiseArray[$nx + $samplingRate][$nz], $noiseArray[$nx + $samplingRate][$nz + $samplingRate],
-						$nx, $nx + $samplingRate, $nz, $nz + $samplingRate
+						x: $xx,
+						y: $zz,
+						q00: $noiseArray[$nx][$nz],
+						q01: $noiseArray[$nx][$nz + $samplingRate],
+						q10: $noiseArray[$nx + $samplingRate][$nz],
+						q11: $noiseArray[$nx + $samplingRate][$nz + $samplingRate],
+						x1: $nx,
+						x2: $nx + $samplingRate,
+						y1: $nz,
+						y2: $nz + $samplingRate
 					);
 				}
 			}
diff --git a/src/world/generator/object/TreeType.php b/src/world/generator/object/TreeType.php
index d4d62946a..62b933172 100644
--- a/src/world/generator/object/TreeType.php
+++ b/src/world/generator/object/TreeType.php
@@ -23,22 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\world\generator\object;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static TreeType ACACIA()
- * @method static TreeType BIRCH()
- * @method static TreeType DARK_OAK()
- * @method static TreeType JUNGLE()
- * @method static TreeType OAK()
- * @method static TreeType SPRUCE()
- */
 enum TreeType{
-	use LegacyEnumShimTrait;
-
 	case OAK;
 	case SPRUCE;
 	case BIRCH;
diff --git a/src/world/sound/EntityLandSound.php b/src/world/sound/EntityLandSound.php
index 235309edd..df098b8e8 100644
--- a/src/world/sound/EntityLandSound.php
+++ b/src/world/sound/EntityLandSound.php
@@ -45,7 +45,7 @@ class EntityLandSound extends BlockSound{
 			LevelSoundEvent::LAND,
 			$pos,
 			$this->toRuntimeId(),
-			$this->entity::getNetworkTypeId(),
+			$this->entity->getNetworkTypeId(),
 			false, //TODO: does isBaby have any relevance here?
 			false
 		)];
diff --git a/src/world/sound/EntityLongFallSound.php b/src/world/sound/EntityLongFallSound.php
index e0dabe3a5..30c4425b1 100644
--- a/src/world/sound/EntityLongFallSound.php
+++ b/src/world/sound/EntityLongFallSound.php
@@ -40,7 +40,7 @@ class EntityLongFallSound implements Sound{
 			LevelSoundEvent::FALL_BIG,
 			$pos,
 			-1,
-			$this->entity::getNetworkTypeId(),
+			$this->entity->getNetworkTypeId(),
 			false, //TODO: is isBaby relevant here?
 			false
 		)];
diff --git a/src/world/sound/EntityShortFallSound.php b/src/world/sound/EntityShortFallSound.php
index 8955c3552..3ea39b3fe 100644
--- a/src/world/sound/EntityShortFallSound.php
+++ b/src/world/sound/EntityShortFallSound.php
@@ -39,7 +39,7 @@ class EntityShortFallSound implements Sound{
 			LevelSoundEvent::FALL_SMALL,
 			$pos,
 			-1,
-			$this->entity::getNetworkTypeId(),
+			$this->entity->getNetworkTypeId(),
 			false, //TODO: does isBaby have any relevance here?
 			false
 		)];
diff --git a/src/world/sound/ItemUseOnBlockSound.php b/src/world/sound/ItemUseOnBlockSound.php
index 5454bae26..3b5306608 100644
--- a/src/world/sound/ItemUseOnBlockSound.php
+++ b/src/world/sound/ItemUseOnBlockSound.php
@@ -33,7 +33,7 @@ final class ItemUseOnBlockSound extends BlockSound{
 			LevelSoundEvent::ITEM_USE_ON,
 			$pos,
 			false,
-			$this->toRuntimeId(),
+			$this->toRuntimeId()
 		)];
 	}
 }
diff --git a/src/world/sound/NoteInstrument.php b/src/world/sound/NoteInstrument.php
index a91d52cf7..2536467b4 100644
--- a/src/world/sound/NoteInstrument.php
+++ b/src/world/sound/NoteInstrument.php
@@ -23,32 +23,7 @@ declare(strict_types=1);
 
 namespace pocketmine\world\sound;
 
-use pocketmine\utils\LegacyEnumShimTrait;
-
-/**
- * TODO: These tags need to be removed once we get rid of LegacyEnumShimTrait (PM6)
- *  These are retained for backwards compatibility only.
- *
- * @method static NoteInstrument BANJO()
- * @method static NoteInstrument BASS_DRUM()
- * @method static NoteInstrument BELL()
- * @method static NoteInstrument BIT()
- * @method static NoteInstrument CHIME()
- * @method static NoteInstrument CLICKS_AND_STICKS()
- * @method static NoteInstrument COW_BELL()
- * @method static NoteInstrument DIDGERIDOO()
- * @method static NoteInstrument DOUBLE_BASS()
- * @method static NoteInstrument FLUTE()
- * @method static NoteInstrument GUITAR()
- * @method static NoteInstrument IRON_XYLOPHONE()
- * @method static NoteInstrument PIANO()
- * @method static NoteInstrument PLING()
- * @method static NoteInstrument SNARE()
- * @method static NoteInstrument XYLOPHONE()
- */
 enum NoteInstrument{
-	use LegacyEnumShimTrait;
-
 	case PIANO;
 	case BASS_DRUM;
 	case SNARE;
diff --git a/tests/phpstan/configs/actual-problems.neon b/tests/phpstan/configs/actual-problems.neon
index e265d8e57..a462b6aea 100644
--- a/tests/phpstan/configs/actual-problems.neon
+++ b/tests/phpstan/configs/actual-problems.neon
@@ -925,6 +925,11 @@ parameters:
 			count: 1
 			path: ../../../src/world/World.php
 
+		-
+			message: "#^Parameter \\#1 \\$x of method pocketmine\\\\world\\\\World\\:\\:getBlockAtLayer\\(\\) expects int, float\\|int given\\.$#"
+			count: 1
+			path: ../../../src/world/World.php
+
 		-
 			message: "#^Parameter \\#1 \\$x of method pocketmine\\\\world\\\\World\\:\\:getTileAt\\(\\) expects int, float\\|int given\\.$#"
 			count: 1
@@ -950,6 +955,11 @@ parameters:
 			count: 1
 			path: ../../../src/world/World.php
 
+		-
+			message: "#^Parameter \\#2 \\$y of method pocketmine\\\\world\\\\World\\:\\:getBlockAtLayer\\(\\) expects int, float\\|int given\\.$#"
+			count: 1
+			path: ../../../src/world/World.php
+
 		-
 			message: "#^Parameter \\#2 \\$y of method pocketmine\\\\world\\\\World\\:\\:getTileAt\\(\\) expects int, float\\|int given\\.$#"
 			count: 1
@@ -975,6 +985,11 @@ parameters:
 			count: 1
 			path: ../../../src/world/World.php
 
+		-
+			message: "#^Parameter \\#3 \\$z of method pocketmine\\\\world\\\\World\\:\\:getBlockAtLayer\\(\\) expects int, float\\|int given\\.$#"
+			count: 1
+			path: ../../../src/world/World.php
+
 		-
 			message: "#^Parameter \\#3 \\$z of method pocketmine\\\\world\\\\World\\:\\:getTileAt\\(\\) expects int, float\\|int given\\.$#"
 			count: 1
@@ -1070,6 +1085,21 @@ parameters:
 			count: 1
 			path: ../../../src/world/generator/hell/Nether.php
 
+		-
+			message: "#^Offset int does not exist on SplFixedArray\\<float\\>\\|null\\.$#"
+			count: 4
+			path: ../../../src/world/generator/noise/Noise.php
+
+		-
+			message: "#^Parameter \\$q0 of static method pocketmine\\\\world\\\\generator\\\\noise\\\\Noise\\:\\:linearLerp\\(\\) expects float, float\\|null given\\.$#"
+			count: 1
+			path: ../../../src/world/generator/noise/Noise.php
+
+		-
+			message: "#^Parameter \\$q1 of static method pocketmine\\\\world\\\\generator\\\\noise\\\\Noise\\:\\:linearLerp\\(\\) expects float, float\\|null given\\.$#"
+			count: 1
+			path: ../../../src/world/generator/noise/Noise.php
+
 		-
 			message: "#^Cannot call method getBiomeId\\(\\) on pocketmine\\\\world\\\\format\\\\Chunk\\|null\\.$#"
 			count: 1
diff --git a/tests/phpstan/configs/phpstan-bugs.neon b/tests/phpstan/configs/phpstan-bugs.neon
index b3bf3dadd..af0486611 100644
--- a/tests/phpstan/configs/phpstan-bugs.neon
+++ b/tests/phpstan/configs/phpstan-bugs.neon
@@ -1,10 +1,5 @@
 parameters:
 	ignoreErrors:
-		-
-			message: "#^Instanceof between pocketmine\\\\block\\\\utils\\\\BannerPatternLayer and pocketmine\\\\block\\\\utils\\\\BannerPatternLayer will always evaluate to true\\.$#"
-			count: 1
-			path: ../../../src/block/BaseBanner.php
-
 		-
 			message: "#^Method pocketmine\\\\block\\\\CakeWithCandle\\:\\:onInteractCandle\\(\\) has parameter \\$returnedItems with no value type specified in iterable type array\\.$#"
 			count: 1
diff --git a/tests/phpstan/rules/DeprecatedLegacyEnumAccessRule.php b/tests/phpstan/rules/DeprecatedLegacyEnumAccessRule.php
deleted file mode 100644
index 4fa767022..000000000
--- a/tests/phpstan/rules/DeprecatedLegacyEnumAccessRule.php
+++ /dev/null
@@ -1,79 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\phpstan\rules;
-
-use PhpParser\Node;
-use PhpParser\Node\Expr\StaticCall;
-use PHPStan\Analyser\Scope;
-use PHPStan\Rules\Rule;
-use PHPStan\Rules\RuleErrorBuilder;
-use PHPStan\Type\TypeWithClassName;
-use pocketmine\utils\LegacyEnumShimTrait;
-use function sprintf;
-
-/**
- * @phpstan-implements Rule<StaticCall>
- */
-final class DeprecatedLegacyEnumAccessRule implements Rule{
-
-	public function getNodeType() : string{
-		return StaticCall::class;
-	}
-
-	public function processNode(Node $node, Scope $scope) : array{
-		/** @var StaticCall $node */
-		if(!$node->name instanceof Node\Identifier){
-			return [];
-		}
-		$caseName = $node->name->name;
-		$classType = $node->class instanceof Node\Name ?
-			$scope->resolveTypeByName($node->class) :
-			$scope->getType($node->class);
-
-		if(!$classType instanceof TypeWithClassName){
-			return [];
-		}
-
-		$reflection = $classType->getClassReflection();
-		if($reflection === null || !$reflection->hasTraitUse(LegacyEnumShimTrait::class) || !$reflection->implementsInterface(\UnitEnum::class)){
-			return [];
-		}
-
-		if(!$reflection->hasNativeMethod($caseName)){
-			return [
-				RuleErrorBuilder::message(sprintf(
-					'Use of legacy enum case accessor %s::%s().',
-					$reflection->getName(),
-					$caseName
-				))->tip(sprintf(
-					'Access the enum constant directly instead (remove the brackets), e.g. %s::%s',
-					$reflection->getName(),
-					$caseName
-				))->build()
-			];
-		}
-
-		return [];
-	}
-}
diff --git a/tests/phpstan/rules/DisallowEnumComparisonRule.php b/tests/phpstan/rules/DisallowEnumComparisonRule.php
deleted file mode 100644
index fc5377173..000000000
--- a/tests/phpstan/rules/DisallowEnumComparisonRule.php
+++ /dev/null
@@ -1,90 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\phpstan\rules;
-
-use PhpParser\Node;
-use PhpParser\Node\Expr\BinaryOp;
-use PhpParser\Node\Expr\BinaryOp\Identical;
-use PhpParser\Node\Expr\BinaryOp\NotIdentical;
-use PHPStan\Analyser\Scope;
-use PHPStan\Rules\Rule;
-use PHPStan\Rules\RuleErrorBuilder;
-use PHPStan\Type\ObjectType;
-use PHPStan\Type\Type;
-use PHPStan\Type\UnionType;
-use PHPStan\Type\VerbosityLevel;
-use pocketmine\utils\EnumTrait;
-use function sprintf;
-
-/**
- * @phpstan-implements Rule<BinaryOp>
- */
-class DisallowEnumComparisonRule implements Rule{
-
-	public function getNodeType() : string{
-		return BinaryOp::class;
-	}
-
-	public function processNode(Node $node, Scope $scope) : array{
-		if(!($node instanceof Identical) && !($node instanceof NotIdentical)){
-			return [];
-		}
-
-		$leftType = $scope->getType($node->left);
-		$rightType = $scope->getType($node->right);
-		$leftEnum = $this->checkForEnumTypes($leftType);
-		$rightEnum = $this->checkForEnumTypes($rightType);
-		if($leftEnum && $rightEnum){
-			return [RuleErrorBuilder::message(sprintf(
-				'Strict comparison using %s involving enum types %s and %s is not reliable.',
-				$node instanceof Identical ? '===' : '!==',
-				$leftType->describe(VerbosityLevel::value()),
-				$rightType->describe(VerbosityLevel::value())
-			))->build()];
-		}
-		return [];
-	}
-
-	private function checkForEnumTypes(Type $comparedType) : bool{
-		//TODO: what we really want to do here is iterate over the contained types, but there's no universal way to
-		//do that. This might break with other circumstances.
-		if($comparedType instanceof ObjectType){
-			$types = [$comparedType];
-		}elseif($comparedType instanceof UnionType){
-			$types = $comparedType->getTypes();
-		}else{
-			return false;
-		}
-		foreach($types as $containedType){
-			if(!($containedType instanceof ObjectType)){
-				continue;
-			}
-			$class = $containedType->getClassReflection();
-			if($class !== null && $class->hasTraitUse(EnumTrait::class)){
-				return true;
-			}
-		}
-		return false;
-	}
-}
diff --git a/tests/phpunit/data/bedrock/DyeColorIdMapTest.php b/tests/phpunit/data/bedrock/DyeColorIdMapTest.php
deleted file mode 100644
index a3ca6db25..000000000
--- a/tests/phpunit/data/bedrock/DyeColorIdMapTest.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\data\bedrock;
-
-use PHPUnit\Framework\TestCase;
-use pocketmine\block\utils\DyeColor;
-
-class DyeColorIdMapTest extends TestCase{
-
-	public function testAllColorsMapped() : void{
-		foreach(DyeColor::cases() as $color){
-			$id = DyeColorIdMap::getInstance()->toId($color);
-			$color2 = DyeColorIdMap::getInstance()->fromId($id);
-			self::assertTrue($color === $color2);
-		}
-	}
-}
diff --git a/tests/phpunit/utils/TestEnum.php b/tests/phpunit/utils/TestEnum.php
deleted file mode 100644
index d21b1e300..000000000
--- a/tests/phpunit/utils/TestEnum.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
- */
-
-declare(strict_types=1);
-
-namespace pocketmine\utils;
-
-/**
- * This doc-block is generated automatically, do not modify it manually.
- * This must be regenerated whenever registry members are added, removed or changed.
- * @see RegistryTrait::_generateMethodAnnotations()
- *
- * @method static self ONE()
- * @method static self TWO()
- * @method static self THREE()
- */
-
-class TestEnum{
-	use EnumTrait;
-
-	protected static function setup() : void{
-		self::registerAll(
-			new self("one"),
-			new self("two"),
-			new self("three")
-		);
-	}
-}
diff --git a/tests/plugins/DevTools b/tests/plugins/DevTools
deleted file mode 160000
index c6dca357c..000000000
--- a/tests/plugins/DevTools
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit c6dca357c7e8a37ce3479a1bedfe849451e072e3
diff --git a/tests/travis.sh b/tests/travis.sh
index 094f65905..467db5e62 100755
--- a/tests/travis.sh
+++ b/tests/travis.sh
@@ -19,9 +19,6 @@ rm PocketMine-MP.phar 2> /dev/null
 mkdir "$DATA_DIR"
 mkdir "$PLUGINS_DIR"
 
-cd tests/plugins/DevTools
-php -dphar.readonly=0 ./src/ConsoleScript.php --make ./ --relative ./ --out "$PLUGINS_DIR/DevTools.phar"
-cd ../../..
 composer make-server
 
 if [ -f PocketMine-MP.phar ]; then
diff --git a/tools/generate-block-palette-spec.php b/tools/generate-block-palette-spec.php
index 6217d5437..879ffd6b4 100644
--- a/tools/generate-block-palette-spec.php
+++ b/tools/generate-block-palette-spec.php
@@ -40,6 +40,7 @@ use function get_class;
 use function json_encode;
 use function ksort;
 use const JSON_PRETTY_PRINT;
+use const SORT_NATURAL;
 use const SORT_STRING;
 use const STDERR;
 
@@ -82,7 +83,7 @@ foreach($states as $state){
 
 foreach(Utils::stringifyKeys($reportMap) as $blockName => $propertyList){
 	foreach(Utils::stringifyKeys($propertyList) as $propertyName => $propertyValues){
-		ksort($reportMap[$blockName][$propertyName]);
+		ksort($propertyValues, SORT_NATURAL);
 		$reportMap[$blockName][$propertyName] = array_values($propertyValues);
 	}
 }
